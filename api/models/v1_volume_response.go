// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VolumeResponse v1 volume response
//
// swagger:model v1.VolumeResponse
type V1VolumeResponse struct {

	// connected hosts
	// Required: true
	ConnectedHosts []string `json:"ConnectedHosts"`

	// partition ID
	// Required: true
	PartitionID *string `json:"PartitionID"`

	// project ID
	// Required: true
	ProjectID *string `json:"ProjectID"`

	// replica count
	// Required: true
	ReplicaCount *int64 `json:"ReplicaCount"`

	// size
	// Required: true
	Size *int64 `json:"Size"`

	// volume handle
	// Required: true
	VolumeHandle *string `json:"VolumeHandle"`

	// volume ID
	// Required: true
	VolumeID *string `json:"VolumeID"`
}

// Validate validates this v1 volume response
func (m *V1VolumeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VolumeResponse) validateConnectedHosts(formats strfmt.Registry) error {

	if err := validate.Required("ConnectedHosts", "body", m.ConnectedHosts); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validatePartitionID(formats strfmt.Registry) error {

	if err := validate.Required("PartitionID", "body", m.PartitionID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("ProjectID", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateReplicaCount(formats strfmt.Registry) error {

	if err := validate.Required("ReplicaCount", "body", m.ReplicaCount); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateVolumeHandle(formats strfmt.Registry) error {

	if err := validate.Required("VolumeHandle", "body", m.VolumeHandle); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("VolumeID", "body", m.VolumeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VolumeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VolumeResponse) UnmarshalBinary(b []byte) error {
	var res V1VolumeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
