// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1VolumeResponse v1 volume response
//
// swagger:model v1.VolumeResponse
type V1VolumeResponse struct {

	// connected hosts
	// Required: true
	ConnectedHosts []string `json:"ConnectedHosts" yaml:"ConnectedHosts"`

	// node IP list
	// Required: true
	NodeIPList []string `json:"NodeIPList" yaml:"NodeIPList"`

	// partition ID
	// Required: true
	PartitionID *string `json:"PartitionID" yaml:"PartitionID"`

	// primary node UUID
	// Required: true
	PrimaryNodeUUID *string `json:"PrimaryNodeUUID" yaml:"PrimaryNodeUUID"`

	// project ID
	// Required: true
	ProjectID *string `json:"ProjectID" yaml:"ProjectID"`

	// protection state
	// Required: true
	ProtectionState *string `json:"ProtectionState" yaml:"ProtectionState"`

	// qos policy name
	// Required: true
	QosPolicyName *string `json:"QosPolicyName" yaml:"QosPolicyName"`

	// qos policy UUID
	// Required: true
	QosPolicyUUID *string `json:"QosPolicyUUID" yaml:"QosPolicyUUID"`

	// rebuild progress
	// Required: true
	RebuildProgress *string `json:"RebuildProgress" yaml:"RebuildProgress"`

	// replica count
	// Required: true
	ReplicaCount *int64 `json:"ReplicaCount" yaml:"ReplicaCount"`

	// size
	// Required: true
	Size *int64 `json:"Size" yaml:"Size"`

	// source snapshot UUID
	// Required: true
	SourceSnapshotUUID *string `json:"SourceSnapshotUUID" yaml:"SourceSnapshotUUID"`

	// state
	// Required: true
	State *string `json:"State" yaml:"State"`

	// statistics
	// Required: true
	Statistics *V1VolumeStatistics `json:"Statistics" yaml:"Statistics"`

	// storage class
	// Required: true
	StorageClass *string `json:"StorageClass" yaml:"StorageClass"`

	// tenant ID
	// Required: true
	TenantID *string `json:"TenantID" yaml:"TenantID"`

	// volume handle
	// Required: true
	VolumeHandle *string `json:"VolumeHandle" yaml:"VolumeHandle"`

	// volume ID
	// Required: true
	VolumeID *string `json:"VolumeID" yaml:"VolumeID"`

	// volume name
	// Required: true
	VolumeName *string `json:"VolumeName" yaml:"VolumeName"`
}

// Validate validates this v1 volume response
func (m *V1VolumeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeIPList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryNodeUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicyUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebuildProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceSnapshotUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VolumeResponse) validateConnectedHosts(formats strfmt.Registry) error {

	if err := validate.Required("ConnectedHosts", "body", m.ConnectedHosts); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateNodeIPList(formats strfmt.Registry) error {

	if err := validate.Required("NodeIPList", "body", m.NodeIPList); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validatePartitionID(formats strfmt.Registry) error {

	if err := validate.Required("PartitionID", "body", m.PartitionID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validatePrimaryNodeUUID(formats strfmt.Registry) error {

	if err := validate.Required("PrimaryNodeUUID", "body", m.PrimaryNodeUUID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("ProjectID", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateProtectionState(formats strfmt.Registry) error {

	if err := validate.Required("ProtectionState", "body", m.ProtectionState); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateQosPolicyName(formats strfmt.Registry) error {

	if err := validate.Required("QosPolicyName", "body", m.QosPolicyName); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateQosPolicyUUID(formats strfmt.Registry) error {

	if err := validate.Required("QosPolicyUUID", "body", m.QosPolicyUUID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateRebuildProgress(formats strfmt.Registry) error {

	if err := validate.Required("RebuildProgress", "body", m.RebuildProgress); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateReplicaCount(formats strfmt.Registry) error {

	if err := validate.Required("ReplicaCount", "body", m.ReplicaCount); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateSourceSnapshotUUID(formats strfmt.Registry) error {

	if err := validate.Required("SourceSnapshotUUID", "body", m.SourceSnapshotUUID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateState(formats strfmt.Registry) error {

	if err := validate.Required("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateStatistics(formats strfmt.Registry) error {

	if err := validate.Required("Statistics", "body", m.Statistics); err != nil {
		return err
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Statistics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Statistics")
			}
			return err
		}
	}

	return nil
}

func (m *V1VolumeResponse) validateStorageClass(formats strfmt.Registry) error {

	if err := validate.Required("StorageClass", "body", m.StorageClass); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("TenantID", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateVolumeHandle(formats strfmt.Registry) error {

	if err := validate.Required("VolumeHandle", "body", m.VolumeHandle); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("VolumeID", "body", m.VolumeID); err != nil {
		return err
	}

	return nil
}

func (m *V1VolumeResponse) validateVolumeName(formats strfmt.Registry) error {

	if err := validate.Required("VolumeName", "body", m.VolumeName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 volume response based on the context it is used
func (m *V1VolumeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatistics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1VolumeResponse) contextValidateStatistics(ctx context.Context, formats strfmt.Registry) error {

	if m.Statistics != nil {
		if err := m.Statistics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Statistics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Statistics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1VolumeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1VolumeResponse) UnmarshalBinary(b []byte) error {
	var res V1VolumeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
