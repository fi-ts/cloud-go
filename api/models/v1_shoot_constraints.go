// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ShootConstraints v1 shoot constraints
// swagger:model v1.ShootConstraints
type V1ShootConstraints struct {

	// the list of available kubernetes versions
	// Required: true
	KubernetesVersions []string `json:"kubernetes_versions"`

	// the list of available machine images
	// Required: true
	MachineImages []*V1MachineImage `json:"machine_images"`

	// the list of available machine types
	// Required: true
	MachineTypes []string `json:"machine_types"`

	// a list of partition specific shoot contraints
	// Required: true
	PartitionConstraints map[string]V1PartitionContraints `json:"partition_constraints"`

	// the list of available partitions
	// Required: true
	Partitions []string `json:"partitions"`
}

// Validate validates this v1 shoot constraints
func (m *V1ShootConstraints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ShootConstraints) validateKubernetesVersions(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_versions", "body", m.KubernetesVersions); err != nil {
		return err
	}

	return nil
}

func (m *V1ShootConstraints) validateMachineImages(formats strfmt.Registry) error {

	if err := validate.Required("machine_images", "body", m.MachineImages); err != nil {
		return err
	}

	for i := 0; i < len(m.MachineImages); i++ {
		if swag.IsZero(m.MachineImages[i]) { // not required
			continue
		}

		if m.MachineImages[i] != nil {
			if err := m.MachineImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machine_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ShootConstraints) validateMachineTypes(formats strfmt.Registry) error {

	if err := validate.Required("machine_types", "body", m.MachineTypes); err != nil {
		return err
	}

	return nil
}

func (m *V1ShootConstraints) validatePartitionConstraints(formats strfmt.Registry) error {

	for k := range m.PartitionConstraints {

		if err := validate.Required("partition_constraints"+"."+k, "body", m.PartitionConstraints[k]); err != nil {
			return err
		}
		if val, ok := m.PartitionConstraints[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1ShootConstraints) validatePartitions(formats strfmt.Registry) error {

	if err := validate.Required("partitions", "body", m.Partitions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ShootConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ShootConstraints) UnmarshalBinary(b []byte) error {
	var res V1ShootConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
