// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PostgresSecretsRespone v1 postgres secrets respone
//
// swagger:model v1.PostgresSecretsRespone
type V1PostgresSecretsRespone struct {

	// user secret
	UserSecret []*V1UserSecret `json:"userSecret" yaml:"userSecret"`
}

// Validate validates this v1 postgres secrets respone
func (m *V1PostgresSecretsRespone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PostgresSecretsRespone) validateUserSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.UserSecret) { // not required
		return nil
	}

	for i := 0; i < len(m.UserSecret); i++ {
		if swag.IsZero(m.UserSecret[i]) { // not required
			continue
		}

		if m.UserSecret[i] != nil {
			if err := m.UserSecret[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userSecret" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userSecret" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 postgres secrets respone based on the context it is used
func (m *V1PostgresSecretsRespone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PostgresSecretsRespone) contextValidateUserSecret(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserSecret); i++ {

		if m.UserSecret[i] != nil {
			if err := m.UserSecret[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userSecret" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userSecret" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PostgresSecretsRespone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PostgresSecretsRespone) UnmarshalBinary(b []byte) error {
	var res V1PostgresSecretsRespone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
