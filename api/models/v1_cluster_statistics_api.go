// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterStatisticsAPI v1 cluster statistics Api
//
// swagger:model v1.ClusterStatisticsApi
type V1ClusterStatisticsAPI struct {

	// compression ratio
	// Required: true
	CompressionRatio *float64 `json:"CompressionRatio"`

	// effective physical storage
	// Required: true
	EffectivePhysicalStorage *int64 `json:"EffectivePhysicalStorage"`

	// estimated free logical storage
	// Required: true
	EstimatedFreeLogicalStorage *int64 `json:"EstimatedFreeLogicalStorage"`

	// estimated logical storage
	// Required: true
	EstimatedLogicalStorage *int64 `json:"EstimatedLogicalStorage"`

	// free physical storage
	// Required: true
	FreePhysicalStorage *int64 `json:"FreePhysicalStorage"`

	// installed physical storage
	// Required: true
	InstalledPhysicalStorage *int64 `json:"InstalledPhysicalStorage"`

	// logical storage
	// Required: true
	LogicalStorage *int64 `json:"LogicalStorage"`

	// logical used storage
	// Required: true
	LogicalUsedStorage *int64 `json:"LogicalUsedStorage"`

	// managed physical storage
	// Required: true
	ManagedPhysicalStorage *int64 `json:"ManagedPhysicalStorage"`

	// physical used storage
	// Required: true
	PhysicalUsedStorage *int64 `json:"PhysicalUsedStorage"`

	// physical used storage including parity
	// Required: true
	PhysicalUsedStorageIncludingParity *int64 `json:"PhysicalUsedStorageIncludingParity"`
}

// Validate validates this v1 cluster statistics Api
func (m *V1ClusterStatisticsAPI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompressionRatio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectivePhysicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedFreeLogicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedLogicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreePhysicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledPhysicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalUsedStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedPhysicalStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalUsedStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalUsedStorageIncludingParity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterStatisticsAPI) validateCompressionRatio(formats strfmt.Registry) error {

	if err := validate.Required("CompressionRatio", "body", m.CompressionRatio); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateEffectivePhysicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("EffectivePhysicalStorage", "body", m.EffectivePhysicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateEstimatedFreeLogicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("EstimatedFreeLogicalStorage", "body", m.EstimatedFreeLogicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateEstimatedLogicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("EstimatedLogicalStorage", "body", m.EstimatedLogicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateFreePhysicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("FreePhysicalStorage", "body", m.FreePhysicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateInstalledPhysicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("InstalledPhysicalStorage", "body", m.InstalledPhysicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateLogicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("LogicalStorage", "body", m.LogicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateLogicalUsedStorage(formats strfmt.Registry) error {

	if err := validate.Required("LogicalUsedStorage", "body", m.LogicalUsedStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validateManagedPhysicalStorage(formats strfmt.Registry) error {

	if err := validate.Required("ManagedPhysicalStorage", "body", m.ManagedPhysicalStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validatePhysicalUsedStorage(formats strfmt.Registry) error {

	if err := validate.Required("PhysicalUsedStorage", "body", m.PhysicalUsedStorage); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterStatisticsAPI) validatePhysicalUsedStorageIncludingParity(formats strfmt.Registry) error {

	if err := validate.Required("PhysicalUsedStorageIncludingParity", "body", m.PhysicalUsedStorageIncludingParity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 cluster statistics Api based on context it is used
func (m *V1ClusterStatisticsAPI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterStatisticsAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterStatisticsAPI) UnmarshalBinary(b []byte) error {
	var res V1ClusterStatisticsAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
