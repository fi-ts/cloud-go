// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1InstanceCreateRequest v1 instance create request
//
// swagger:model v1.InstanceCreateRequest
type V1InstanceCreateRequest struct {

	// vm name
	// Required: true
	VMName *string `json:"vm_name"`

	// vm num cpu per socket
	// Required: true
	VMNumCPUPerSocket *int32 `json:"vm_num_cpu_per_socket"`

	// vm num sockets
	// Required: true
	VMNumSockets *int32 `json:"vm_num_sockets"`

	// vm ram
	// Required: true
	VMRAM *string `json:"vm_ram"`
}

// Validate validates this v1 instance create request
func (m *V1InstanceCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVMName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNumCPUPerSocket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNumSockets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMRAM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InstanceCreateRequest) validateVMName(formats strfmt.Registry) error {

	if err := validate.Required("vm_name", "body", m.VMName); err != nil {
		return err
	}

	return nil
}

func (m *V1InstanceCreateRequest) validateVMNumCPUPerSocket(formats strfmt.Registry) error {

	if err := validate.Required("vm_num_cpu_per_socket", "body", m.VMNumCPUPerSocket); err != nil {
		return err
	}

	return nil
}

func (m *V1InstanceCreateRequest) validateVMNumSockets(formats strfmt.Registry) error {

	if err := validate.Required("vm_num_sockets", "body", m.VMNumSockets); err != nil {
		return err
	}

	return nil
}

func (m *V1InstanceCreateRequest) validateVMRAM(formats strfmt.Registry) error {

	if err := validate.Required("vm_ram", "body", m.VMRAM); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 instance create request based on context it is used
func (m *V1InstanceCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1InstanceCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1InstanceCreateRequest) UnmarshalBinary(b []byte) error {
	var res V1InstanceCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
