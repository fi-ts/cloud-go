// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineReservationUsage v1 machine reservation usage
//
// swagger:model v1.MachineReservationUsage
type V1MachineReservationUsage struct {

	// the average amount of unused machine reservations in the given time window
	// Required: true
	Average *string `json:"average"`

	// the contract number attached to this entity
	// Required: true
	Contract *string `json:"contract"`

	// the debtor id attached to this entity
	// Required: true
	Debtorid *string `json:"debtorid"`

	// the id of this machine reservation
	// Required: true
	ID *string `json:"id"`

	// the partition of this machine reservation
	// Required: true
	Partition *string `json:"partition"`

	// the project id of this entity
	// Required: true
	Projectid *string `json:"projectid"`

	// the project name of this entity
	// Required: true
	Projectname *string `json:"projectname"`

	// the amount of the number of unused machine reservations multiplied by time
	// Required: true
	Reservationseconds *string `json:"reservationseconds"`

	// the size id of this machine reservation
	// Required: true
	Sizeid *string `json:"sizeid"`

	// the tenant of this entity
	// Required: true
	Tenant *string `json:"tenant"`

	// the tenant name of this entity
	// Required: true
	Tenantname *string `json:"tenantname"`
}

// Validate validates this v1 machine reservation usage
func (m *V1MachineReservationUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservationseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineReservationUsage) validateAverage(formats strfmt.Registry) error {

	if err := validate.Required("average", "body", m.Average); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateContract(formats strfmt.Registry) error {

	if err := validate.Required("contract", "body", m.Contract); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateDebtorid(formats strfmt.Registry) error {

	if err := validate.Required("debtorid", "body", m.Debtorid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateProjectname(formats strfmt.Registry) error {

	if err := validate.Required("projectname", "body", m.Projectname); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateReservationseconds(formats strfmt.Registry) error {

	if err := validate.Required("reservationseconds", "body", m.Reservationseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateSizeid(formats strfmt.Registry) error {

	if err := validate.Required("sizeid", "body", m.Sizeid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsage) validateTenantname(formats strfmt.Registry) error {

	if err := validate.Required("tenantname", "body", m.Tenantname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 machine reservation usage based on context it is used
func (m *V1MachineReservationUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineReservationUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineReservationUsage) UnmarshalBinary(b []byte) error {
	var res V1MachineReservationUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
