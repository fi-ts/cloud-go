// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterCredentialsResponse v1 cluster credentials response
//
// swagger:model v1.ClusterCredentialsResponse
type V1ClusterCredentialsResponse struct {

	// kubeconfig
	// Required: true
	Kubeconfig *string `json:"Kubeconfig"`

	// SSH key pair
	// Required: true
	SSHKeyPair *V1SSHKeyPair `json:"SSHKeyPair"`
}

// Validate validates this v1 cluster credentials response
func (m *V1ClusterCredentialsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubeconfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKeyPair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterCredentialsResponse) validateKubeconfig(formats strfmt.Registry) error {

	if err := validate.Required("Kubeconfig", "body", m.Kubeconfig); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterCredentialsResponse) validateSSHKeyPair(formats strfmt.Registry) error {

	if err := validate.Required("SSHKeyPair", "body", m.SSHKeyPair); err != nil {
		return err
	}

	if m.SSHKeyPair != nil {
		if err := m.SSHKeyPair.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SSHKeyPair")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 cluster credentials response based on the context it is used
func (m *V1ClusterCredentialsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSSHKeyPair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterCredentialsResponse) contextValidateSSHKeyPair(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHKeyPair != nil {
		if err := m.SSHKeyPair.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SSHKeyPair")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterCredentialsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterCredentialsResponse) UnmarshalBinary(b []byte) error {
	var res V1ClusterCredentialsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
