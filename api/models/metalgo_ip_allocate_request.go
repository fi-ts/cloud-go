// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetalgoIPAllocateRequest metalgo IP allocate request
//
// swagger:model metalgo.IPAllocateRequest
type MetalgoIPAllocateRequest struct {

	// description
	Description string `json:"description,omitempty"`

	// ipaddress
	// Required: true
	Ipaddress *string `json:"ipaddress"`

	// machineid
	// Required: true
	Machineid *string `json:"machineid"`

	// name
	Name string `json:"name,omitempty"`

	// networkid
	// Required: true
	Networkid *string `json:"networkid"`

	// projectid
	// Required: true
	Projectid *string `json:"projectid"`

	// tags
	Tags []string `json:"tags"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this metalgo IP allocate request
func (m *MetalgoIPAllocateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIpaddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetalgoIPAllocateRequest) validateIpaddress(formats strfmt.Registry) error {

	if err := validate.Required("ipaddress", "body", m.Ipaddress); err != nil {
		return err
	}

	return nil
}

func (m *MetalgoIPAllocateRequest) validateMachineid(formats strfmt.Registry) error {

	if err := validate.Required("machineid", "body", m.Machineid); err != nil {
		return err
	}

	return nil
}

func (m *MetalgoIPAllocateRequest) validateNetworkid(formats strfmt.Registry) error {

	if err := validate.Required("networkid", "body", m.Networkid); err != nil {
		return err
	}

	return nil
}

func (m *MetalgoIPAllocateRequest) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this metalgo IP allocate request based on context it is used
func (m *MetalgoIPAllocateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetalgoIPAllocateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetalgoIPAllocateRequest) UnmarshalBinary(b []byte) error {
	var res MetalgoIPAllocateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
