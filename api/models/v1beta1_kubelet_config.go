// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1beta1KubeletConfig v1beta1 kubelet config
// swagger:model v1beta1.KubeletConfig
type V1beta1KubeletConfig struct {

	// cpu c f s quota
	CPUCFSQuota bool `json:"cpuCFSQuota,omitempty"`

	// cpu manager policy
	CPUManagerPolicy string `json:"cpuManagerPolicy,omitempty"`

	// eviction hard
	EvictionHard *V1beta1KubeletConfigEviction `json:"evictionHard,omitempty"`

	// eviction max pod grace period
	EvictionMaxPodGracePeriod int32 `json:"evictionMaxPodGracePeriod,omitempty"`

	// eviction minimum reclaim
	EvictionMinimumReclaim *V1beta1KubeletConfigEvictionMinimumReclaim `json:"evictionMinimumReclaim,omitempty"`

	// eviction pressure transition period
	EvictionPressureTransitionPeriod string `json:"evictionPressureTransitionPeriod,omitempty"`

	// eviction soft
	EvictionSoft *V1beta1KubeletConfigEviction `json:"evictionSoft,omitempty"`

	// eviction soft grace period
	EvictionSoftGracePeriod *V1beta1KubeletConfigEvictionSoftGracePeriod `json:"evictionSoftGracePeriod,omitempty"`

	// feature gates
	FeatureGates map[string]bool `json:"featureGates,omitempty"`

	// image pull progress deadline
	ImagePullProgressDeadline string `json:"imagePullProgressDeadline,omitempty"`

	// max pods
	MaxPods int32 `json:"maxPods,omitempty"`

	// pod pids limit
	PodPidsLimit int64 `json:"podPidsLimit,omitempty"`
}

// Validate validates this v1beta1 kubelet config
func (m *V1beta1KubeletConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvictionHard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvictionMinimumReclaim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvictionSoft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvictionSoftGracePeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1KubeletConfig) validateEvictionHard(formats strfmt.Registry) error {

	if swag.IsZero(m.EvictionHard) { // not required
		return nil
	}

	if m.EvictionHard != nil {
		if err := m.EvictionHard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evictionHard")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1KubeletConfig) validateEvictionMinimumReclaim(formats strfmt.Registry) error {

	if swag.IsZero(m.EvictionMinimumReclaim) { // not required
		return nil
	}

	if m.EvictionMinimumReclaim != nil {
		if err := m.EvictionMinimumReclaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evictionMinimumReclaim")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1KubeletConfig) validateEvictionSoft(formats strfmt.Registry) error {

	if swag.IsZero(m.EvictionSoft) { // not required
		return nil
	}

	if m.EvictionSoft != nil {
		if err := m.EvictionSoft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evictionSoft")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1KubeletConfig) validateEvictionSoftGracePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.EvictionSoftGracePeriod) { // not required
		return nil
	}

	if m.EvictionSoftGracePeriod != nil {
		if err := m.EvictionSoftGracePeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evictionSoftGracePeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1KubeletConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1KubeletConfig) UnmarshalBinary(b []byte) error {
	var res V1beta1KubeletConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
