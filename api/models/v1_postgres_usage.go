// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PostgresUsage v1 postgres usage
//
// swagger:model v1.PostgresUsage
type V1PostgresUsage struct {

	// the cpu seconds of this postgres (s*s)
	// Required: true
	Cpuseconds *string `json:"cpuseconds"`

	// the duration that this postgres is running
	// Required: true
	Lifetime *int64 `json:"lifetime"`

	// the memory seconds of this postgres (byte*s)
	// Required: true
	Memoryseconds *string `json:"memoryseconds"`

	// the partition of this postgres
	// Required: true
	Partition *string `json:"partition"`

	// the cluster name of this postgres
	// Required: true
	Postgresdescription *string `json:"postgresdescription"`

	// the end time of this postgres
	// Required: true
	// Format: date-time
	Postgresend *strfmt.DateTime `json:"postgresend"`

	// the id of this postgres
	// Required: true
	Postgresid *string `json:"postgresid"`

	// the start time of this postgres
	// Required: true
	// Format: date-time
	Postgresstart *strfmt.DateTime `json:"postgresstart"`

	// the project id of this postgres
	// Required: true
	Projectid *string `json:"projectid"`

	// the accumulated storage seconds of the postgres in this response (byte*s)
	// Required: true
	Storageseconds *string `json:"storageseconds"`

	// the tenant of this postgres
	// Required: true
	Tenant *string `json:"tenant"`

	// warnings that occurred when calculating the usage of this postgres
	// Required: true
	Warnings []string `json:"warnings"`
}

// Validate validates this v1 postgres usage
func (m *V1PostgresUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpuseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostgresdescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostgresend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostgresid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostgresstart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PostgresUsage) validateCpuseconds(formats strfmt.Registry) error {

	if err := validate.Required("cpuseconds", "body", m.Cpuseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validateLifetime(formats strfmt.Registry) error {

	if err := validate.Required("lifetime", "body", m.Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validateMemoryseconds(formats strfmt.Registry) error {

	if err := validate.Required("memoryseconds", "body", m.Memoryseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validatePostgresdescription(formats strfmt.Registry) error {

	if err := validate.Required("postgresdescription", "body", m.Postgresdescription); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validatePostgresend(formats strfmt.Registry) error {

	if err := validate.Required("postgresend", "body", m.Postgresend); err != nil {
		return err
	}

	if err := validate.FormatOf("postgresend", "body", "date-time", m.Postgresend.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validatePostgresid(formats strfmt.Registry) error {

	if err := validate.Required("postgresid", "body", m.Postgresid); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validatePostgresstart(formats strfmt.Registry) error {

	if err := validate.Required("postgresstart", "body", m.Postgresstart); err != nil {
		return err
	}

	if err := validate.FormatOf("postgresstart", "body", "date-time", m.Postgresstart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validateStorageseconds(formats strfmt.Registry) error {

	if err := validate.Required("storageseconds", "body", m.Storageseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsage) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("warnings", "body", m.Warnings); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 postgres usage based on context it is used
func (m *V1PostgresUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PostgresUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PostgresUsage) UnmarshalBinary(b []byte) error {
	var res V1PostgresUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
