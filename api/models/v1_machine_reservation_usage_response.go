// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineReservationUsageResponse v1 machine reservation usage response
//
// swagger:model v1.MachineReservationUsageResponse
type V1MachineReservationUsageResponse struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// labels
	// Required: true
	Labels map[string]string `json:"labels"`

	// partitionid
	// Required: true
	Partitionid *string `json:"partitionid"`

	// projectallocations
	// Required: true
	Projectallocations *int32 `json:"projectallocations"`

	// projectid
	// Required: true
	Projectid *string `json:"projectid"`

	// projectname
	// Required: true
	Projectname *string `json:"projectname"`

	// reservations
	// Required: true
	Reservations *int32 `json:"reservations"`

	// sizeid
	// Required: true
	Sizeid *string `json:"sizeid"`

	// tenant
	// Required: true
	Tenant *string `json:"tenant"`

	// usedreservations
	// Required: true
	Usedreservations *int32 `json:"usedreservations"`
}

// Validate validates this v1 machine reservation usage response
func (m *V1MachineReservationUsageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectallocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedreservations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineReservationUsageResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validatePartitionid(formats strfmt.Registry) error {

	if err := validate.Required("partitionid", "body", m.Partitionid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateProjectallocations(formats strfmt.Registry) error {

	if err := validate.Required("projectallocations", "body", m.Projectallocations); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateProjectname(formats strfmt.Registry) error {

	if err := validate.Required("projectname", "body", m.Projectname); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateReservations(formats strfmt.Registry) error {

	if err := validate.Required("reservations", "body", m.Reservations); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateSizeid(formats strfmt.Registry) error {

	if err := validate.Required("sizeid", "body", m.Sizeid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageResponse) validateUsedreservations(formats strfmt.Registry) error {

	if err := validate.Required("usedreservations", "body", m.Usedreservations); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 machine reservation usage response based on context it is used
func (m *V1MachineReservationUsageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineReservationUsageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineReservationUsageResponse) UnmarshalBinary(b []byte) error {
	var res V1MachineReservationUsageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
