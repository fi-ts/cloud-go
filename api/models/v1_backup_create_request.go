// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1BackupCreateRequest v1 backup create request
//
// swagger:model v1.BackupCreateRequest
type V1BackupCreateRequest struct {

	// autocreate
	Autocreate bool `json:"autocreate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// partition
	Partition string `json:"partition,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// retention
	Retention int32 `json:"retention,omitempty"`

	// s3 bucket name
	S3BucketName string `json:"s3BucketName,omitempty"`

	// s3 endpoint
	S3Endpoint string `json:"s3Endpoint,omitempty"`

	// schedule
	Schedule string `json:"schedule,omitempty"`

	// secret
	Secret *V1BackupSecret `json:"secret,omitempty"`

	// tenant
	Tenant string `json:"tenant,omitempty"`
}

// Validate validates this v1 backup create request
func (m *V1BackupCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BackupCreateRequest) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {
		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 backup create request based on the context it is used
func (m *V1BackupCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BackupCreateRequest) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.Secret != nil {
		if err := m.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BackupCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BackupCreateRequest) UnmarshalBinary(b []byte) error {
	var res V1BackupCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
