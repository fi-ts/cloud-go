// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AllowedNetworks v1 allowed networks
//
// swagger:model v1.AllowedNetworks
type V1AllowedNetworks struct {

	// egress
	// Required: true
	Egress []string `json:"egress"`

	// ingress
	// Required: true
	Ingress []string `json:"ingress"`
}

// Validate validates this v1 allowed networks
func (m *V1AllowedNetworks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AllowedNetworks) validateEgress(formats strfmt.Registry) error {

	if err := validate.Required("egress", "body", m.Egress); err != nil {
		return err
	}

	return nil
}

func (m *V1AllowedNetworks) validateIngress(formats strfmt.Registry) error {

	if err := validate.Required("ingress", "body", m.Ingress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 allowed networks based on context it is used
func (m *V1AllowedNetworks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1AllowedNetworks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AllowedNetworks) UnmarshalBinary(b []byte) error {
	var res V1AllowedNetworks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
