// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PostgresUsageAccumuluated v1 postgres usage accumuluated
//
// swagger:model v1.PostgresUsageAccumuluated
type V1PostgresUsageAccumuluated struct {

	// the accumuluated cpu seconds of the postgres in this response (s*s)
	// Required: true
	Cpuseconds *string `json:"cpuseconds"`

	// the duration that this postgres is running
	// Required: true
	Lifetime *int64 `json:"lifetime"`

	// the accumulated memory seconds of the postgres in this response (byte*s)
	// Required: true
	Memoryseconds *string `json:"memoryseconds"`

	// the accumulated storage seconds of the postgres in this response (byte*s)
	// Required: true
	Storageseconds *string `json:"storageseconds"`
}

// Validate validates this v1 postgres usage accumuluated
func (m *V1PostgresUsageAccumuluated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpuseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageseconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PostgresUsageAccumuluated) validateCpuseconds(formats strfmt.Registry) error {

	if err := validate.Required("cpuseconds", "body", m.Cpuseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsageAccumuluated) validateLifetime(formats strfmt.Registry) error {

	if err := validate.Required("lifetime", "body", m.Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsageAccumuluated) validateMemoryseconds(formats strfmt.Registry) error {

	if err := validate.Required("memoryseconds", "body", m.Memoryseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresUsageAccumuluated) validateStorageseconds(formats strfmt.Registry) error {

	if err := validate.Required("storageseconds", "body", m.Storageseconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 postgres usage accumuluated based on context it is used
func (m *V1PostgresUsageAccumuluated) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PostgresUsageAccumuluated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PostgresUsageAccumuluated) UnmarshalBinary(b []byte) error {
	var res V1PostgresUsageAccumuluated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
