// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1QoSPolicyResponse v1 qo s policy response
//
// swagger:model v1.QoSPolicyResponse
type V1QoSPolicyResponse struct {

	// description
	// Required: true
	Description *string `json:"Description"`

	// limit
	// Required: true
	Limit *V1QoSPolicyLimit `json:"Limit"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// qo s policy ID
	// Required: true
	QoSPolicyID *string `json:"QoSPolicyID"`
}

// Validate validates this v1 qo s policy response
func (m *V1QoSPolicyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQoSPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1QoSPolicyResponse) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V1QoSPolicyResponse) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("Limit", "body", m.Limit); err != nil {
		return err
	}

	if m.Limit != nil {
		if err := m.Limit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Limit")
			}
			return err
		}
	}

	return nil
}

func (m *V1QoSPolicyResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1QoSPolicyResponse) validateQoSPolicyID(formats strfmt.Registry) error {

	if err := validate.Required("QoSPolicyID", "body", m.QoSPolicyID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 qo s policy response based on the context it is used
func (m *V1QoSPolicyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1QoSPolicyResponse) contextValidateLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.Limit != nil {

		if err := m.Limit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Limit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1QoSPolicyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1QoSPolicyResponse) UnmarshalBinary(b []byte) error {
	var res V1QoSPolicyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
