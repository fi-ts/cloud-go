// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1beta1ShootSpec v1beta1 shoot spec
// swagger:model v1beta1.ShootSpec
type V1beta1ShootSpec struct {

	// addons
	Addons *V1beta1Addons `json:"addons,omitempty"`

	// cloud profile name
	// Required: true
	CloudProfileName *string `json:"cloudProfileName"`

	// dns
	DNS *V1beta1DNS `json:"dns,omitempty"`

	// extensions
	Extensions []*V1beta1Extension `json:"extensions"`

	// hibernation
	Hibernation *V1beta1Hibernation `json:"hibernation,omitempty"`

	// kubernetes
	// Required: true
	Kubernetes *V1beta1Kubernetes `json:"kubernetes"`

	// maintenance
	Maintenance *V1beta1Maintenance `json:"maintenance,omitempty"`

	// monitoring
	Monitoring *V1beta1Monitoring `json:"monitoring,omitempty"`

	// networking
	// Required: true
	Networking *V1beta1Networking `json:"networking"`

	// provider
	// Required: true
	Provider *V1beta1Provider `json:"provider"`

	// purpose
	Purpose string `json:"purpose,omitempty"`

	// region
	// Required: true
	Region *string `json:"region"`

	// secret binding name
	// Required: true
	SecretBindingName *string `json:"secretBindingName"`

	// seed name
	SeedName string `json:"seedName,omitempty"`
}

// Validate validates this v1beta1 shoot spec
func (m *V1beta1ShootSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProfileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHibernation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoring(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretBindingName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ShootSpec) validateAddons(formats strfmt.Registry) error {

	if swag.IsZero(m.Addons) { // not required
		return nil
	}

	if m.Addons != nil {
		if err := m.Addons.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addons")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateCloudProfileName(formats strfmt.Registry) error {

	if err := validate.Required("cloudProfileName", "body", m.CloudProfileName); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1ShootSpec) validateDNS(formats strfmt.Registry) error {

	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	if m.DNS != nil {
		if err := m.DNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	for i := 0; i < len(m.Extensions); i++ {
		if swag.IsZero(m.Extensions[i]) { // not required
			continue
		}

		if m.Extensions[i] != nil {
			if err := m.Extensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootSpec) validateHibernation(formats strfmt.Registry) error {

	if swag.IsZero(m.Hibernation) { // not required
		return nil
	}

	if m.Hibernation != nil {
		if err := m.Hibernation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hibernation")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateKubernetes(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes", "body", m.Kubernetes); err != nil {
		return err
	}

	if m.Kubernetes != nil {
		if err := m.Kubernetes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateMaintenance(formats strfmt.Registry) error {

	if swag.IsZero(m.Maintenance) { // not required
		return nil
	}

	if m.Maintenance != nil {
		if err := m.Maintenance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenance")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateMonitoring(formats strfmt.Registry) error {

	if swag.IsZero(m.Monitoring) { // not required
		return nil
	}

	if m.Monitoring != nil {
		if err := m.Monitoring.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoring")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateNetworking(formats strfmt.Registry) error {

	if err := validate.Required("networking", "body", m.Networking); err != nil {
		return err
	}

	if m.Networking != nil {
		if err := m.Networking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootSpec) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1ShootSpec) validateSecretBindingName(formats strfmt.Registry) error {

	if err := validate.Required("secretBindingName", "body", m.SecretBindingName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1ShootSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1ShootSpec) UnmarshalBinary(b []byte) error {
	var res V1beta1ShootSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
