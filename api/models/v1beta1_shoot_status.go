// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1beta1ShootStatus v1beta1 shoot status
//
// swagger:model v1beta1.ShootStatus
type V1beta1ShootStatus struct {

	// advertised addresses
	AdvertisedAddresses []*V1beta1ShootAdvertisedAddress `json:"advertisedAddresses"`

	// cluster identity
	ClusterIdentity string `json:"clusterIdentity,omitempty"`

	// conditions
	Conditions []*V1beta1Condition `json:"conditions"`

	// constraints
	Constraints []*V1beta1Condition `json:"constraints"`

	// credentials
	Credentials *V1beta1ShootCredentials `json:"credentials,omitempty"`

	// encrypted resources
	EncryptedResources []string `json:"encryptedResources"`

	// gardener
	// Required: true
	Gardener *V1beta1Gardener `json:"gardener"`

	// hibernated
	// Required: true
	Hibernated *bool `json:"hibernated"`

	// last errors
	LastErrors []*V1beta1LastError `json:"lastErrors"`

	// last hibernation trigger time
	LastHibernationTriggerTime string `json:"lastHibernationTriggerTime,omitempty"`

	// last maintenance
	LastMaintenance *V1beta1LastMaintenance `json:"lastMaintenance,omitempty"`

	// last operation
	LastOperation *V1beta1LastOperation `json:"lastOperation,omitempty"`

	// migration start time
	MigrationStartTime string `json:"migrationStartTime,omitempty"`

	// networking
	Networking *V1beta1NetworkingStatus `json:"networking,omitempty"`

	// observed generation
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`

	// retry cycle start time
	RetryCycleStartTime string `json:"retryCycleStartTime,omitempty"`

	// seed name
	SeedName string `json:"seedName,omitempty"`

	// technical ID
	// Required: true
	TechnicalID *string `json:"technicalID"`

	// uid
	// Required: true
	UID *string `json:"uid"`
}

// Validate validates this v1beta1 shoot status
func (m *V1beta1ShootStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvertisedAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGardener(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHibernated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastMaintenance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ShootStatus) validateAdvertisedAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvertisedAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvertisedAddresses); i++ {
		if swag.IsZero(m.AdvertisedAddresses[i]) { // not required
			continue
		}

		if m.AdvertisedAddresses[i] != nil {
			if err := m.AdvertisedAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advertisedAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advertisedAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) validateConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.Constraints) { // not required
		return nil
	}

	for i := 0; i < len(m.Constraints); i++ {
		if swag.IsZero(m.Constraints[i]) { // not required
			continue
		}

		if m.Constraints[i] != nil {
			if err := m.Constraints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("constraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) validateGardener(formats strfmt.Registry) error {

	if err := validate.Required("gardener", "body", m.Gardener); err != nil {
		return err
	}

	if m.Gardener != nil {
		if err := m.Gardener.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gardener")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gardener")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) validateHibernated(formats strfmt.Registry) error {

	if err := validate.Required("hibernated", "body", m.Hibernated); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1ShootStatus) validateLastErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.LastErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.LastErrors); i++ {
		if swag.IsZero(m.LastErrors[i]) { // not required
			continue
		}

		if m.LastErrors[i] != nil {
			if err := m.LastErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lastErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lastErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) validateLastMaintenance(formats strfmt.Registry) error {
	if swag.IsZero(m.LastMaintenance) { // not required
		return nil
	}

	if m.LastMaintenance != nil {
		if err := m.LastMaintenance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastMaintenance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastMaintenance")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) validateLastOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.LastOperation) { // not required
		return nil
	}

	if m.LastOperation != nil {
		if err := m.LastOperation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOperation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastOperation")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) validateNetworking(formats strfmt.Registry) error {
	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	if m.Networking != nil {
		if err := m.Networking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) validateTechnicalID(formats strfmt.Registry) error {

	if err := validate.Required("technicalID", "body", m.TechnicalID); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1ShootStatus) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1beta1 shoot status based on the context it is used
func (m *V1beta1ShootStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvertisedAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGardener(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastMaintenance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ShootStatus) contextValidateAdvertisedAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvertisedAddresses); i++ {

		if m.AdvertisedAddresses[i] != nil {

			if swag.IsZero(m.AdvertisedAddresses[i]) { // not required
				return nil
			}

			if err := m.AdvertisedAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advertisedAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advertisedAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateConstraints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Constraints); i++ {

		if m.Constraints[i] != nil {

			if swag.IsZero(m.Constraints[i]) { // not required
				return nil
			}

			if err := m.Constraints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("constraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateGardener(ctx context.Context, formats strfmt.Registry) error {

	if m.Gardener != nil {

		if err := m.Gardener.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gardener")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gardener")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateLastErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastErrors); i++ {

		if m.LastErrors[i] != nil {

			if swag.IsZero(m.LastErrors[i]) { // not required
				return nil
			}

			if err := m.LastErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lastErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lastErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateLastMaintenance(ctx context.Context, formats strfmt.Registry) error {

	if m.LastMaintenance != nil {

		if swag.IsZero(m.LastMaintenance) { // not required
			return nil
		}

		if err := m.LastMaintenance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastMaintenance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastMaintenance")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateLastOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.LastOperation != nil {

		if swag.IsZero(m.LastOperation) { // not required
			return nil
		}

		if err := m.LastOperation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOperation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastOperation")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootStatus) contextValidateNetworking(ctx context.Context, formats strfmt.Registry) error {

	if m.Networking != nil {

		if swag.IsZero(m.Networking) { // not required
			return nil
		}

		if err := m.Networking.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1ShootStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1ShootStatus) UnmarshalBinary(b []byte) error {
	var res V1beta1ShootStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
