// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1StorageServerInfo v1 storage server info
//
// swagger:model v1.StorageServerInfo
type V1StorageServerInfo struct {

	// light o s version
	// Required: true
	LightOSVersion *string `json:"LightOSVersion" yaml:"LightOSVersion"`

	// name
	// Required: true
	Name *string `json:"Name" yaml:"Name"`

	// risk of service loss state
	// Required: true
	RiskOfServiceLossState *string `json:"RiskOfServiceLossState" yaml:"RiskOfServiceLossState"`

	// server endpoints
	// Required: true
	ServerEndpoints []string `json:"ServerEndpoints" yaml:"ServerEndpoints"`

	// state
	// Required: true
	State *string `json:"State" yaml:"State"`

	// UUID
	// Required: true
	UUID *string `json:"UUID" yaml:"UUID"`
}

// Validate validates this v1 storage server info
func (m *V1StorageServerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLightOSVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskOfServiceLossState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1StorageServerInfo) validateLightOSVersion(formats strfmt.Registry) error {

	if err := validate.Required("LightOSVersion", "body", m.LightOSVersion); err != nil {
		return err
	}

	return nil
}

func (m *V1StorageServerInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1StorageServerInfo) validateRiskOfServiceLossState(formats strfmt.Registry) error {

	if err := validate.Required("RiskOfServiceLossState", "body", m.RiskOfServiceLossState); err != nil {
		return err
	}

	return nil
}

func (m *V1StorageServerInfo) validateServerEndpoints(formats strfmt.Registry) error {

	if err := validate.Required("ServerEndpoints", "body", m.ServerEndpoints); err != nil {
		return err
	}

	return nil
}

func (m *V1StorageServerInfo) validateState(formats strfmt.Registry) error {

	if err := validate.Required("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1StorageServerInfo) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("UUID", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 storage server info based on context it is used
func (m *V1StorageServerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1StorageServerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1StorageServerInfo) UnmarshalBinary(b []byte) error {
	var res V1StorageServerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
