// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsV1MachineResponse models v1 machine response
//
// swagger:model models.V1MachineResponse
type ModelsV1MachineResponse struct {

	// allocation
	Allocation *ModelsV1MachineAllocation `json:"allocation,omitempty"`

	// bios
	// Required: true
	Bios *ModelsV1MachineBIOS `json:"bios"`

	// changed
	Changed string `json:"changed,omitempty"`

	// created
	Created string `json:"created,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// events
	// Required: true
	Events *ModelsV1MachineRecentProvisioningEvents `json:"events"`

	// hardware
	// Required: true
	Hardware *ModelsV1MachineHardware `json:"hardware"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ledstate
	// Required: true
	Ledstate *ModelsV1ChassisIdentifyLEDState `json:"ledstate"`

	// liveliness
	// Required: true
	Liveliness *string `json:"liveliness"`

	// name
	Name string `json:"name,omitempty"`

	// partition
	Partition *ModelsV1PartitionResponse `json:"partition,omitempty"`

	// rackid
	Rackid string `json:"rackid,omitempty"`

	// size
	Size *ModelsV1SizeResponse `json:"size,omitempty"`

	// state
	// Required: true
	State *ModelsV1MachineState `json:"state"`

	// tags
	// Required: true
	Tags []string `json:"tags"`
}

// Validate validates this models v1 machine response
func (m *ModelsV1MachineResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBios(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLedstate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveliness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsV1MachineResponse) validateAllocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Allocation) { // not required
		return nil
	}

	if m.Allocation != nil {
		if err := m.Allocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateBios(formats strfmt.Registry) error {

	if err := validate.Required("bios", "body", m.Bios); err != nil {
		return err
	}

	if m.Bios != nil {
		if err := m.Bios.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bios")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateHardware(formats strfmt.Registry) error {

	if err := validate.Required("hardware", "body", m.Hardware); err != nil {
		return err
	}

	if m.Hardware != nil {
		if err := m.Hardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateLedstate(formats strfmt.Registry) error {

	if err := validate.Required("ledstate", "body", m.Ledstate); err != nil {
		return err
	}

	if m.Ledstate != nil {
		if err := m.Ledstate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ledstate")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateLiveliness(formats strfmt.Registry) error {

	if err := validate.Required("liveliness", "body", m.Liveliness); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineResponse) validatePartition(formats strfmt.Registry) error {

	if swag.IsZero(m.Partition) { // not required
		return nil
	}

	if m.Partition != nil {
		if err := m.Partition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partition")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if m.Size != nil {
		if err := m.Size.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1MachineResponse) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsV1MachineResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsV1MachineResponse) UnmarshalBinary(b []byte) error {
	var res ModelsV1MachineResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
