// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsV1FilesystemLayoutResponse models v1 filesystem layout response
//
// swagger:model models.V1FilesystemLayoutResponse
type ModelsV1FilesystemLayoutResponse struct {

	// constraints
	// Required: true
	Constraints *ModelsV1FilesystemLayoutConstraints `json:"constraints"`

	// description
	Description string `json:"description,omitempty"`

	// disks
	// Required: true
	Disks []*ModelsV1Disk `json:"disks"`

	// filesystems
	// Required: true
	Filesystems []*ModelsV1Filesystem `json:"filesystems"`

	// id
	// Required: true
	ID *string `json:"id"`

	// logicalvolumes
	// Required: true
	Logicalvolumes []*ModelsV1LogicalVolume `json:"logicalvolumes"`

	// name
	Name string `json:"name,omitempty"`

	// raid
	// Required: true
	Raid []*ModelsV1Raid `json:"raid"`

	// volumegroups
	// Required: true
	Volumegroups []*ModelsV1VolumeGroup `json:"volumegroups"`
}

// Validate validates this models v1 filesystem layout response
func (m *ModelsV1FilesystemLayoutResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalvolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumegroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateConstraints(formats strfmt.Registry) error {

	if err := validate.Required("constraints", "body", m.Constraints); err != nil {
		return err
	}

	if m.Constraints != nil {
		if err := m.Constraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constraints")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateDisks(formats strfmt.Registry) error {

	if err := validate.Required("disks", "body", m.Disks); err != nil {
		return err
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateFilesystems(formats strfmt.Registry) error {

	if err := validate.Required("filesystems", "body", m.Filesystems); err != nil {
		return err
	}

	for i := 0; i < len(m.Filesystems); i++ {
		if swag.IsZero(m.Filesystems[i]) { // not required
			continue
		}

		if m.Filesystems[i] != nil {
			if err := m.Filesystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateLogicalvolumes(formats strfmt.Registry) error {

	if err := validate.Required("logicalvolumes", "body", m.Logicalvolumes); err != nil {
		return err
	}

	for i := 0; i < len(m.Logicalvolumes); i++ {
		if swag.IsZero(m.Logicalvolumes[i]) { // not required
			continue
		}

		if m.Logicalvolumes[i] != nil {
			if err := m.Logicalvolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logicalvolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateRaid(formats strfmt.Registry) error {

	if err := validate.Required("raid", "body", m.Raid); err != nil {
		return err
	}

	for i := 0; i < len(m.Raid); i++ {
		if swag.IsZero(m.Raid[i]) { // not required
			continue
		}

		if m.Raid[i] != nil {
			if err := m.Raid[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("raid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) validateVolumegroups(formats strfmt.Registry) error {

	if err := validate.Required("volumegroups", "body", m.Volumegroups); err != nil {
		return err
	}

	for i := 0; i < len(m.Volumegroups); i++ {
		if swag.IsZero(m.Volumegroups[i]) { // not required
			continue
		}

		if m.Volumegroups[i] != nil {
			if err := m.Volumegroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumegroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this models v1 filesystem layout response based on the context it is used
func (m *ModelsV1FilesystemLayoutResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilesystems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogicalvolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRaid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumegroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) contextValidateConstraints(ctx context.Context, formats strfmt.Registry) error {

	if m.Constraints != nil {
		if err := m.Constraints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constraints")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) contextValidateFilesystems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Filesystems); i++ {

		if m.Filesystems[i] != nil {
			if err := m.Filesystems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) contextValidateLogicalvolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Logicalvolumes); i++ {

		if m.Logicalvolumes[i] != nil {
			if err := m.Logicalvolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logicalvolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) contextValidateRaid(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Raid); i++ {

		if m.Raid[i] != nil {
			if err := m.Raid[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("raid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsV1FilesystemLayoutResponse) contextValidateVolumegroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Volumegroups); i++ {

		if m.Volumegroups[i] != nil {
			if err := m.Volumegroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumegroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsV1FilesystemLayoutResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsV1FilesystemLayoutResponse) UnmarshalBinary(b []byte) error {
	var res ModelsV1FilesystemLayoutResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
