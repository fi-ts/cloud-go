// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PostgresPartition v1 postgres partition
//
// swagger:model v1.PostgresPartition
type V1PostgresPartition struct {

	// allowed storage classes
	// Required: true
	AllowedStorageClasses map[string]bool `json:"AllowedStorageClasses"`

	// allowed tenants
	// Required: true
	AllowedTenants map[string]bool `json:"AllowedTenants"`
}

// Validate validates this v1 postgres partition
func (m *V1PostgresPartition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedStorageClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowedTenants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PostgresPartition) validateAllowedStorageClasses(formats strfmt.Registry) error {

	if err := validate.Required("AllowedStorageClasses", "body", m.AllowedStorageClasses); err != nil {
		return err
	}

	return nil
}

func (m *V1PostgresPartition) validateAllowedTenants(formats strfmt.Registry) error {

	if err := validate.Required("AllowedTenants", "body", m.AllowedTenants); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 postgres partition based on context it is used
func (m *V1PostgresPartition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PostgresPartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PostgresPartition) UnmarshalBinary(b []byte) error {
	var res V1PostgresPartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
