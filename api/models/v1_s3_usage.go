// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1S3Usage v1 s3 usage
// swagger:model v1.S3Usage
type V1S3Usage struct {

	// the bucket id of this s3 bucket
	// Required: true
	Bucketid *string `json:"bucketid"`

	// the bucket name of this s3 bucket
	// Required: true
	Bucketname *string `json:"bucketname"`

	// the last reported number of objects of this s3 bucket
	// Required: true
	Currentnumberofobjects *string `json:"currentnumberofobjects"`

	// the end time of this s3 bucket
	// Required: true
	// Format: date-time
	End *strfmt.DateTime `json:"end"`

	// the duration that this s3 bucket is running
	// Required: true
	Lifetime *int64 `json:"lifetime"`

	// the partition of this s3 bucket
	// Required: true
	Partition *string `json:"partition"`

	// the project id of this s3 bucket
	// Required: true
	Projectid *string `json:"projectid"`

	// the project name of this s3 bucket
	// Required: true
	Projectname *string `json:"projectname"`

	// the start time of this s3 bucket
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"start"`

	// the storage seconds of this s3 bucket (byte*s)
	// Required: true
	Storageseconds *string `json:"storageseconds"`

	// the tenant of this s3 bucket
	// Required: true
	Tenant *string `json:"tenant"`

	// the user name of this s3 bucket
	// Required: true
	User *string `json:"user"`

	// warnings that occurred when calculating the usage of this s3 bucket
	// Required: true
	Warnings []string `json:"warnings"`
}

// Validate validates this v1 s3 usage
func (m *V1S3Usage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucketname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentnumberofobjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1S3Usage) validateBucketid(formats strfmt.Registry) error {

	if err := validate.Required("bucketid", "body", m.Bucketid); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateBucketname(formats strfmt.Registry) error {

	if err := validate.Required("bucketname", "body", m.Bucketname); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateCurrentnumberofobjects(formats strfmt.Registry) error {

	if err := validate.Required("currentnumberofobjects", "body", m.Currentnumberofobjects); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateLifetime(formats strfmt.Registry) error {

	if err := validate.Required("lifetime", "body", m.Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateProjectname(formats strfmt.Registry) error {

	if err := validate.Required("projectname", "body", m.Projectname); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateStorageseconds(formats strfmt.Registry) error {

	if err := validate.Required("storageseconds", "body", m.Storageseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *V1S3Usage) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("warnings", "body", m.Warnings); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1S3Usage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1S3Usage) UnmarshalBinary(b []byte) error {
	var res V1S3Usage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
