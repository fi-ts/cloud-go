// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1XDR v1 x d r
//
// swagger:model v1.XDR
type V1XDR struct {

	// custom tag
	// Required: true
	CustomTag *string `json:"customTag"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// distribution Id
	// Required: true
	DistributionID *string `json:"distributionId"`

	// proxy list
	// Required: true
	ProxyList []string `json:"proxyList"`
}

// Validate validates this v1 x d r
func (m *V1XDR) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistributionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1XDR) validateCustomTag(formats strfmt.Registry) error {

	if err := validate.Required("customTag", "body", m.CustomTag); err != nil {
		return err
	}

	return nil
}

func (m *V1XDR) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *V1XDR) validateDistributionID(formats strfmt.Registry) error {

	if err := validate.Required("distributionId", "body", m.DistributionID); err != nil {
		return err
	}

	return nil
}

func (m *V1XDR) validateProxyList(formats strfmt.Registry) error {

	if err := validate.Required("proxyList", "body", m.ProxyList); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 x d r based on context it is used
func (m *V1XDR) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1XDR) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1XDR) UnmarshalBinary(b []byte) error {
	var res V1XDR
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
