// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1QoSPolicyLimit v1 qo s policy limit
//
// swagger:model v1.QoSPolicyLimit
type V1QoSPolicyLimit struct {

	// bandwidth
	// Required: true
	Bandwidth *V1QoSPolicyLimitBandwidth `json:"Bandwidth"`

	// i o p s
	// Required: true
	IOPS *V1QoSPolicyLimitIOPS `json:"IOPS"`

	// i o p s per g b
	// Required: true
	IOPSPerGB *V1QoSPolicyLimitIOPSPerGB `json:"IOPSPerGB"`
}

// Validate validates this v1 qo s policy limit
func (m *V1QoSPolicyLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBandwidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIOPS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIOPSPerGB(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1QoSPolicyLimit) validateBandwidth(formats strfmt.Registry) error {

	if err := validate.Required("Bandwidth", "body", m.Bandwidth); err != nil {
		return err
	}

	if m.Bandwidth != nil {
		if err := m.Bandwidth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Bandwidth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Bandwidth")
			}
			return err
		}
	}

	return nil
}

func (m *V1QoSPolicyLimit) validateIOPS(formats strfmt.Registry) error {

	if err := validate.Required("IOPS", "body", m.IOPS); err != nil {
		return err
	}

	if m.IOPS != nil {
		if err := m.IOPS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IOPS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IOPS")
			}
			return err
		}
	}

	return nil
}

func (m *V1QoSPolicyLimit) validateIOPSPerGB(formats strfmt.Registry) error {

	if err := validate.Required("IOPSPerGB", "body", m.IOPSPerGB); err != nil {
		return err
	}

	if m.IOPSPerGB != nil {
		if err := m.IOPSPerGB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IOPSPerGB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IOPSPerGB")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 qo s policy limit based on the context it is used
func (m *V1QoSPolicyLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBandwidth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIOPS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIOPSPerGB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1QoSPolicyLimit) contextValidateBandwidth(ctx context.Context, formats strfmt.Registry) error {

	if m.Bandwidth != nil {

		if err := m.Bandwidth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Bandwidth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Bandwidth")
			}
			return err
		}
	}

	return nil
}

func (m *V1QoSPolicyLimit) contextValidateIOPS(ctx context.Context, formats strfmt.Registry) error {

	if m.IOPS != nil {

		if err := m.IOPS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IOPS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IOPS")
			}
			return err
		}
	}

	return nil
}

func (m *V1QoSPolicyLimit) contextValidateIOPSPerGB(ctx context.Context, formats strfmt.Registry) error {

	if m.IOPSPerGB != nil {

		if err := m.IOPSPerGB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IOPSPerGB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IOPSPerGB")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1QoSPolicyLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1QoSPolicyLimit) UnmarshalBinary(b []byte) error {
	var res V1QoSPolicyLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
