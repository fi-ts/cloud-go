// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1beta1Condition v1beta1 condition
//
// swagger:model v1beta1.Condition
type V1beta1Condition struct {

	// codes
	Codes []string `json:"codes"`

	// last transition time
	// Required: true
	LastTransitionTime *string `json:"lastTransitionTime"`

	// last update time
	// Required: true
	LastUpdateTime *string `json:"lastUpdateTime"`

	// message
	// Required: true
	Message *string `json:"message"`

	// reason
	// Required: true
	Reason *string `json:"reason"`

	// status
	// Required: true
	Status *string `json:"status"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this v1beta1 condition
func (m *V1beta1Condition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastTransitionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1Condition) validateLastTransitionTime(formats strfmt.Registry) error {

	if err := validate.Required("lastTransitionTime", "body", m.LastTransitionTime); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1Condition) validateLastUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdateTime", "body", m.LastUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1Condition) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1Condition) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1Condition) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1Condition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1Condition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1Condition) UnmarshalBinary(b []byte) error {
	var res V1beta1Condition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
