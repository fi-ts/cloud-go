// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineReservationUsageAccumuluated v1 machine reservation usage accumuluated
//
// swagger:model v1.MachineReservationUsageAccumuluated
type V1MachineReservationUsageAccumuluated struct {

	// the average amount of unused machine reservations in the given time window
	// Required: true
	Average *string `json:"average"`

	// the amount of the number of unused machine reservations multiplied by time
	// Required: true
	Reservationseconds *string `json:"reservationseconds"`
}

// Validate validates this v1 machine reservation usage accumuluated
func (m *V1MachineReservationUsageAccumuluated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservationseconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineReservationUsageAccumuluated) validateAverage(formats strfmt.Registry) error {

	if err := validate.Required("average", "body", m.Average); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineReservationUsageAccumuluated) validateReservationseconds(formats strfmt.Registry) error {

	if err := validate.Required("reservationseconds", "body", m.Reservationseconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 machine reservation usage accumuluated based on context it is used
func (m *V1MachineReservationUsageAccumuluated) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineReservationUsageAccumuluated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineReservationUsageAccumuluated) UnmarshalBinary(b []byte) error {
	var res V1MachineReservationUsageAccumuluated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
