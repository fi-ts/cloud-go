// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1alpha1DNSProvider v1alpha1 DNS provider
// swagger:model v1alpha1.DNSProvider
type V1alpha1DNSProvider struct {

	// domains
	Domains *V1alpha1DNSIncludeExclude `json:"domains,omitempty"`

	// secret name
	SecretName string `json:"secretName,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// zones
	Zones *V1alpha1DNSIncludeExclude `json:"zones,omitempty"`
}

// Validate validates this v1alpha1 DNS provider
func (m *V1alpha1DNSProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1DNSProvider) validateDomains(formats strfmt.Registry) error {

	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	if m.Domains != nil {
		if err := m.Domains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domains")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1DNSProvider) validateZones(formats strfmt.Registry) error {

	if swag.IsZero(m.Zones) { // not required
		return nil
	}

	if m.Zones != nil {
		if err := m.Zones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1DNSProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1DNSProvider) UnmarshalBinary(b []byte) error {
	var res V1alpha1DNSProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
