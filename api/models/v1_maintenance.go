// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Maintenance v1 maintenance
//
// swagger:model v1.Maintenance
type V1Maintenance struct {

	// auto update
	// Required: true
	AutoUpdate *V1MaintenanceAutoUpdate `json:"AutoUpdate"`

	// time window
	// Required: true
	TimeWindow *V1MaintenanceTimeWindow `json:"TimeWindow"`
}

// Validate validates this v1 maintenance
func (m *V1Maintenance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Maintenance) validateAutoUpdate(formats strfmt.Registry) error {

	if err := validate.Required("AutoUpdate", "body", m.AutoUpdate); err != nil {
		return err
	}

	if m.AutoUpdate != nil {
		if err := m.AutoUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AutoUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AutoUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *V1Maintenance) validateTimeWindow(formats strfmt.Registry) error {

	if err := validate.Required("TimeWindow", "body", m.TimeWindow); err != nil {
		return err
	}

	if m.TimeWindow != nil {
		if err := m.TimeWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeWindow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 maintenance based on the context it is used
func (m *V1Maintenance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Maintenance) contextValidateAutoUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoUpdate != nil {
		if err := m.AutoUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AutoUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AutoUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *V1Maintenance) contextValidateTimeWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeWindow != nil {
		if err := m.TimeWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TimeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TimeWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Maintenance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Maintenance) UnmarshalBinary(b []byte) error {
	var res V1Maintenance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
