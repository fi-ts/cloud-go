// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterResponse v1 cluster response
// swagger:model v1.ClusterResponse
type V1ClusterResponse struct {

	// the gardener shoot control plane raw extension
	// Required: true
	Controlplane *V1alpha1ControlPlaneConfig `json:"controlplane"`

	// the gardener shoot infrastructure raw extension
	// Required: true
	Infrastructure *V1alpha1InfrastructureConfig `json:"infrastructure"`

	// the machines which belong to this cluster
	// Required: true
	Machines []*ModelsV1MachineResponse `json:"machines"`

	// the gardener shoot network raw extension
	// Required: true
	Network *V1alpha1NetworkConfig `json:"network"`

	// the gardener shoot resource but with the raw extensions separated out
	// Required: true
	Shoot *V1beta1Shoot `json:"shoot"`
}

// Validate validates this v1 cluster response
func (m *V1ClusterResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlplane(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfrastructure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterResponse) validateControlplane(formats strfmt.Registry) error {

	if err := validate.Required("controlplane", "body", m.Controlplane); err != nil {
		return err
	}

	if m.Controlplane != nil {
		if err := m.Controlplane.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlplane")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterResponse) validateInfrastructure(formats strfmt.Registry) error {

	if err := validate.Required("infrastructure", "body", m.Infrastructure); err != nil {
		return err
	}

	if m.Infrastructure != nil {
		if err := m.Infrastructure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infrastructure")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterResponse) validateMachines(formats strfmt.Registry) error {

	if err := validate.Required("machines", "body", m.Machines); err != nil {
		return err
	}

	for i := 0; i < len(m.Machines); i++ {
		if swag.IsZero(m.Machines[i]) { // not required
			continue
		}

		if m.Machines[i] != nil {
			if err := m.Machines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ClusterResponse) validateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("network", "body", m.Network); err != nil {
		return err
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *V1ClusterResponse) validateShoot(formats strfmt.Registry) error {

	if err := validate.Required("shoot", "body", m.Shoot); err != nil {
		return err
	}

	if m.Shoot != nil {
		if err := m.Shoot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shoot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterResponse) UnmarshalBinary(b []byte) error {
	var res V1ClusterResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
