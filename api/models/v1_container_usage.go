// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ContainerUsage v1 container usage
//
// swagger:model v1.ContainerUsage
type V1ContainerUsage struct {

	// the cluster id of this container
	// Required: true
	Clusterid *string `json:"clusterid"`

	// the cluster name of this container
	// Required: true
	Clustername *string `json:"clustername"`

	// the container image of this container
	// Required: true
	Containerimage *string `json:"containerimage"`

	// the name of this container
	// Required: true
	Containername *string `json:"containername"`

	// the cpu seconds of this container (s*s)
	// Required: true
	Cpuseconds *string `json:"cpuseconds"`

	// the duration that this container is running
	// Required: true
	Lifetime *int64 `json:"lifetime"`

	// the memory seconds of this container (byte*s)
	// Required: true
	Memoryseconds *string `json:"memoryseconds"`

	// the namespace of this container
	// Required: true
	Namespace *string `json:"namespace"`

	// the partition of this container
	// Required: true
	Partition *string `json:"partition"`

	// the pod end time of this container
	// Required: true
	// Format: date-time
	Podend *strfmt.DateTime `json:"podend"`

	// the pod name of this container
	// Required: true
	Podname *string `json:"podname"`

	// the pod start time of this container
	// Required: true
	// Format: date-time
	Podstart *strfmt.DateTime `json:"podstart"`

	// the pod uuid of this container
	// Required: true
	Poduuid *string `json:"poduuid"`

	// the project id of this container
	// Required: true
	Projectid *string `json:"projectid"`

	// the project name of this container
	// Required: true
	Projectname *string `json:"projectname"`

	// the tenant of this container
	// Required: true
	Tenant *string `json:"tenant"`

	// warnings that occurred when calculating the usage of this container
	// Required: true
	Warnings []string `json:"warnings"`
}

// Validate validates this v1 container usage
func (m *V1ContainerUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerimage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpuseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryseconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodstart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoduuid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ContainerUsage) validateClusterid(formats strfmt.Registry) error {

	if err := validate.Required("clusterid", "body", m.Clusterid); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateClustername(formats strfmt.Registry) error {

	if err := validate.Required("clustername", "body", m.Clustername); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateContainerimage(formats strfmt.Registry) error {

	if err := validate.Required("containerimage", "body", m.Containerimage); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateContainername(formats strfmt.Registry) error {

	if err := validate.Required("containername", "body", m.Containername); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateCpuseconds(formats strfmt.Registry) error {

	if err := validate.Required("cpuseconds", "body", m.Cpuseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateLifetime(formats strfmt.Registry) error {

	if err := validate.Required("lifetime", "body", m.Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateMemoryseconds(formats strfmt.Registry) error {

	if err := validate.Required("memoryseconds", "body", m.Memoryseconds); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validatePodend(formats strfmt.Registry) error {

	if err := validate.Required("podend", "body", m.Podend); err != nil {
		return err
	}

	if err := validate.FormatOf("podend", "body", "date-time", m.Podend.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validatePodname(formats strfmt.Registry) error {

	if err := validate.Required("podname", "body", m.Podname); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validatePodstart(formats strfmt.Registry) error {

	if err := validate.Required("podstart", "body", m.Podstart); err != nil {
		return err
	}

	if err := validate.FormatOf("podstart", "body", "date-time", m.Podstart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validatePoduuid(formats strfmt.Registry) error {

	if err := validate.Required("poduuid", "body", m.Poduuid); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateProjectname(formats strfmt.Registry) error {

	if err := validate.Required("projectname", "body", m.Projectname); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

func (m *V1ContainerUsage) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("warnings", "body", m.Warnings); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ContainerUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ContainerUsage) UnmarshalBinary(b []byte) error {
	var res V1ContainerUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
