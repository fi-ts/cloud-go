// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SnapshotResponse v1 snapshot response
//
// swagger:model v1.SnapshotResponse
type V1SnapshotResponse struct {

	// creation time
	// Required: true
	// Format: date-time
	CreationTime *strfmt.DateTime `json:"CreationTime"`

	// description
	// Required: true
	Description *string `json:"Description"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// node IP list
	// Required: true
	NodeIPList []string `json:"NodeIPList"`

	// partition ID
	// Required: true
	PartitionID *string `json:"PartitionID"`

	// primary node UUID
	// Required: true
	PrimaryNodeUUID *string `json:"PrimaryNodeUUID"`

	// project ID
	// Required: true
	ProjectID *string `json:"ProjectID"`

	// replica count
	// Required: true
	ReplicaCount *int64 `json:"ReplicaCount"`

	// retention time
	// Required: true
	RetentionTime *int64 `json:"RetentionTime"`

	// size
	// Required: true
	Size *int64 `json:"Size"`

	// snapshot ID
	// Required: true
	SnapshotID *string `json:"SnapshotID"`

	// source volume ID
	// Required: true
	SourceVolumeID *string `json:"SourceVolumeID"`

	// source volume name
	// Required: true
	SourceVolumeName *string `json:"SourceVolumeName"`

	// state
	// Required: true
	State *string `json:"State"`

	// statistics
	// Required: true
	Statistics *V1SnapshotStatistics `json:"Statistics"`

	// tenant ID
	// Required: true
	TenantID *string `json:"TenantID"`
}

// Validate validates this v1 snapshot response
func (m *V1SnapshotResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeIPList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryNodeUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceVolumeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SnapshotResponse) validateCreationTime(formats strfmt.Registry) error {

	if err := validate.Required("CreationTime", "body", m.CreationTime); err != nil {
		return err
	}

	if err := validate.FormatOf("CreationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateNodeIPList(formats strfmt.Registry) error {

	if err := validate.Required("NodeIPList", "body", m.NodeIPList); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validatePartitionID(formats strfmt.Registry) error {

	if err := validate.Required("PartitionID", "body", m.PartitionID); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validatePrimaryNodeUUID(formats strfmt.Registry) error {

	if err := validate.Required("PrimaryNodeUUID", "body", m.PrimaryNodeUUID); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("ProjectID", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateReplicaCount(formats strfmt.Registry) error {

	if err := validate.Required("ReplicaCount", "body", m.ReplicaCount); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateRetentionTime(formats strfmt.Registry) error {

	if err := validate.Required("RetentionTime", "body", m.RetentionTime); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("SnapshotID", "body", m.SnapshotID); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateSourceVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("SourceVolumeID", "body", m.SourceVolumeID); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateSourceVolumeName(formats strfmt.Registry) error {

	if err := validate.Required("SourceVolumeName", "body", m.SourceVolumeName); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateState(formats strfmt.Registry) error {

	if err := validate.Required("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *V1SnapshotResponse) validateStatistics(formats strfmt.Registry) error {

	if err := validate.Required("Statistics", "body", m.Statistics); err != nil {
		return err
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Statistics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Statistics")
			}
			return err
		}
	}

	return nil
}

func (m *V1SnapshotResponse) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("TenantID", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 snapshot response based on the context it is used
func (m *V1SnapshotResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatistics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SnapshotResponse) contextValidateStatistics(ctx context.Context, formats strfmt.Registry) error {

	if m.Statistics != nil {

		if err := m.Statistics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Statistics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Statistics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SnapshotResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SnapshotResponse) UnmarshalBinary(b []byte) error {
	var res V1SnapshotResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
