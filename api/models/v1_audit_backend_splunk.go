// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AuditBackendSplunk v1 audit backend splunk
//
// swagger:model v1.AuditBackendSplunk
type V1AuditBackendSplunk struct {

	// ca file
	// Required: true
	CaFile *string `json:"CaFile"`

	// enabled
	// Required: true
	Enabled *bool `json:"Enabled"`

	// host
	// Required: true
	Host *string `json:"Host"`

	// index
	// Required: true
	Index *string `json:"Index"`

	// port
	// Required: true
	Port *string `json:"Port"`

	// Tls enabled
	// Required: true
	TLSEnabled *bool `json:"TlsEnabled"`

	// token
	// Required: true
	Token *string `json:"Token"`
}

// Validate validates this v1 audit backend splunk
func (m *V1AuditBackendSplunk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AuditBackendSplunk) validateCaFile(formats strfmt.Registry) error {

	if err := validate.Required("CaFile", "body", m.CaFile); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditBackendSplunk) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("Enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditBackendSplunk) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("Host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditBackendSplunk) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("Index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditBackendSplunk) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("Port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditBackendSplunk) validateTLSEnabled(formats strfmt.Registry) error {

	if err := validate.Required("TlsEnabled", "body", m.TLSEnabled); err != nil {
		return err
	}

	return nil
}

func (m *V1AuditBackendSplunk) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("Token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 audit backend splunk based on context it is used
func (m *V1AuditBackendSplunk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1AuditBackendSplunk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AuditBackendSplunk) UnmarshalBinary(b []byte) error {
	var res V1AuditBackendSplunk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
