// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ClusterHealth v1 cluster health
//
// swagger:model v1.ClusterHealth
type V1ClusterHealth struct {

	// num degraded volumes
	// Required: true
	NumDegradedVolumes *int64 `json:"NumDegradedVolumes"`

	// num inactive nodes
	// Required: true
	NumInactiveNodes *int64 `json:"NumInactiveNodes"`

	// num not available volumes
	// Required: true
	NumNotAvailableVolumes *int64 `json:"NumNotAvailableVolumes"`

	// num read only volumes
	// Required: true
	NumReadOnlyVolumes *int64 `json:"NumReadOnlyVolumes"`

	// state
	// Required: true
	State *string `json:"State"`
}

// Validate validates this v1 cluster health
func (m *V1ClusterHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumDegradedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumInactiveNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumNotAvailableVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumReadOnlyVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ClusterHealth) validateNumDegradedVolumes(formats strfmt.Registry) error {

	if err := validate.Required("NumDegradedVolumes", "body", m.NumDegradedVolumes); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterHealth) validateNumInactiveNodes(formats strfmt.Registry) error {

	if err := validate.Required("NumInactiveNodes", "body", m.NumInactiveNodes); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterHealth) validateNumNotAvailableVolumes(formats strfmt.Registry) error {

	if err := validate.Required("NumNotAvailableVolumes", "body", m.NumNotAvailableVolumes); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterHealth) validateNumReadOnlyVolumes(formats strfmt.Registry) error {

	if err := validate.Required("NumReadOnlyVolumes", "body", m.NumReadOnlyVolumes); err != nil {
		return err
	}

	return nil
}

func (m *V1ClusterHealth) validateState(formats strfmt.Registry) error {

	if err := validate.Required("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 cluster health based on context it is used
func (m *V1ClusterHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ClusterHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ClusterHealth) UnmarshalBinary(b []byte) error {
	var res V1ClusterHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
