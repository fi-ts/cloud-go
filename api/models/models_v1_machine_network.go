// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsV1MachineNetwork models v1 machine network
// swagger:model models.V1MachineNetwork
type ModelsV1MachineNetwork struct {

	// asn
	// Required: true
	Asn *int64 `json:"asn"`

	// destinationprefixes
	// Required: true
	Destinationprefixes []string `json:"destinationprefixes"`

	// ips
	// Required: true
	Ips []string `json:"ips"`

	// nat
	// Required: true
	Nat *bool `json:"nat"`

	// networkid
	// Required: true
	Networkid *string `json:"networkid"`

	// networktype
	// Required: true
	Networktype *string `json:"networktype"`

	// prefixes
	// Required: true
	Prefixes []string `json:"prefixes"`

	// private
	// Required: true
	Private *bool `json:"private"`

	// underlay
	// Required: true
	Underlay *bool `json:"underlay"`

	// vrf
	// Required: true
	Vrf *int64 `json:"vrf"`
}

// Validate validates this models v1 machine network
func (m *ModelsV1MachineNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationprefixes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworktype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnderlay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVrf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsV1MachineNetwork) validateAsn(formats strfmt.Registry) error {

	if err := validate.Required("asn", "body", m.Asn); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateDestinationprefixes(formats strfmt.Registry) error {

	if err := validate.Required("destinationprefixes", "body", m.Destinationprefixes); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateIps(formats strfmt.Registry) error {

	if err := validate.Required("ips", "body", m.Ips); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateNat(formats strfmt.Registry) error {

	if err := validate.Required("nat", "body", m.Nat); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateNetworkid(formats strfmt.Registry) error {

	if err := validate.Required("networkid", "body", m.Networkid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateNetworktype(formats strfmt.Registry) error {

	if err := validate.Required("networktype", "body", m.Networktype); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validatePrefixes(formats strfmt.Registry) error {

	if err := validate.Required("prefixes", "body", m.Prefixes); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validatePrivate(formats strfmt.Registry) error {

	if err := validate.Required("private", "body", m.Private); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateUnderlay(formats strfmt.Registry) error {

	if err := validate.Required("underlay", "body", m.Underlay); err != nil {
		return err
	}

	return nil
}

func (m *ModelsV1MachineNetwork) validateVrf(formats strfmt.Registry) error {

	if err := validate.Required("vrf", "body", m.Vrf); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsV1MachineNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsV1MachineNetwork) UnmarshalBinary(b []byte) error {
	var res ModelsV1MachineNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
