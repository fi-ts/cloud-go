// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1beta1ShootCredentialsRotation v1beta1 shoot credentials rotation
//
// swagger:model v1beta1.ShootCredentialsRotation
type V1beta1ShootCredentialsRotation struct {

	// certificate authorities
	CertificateAuthorities *V1beta1ShootCARotation `json:"certificateAuthorities,omitempty"`

	// kubeconfig
	Kubeconfig *V1beta1ShootKubeconfigRotation `json:"kubeconfig,omitempty"`

	// ssh keypair
	SSHKeypair *V1beta1ShootSSHKeypairRotation `json:"sshKeypair,omitempty"`
}

// Validate validates this v1beta1 shoot credentials rotation
func (m *V1beta1ShootCredentialsRotation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateAuthorities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeconfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKeypair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ShootCredentialsRotation) validateCertificateAuthorities(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateAuthorities) { // not required
		return nil
	}

	if m.CertificateAuthorities != nil {
		if err := m.CertificateAuthorities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateAuthorities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateAuthorities")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootCredentialsRotation) validateKubeconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubeconfig) { // not required
		return nil
	}

	if m.Kubeconfig != nil {
		if err := m.Kubeconfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeconfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootCredentialsRotation) validateSSHKeypair(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHKeypair) { // not required
		return nil
	}

	if m.SSHKeypair != nil {
		if err := m.SSHKeypair.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKeypair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKeypair")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1beta1 shoot credentials rotation based on the context it is used
func (m *V1beta1ShootCredentialsRotation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificateAuthorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubeconfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHKeypair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ShootCredentialsRotation) contextValidateCertificateAuthorities(ctx context.Context, formats strfmt.Registry) error {

	if m.CertificateAuthorities != nil {
		if err := m.CertificateAuthorities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateAuthorities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateAuthorities")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootCredentialsRotation) contextValidateKubeconfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Kubeconfig != nil {
		if err := m.Kubeconfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeconfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ShootCredentialsRotation) contextValidateSSHKeypair(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHKeypair != nil {
		if err := m.SSHKeypair.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKeypair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKeypair")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1ShootCredentialsRotation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1ShootCredentialsRotation) UnmarshalBinary(b []byte) error {
	var res V1beta1ShootCredentialsRotation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
