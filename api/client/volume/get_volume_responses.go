// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fi-ts/cloud-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// GetVolumeReader is a Reader for the GetVolume structure.
type GetVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVolumeOK creates a GetVolumeOK with default headers values
func NewGetVolumeOK() *GetVolumeOK {
	return &GetVolumeOK{}
}

/*
GetVolumeOK describes a response with status code 200, with default header values.

OK
*/
type GetVolumeOK struct {
	Payload *models.V1VolumeResponse
}

// IsSuccess returns true when this get volume o k response has a 2xx status code
func (o *GetVolumeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get volume o k response has a 3xx status code
func (o *GetVolumeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get volume o k response has a 4xx status code
func (o *GetVolumeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get volume o k response has a 5xx status code
func (o *GetVolumeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get volume o k response a status code equal to that given
func (o *GetVolumeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get volume o k response
func (o *GetVolumeOK) Code() int {
	return 200
}

func (o *GetVolumeOK) Error() string {
	return fmt.Sprintf("[GET /v1/volume/{id}][%d] getVolumeOK  %+v", 200, o.Payload)
}

func (o *GetVolumeOK) String() string {
	return fmt.Sprintf("[GET /v1/volume/{id}][%d] getVolumeOK  %+v", 200, o.Payload)
}

func (o *GetVolumeOK) GetPayload() *models.V1VolumeResponse {
	return o.Payload
}

func (o *GetVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1VolumeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeDefault creates a GetVolumeDefault with default headers values
func NewGetVolumeDefault(code int) *GetVolumeDefault {
	return &GetVolumeDefault{
		_statusCode: code,
	}
}

/*
GetVolumeDefault describes a response with status code -1, with default header values.

Error
*/
type GetVolumeDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this get volume default response has a 2xx status code
func (o *GetVolumeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get volume default response has a 3xx status code
func (o *GetVolumeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get volume default response has a 4xx status code
func (o *GetVolumeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get volume default response has a 5xx status code
func (o *GetVolumeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get volume default response a status code equal to that given
func (o *GetVolumeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get volume default response
func (o *GetVolumeDefault) Code() int {
	return o._statusCode
}

func (o *GetVolumeDefault) Error() string {
	return fmt.Sprintf("[GET /v1/volume/{id}][%d] getVolume default  %+v", o._statusCode, o.Payload)
}

func (o *GetVolumeDefault) String() string {
	return fmt.Sprintf("[GET /v1/volume/{id}][%d] getVolume default  %+v", o._statusCode, o.Payload)
}

func (o *GetVolumeDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *GetVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
