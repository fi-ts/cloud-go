// Code generated by go-swagger; DO NOT EDIT.

package gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new gateway API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gateway API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClientDelete(params *ClientDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientDeleteOK, error)

	ClientGet(params *ClientGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientGetOK, error)

	ClientList(params *ClientListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientListOK, error)

	ClientListAll(params *ClientListAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientListAllOK, error)

	ClientPatch(params *ClientPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientPatchOK, error)

	ClientPost(params *ClientPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientPostCreated, error)

	ServerDelete(params *ServerDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerDeleteOK, error)

	ServerGet(params *ServerGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetOK, error)

	ServerList(params *ServerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerListOK, error)

	ServerListAll(params *ServerListAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerListAllOK, error)

	ServerPatch(params *ServerPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerPatchOK, error)

	ServerPost(params *ServerPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerPostCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClientDelete client delete API
*/
func (a *Client) ClientDelete(params *ClientDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clientDelete",
		Method:             "DELETE",
		PathPattern:        "/gateway/v1/projects/{projectuid}/clients/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientGet client get API
*/
func (a *Client) ClientGet(params *ClientGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clientGet",
		Method:             "GET",
		PathPattern:        "/gateway/v1/projects/{projectuid}/clients/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientList client list API
*/
func (a *Client) ClientList(params *ClientListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clientList",
		Method:             "GET",
		PathPattern:        "/gateway/v1/projects/{projectuid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientListAll client list all API
*/
func (a *Client) ClientListAll(params *ClientListAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientListAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clientListAll",
		Method:             "GET",
		PathPattern:        "/gateway/v1/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientListAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientListAllDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientPatch client patch API
*/
func (a *Client) ClientPatch(params *ClientPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clientPatch",
		Method:             "PATCH",
		PathPattern:        "/gateway/v1/projects/{projectuid}/clients/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientPost client post API
*/
func (a *Client) ClientPost(params *ClientPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClientPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clientPost",
		Method:             "POST",
		PathPattern:        "/gateway/v1/projects/{projectuid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerDelete server delete API
*/
func (a *Client) ServerDelete(params *ServerDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serverDelete",
		Method:             "DELETE",
		PathPattern:        "/gateway/v1/projects/{projectuid}/servers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerGet server get API
*/
func (a *Client) ServerGet(params *ServerGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serverGet",
		Method:             "GET",
		PathPattern:        "/gateway/v1/projects/{projectuid}/servers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerList server list API
*/
func (a *Client) ServerList(params *ServerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serverList",
		Method:             "GET",
		PathPattern:        "/gateway/v1/projects/{projectuid}/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerListAll server list all API
*/
func (a *Client) ServerListAll(params *ServerListAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerListAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serverListAll",
		Method:             "GET",
		PathPattern:        "/gateway/v1/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerListAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerListAllDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerPatch server patch API
*/
func (a *Client) ServerPatch(params *ServerPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serverPatch",
		Method:             "PATCH",
		PathPattern:        "/gateway/v1/projects/{projectuid}/servers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ServerPost server post API
*/
func (a *Client) ServerPost(params *ServerPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serverPost",
		Method:             "POST",
		PathPattern:        "/gateway/v1/projects/{projectuid}/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServerPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
