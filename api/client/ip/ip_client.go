// Code generated by go-swagger; DO NOT EDIT.

package ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ip API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ip API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AllocateIP(params *AllocateIPParams, authInfo runtime.ClientAuthInfoWriter) (*AllocateIPCreated, error)

	FindIPs(params *FindIPsParams, authInfo runtime.ClientAuthInfoWriter) (*FindIPsOK, error)

	FreeIP(params *FreeIPParams, authInfo runtime.ClientAuthInfoWriter) (*FreeIPOK, error)

	GetIP(params *GetIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPOK, error)

	ListIPs(params *ListIPsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIPsOK, error)

	UpdateIP(params *UpdateIPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIPOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AllocateIP allocates an ip in a given network
*/
func (a *Client) AllocateIP(params *AllocateIPParams, authInfo runtime.ClientAuthInfoWriter) (*AllocateIPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "allocateIP",
		Method:             "POST",
		PathPattern:        "/v1/ip/allocate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateIPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindIPs finds ips by multiple criteria
*/
func (a *Client) FindIPs(params *FindIPsParams, authInfo runtime.ClientAuthInfoWriter) (*FindIPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIPsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findIPs",
		Method:             "POST",
		PathPattern:        "/v1/ip/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindIPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindIPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FreeIP frees an ip and returns the freed entity
*/
func (a *Client) FreeIP(params *FreeIPParams, authInfo runtime.ClientAuthInfoWriter) (*FreeIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFreeIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "freeIP",
		Method:             "DELETE",
		PathPattern:        "/v1/ip/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FreeIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FreeIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FreeIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIP gets ip by address
*/
func (a *Client) GetIP(params *GetIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIP",
		Method:             "GET",
		PathPattern:        "/v1/ip/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListIPs gets all ips
*/
func (a *Client) ListIPs(params *ListIPsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIPs",
		Method:             "GET",
		PathPattern:        "/v1/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListIPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateIP updates an ip
*/
func (a *Client) UpdateIP(params *UpdateIPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIP",
		Method:             "POST",
		PathPattern:        "/v1/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
