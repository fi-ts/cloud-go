// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new database API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for database API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePostgres(params *CreatePostgresParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePostgresCreated, error)

	DeletePostgres(params *DeletePostgresParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePostgresOK, error)

	FindPostgres(params *FindPostgresParams, authInfo runtime.ClientAuthInfoWriter) (*FindPostgresOK, error)

	GetPostgres(params *GetPostgresParams, authInfo runtime.ClientAuthInfoWriter) (*GetPostgresOK, error)

	GetPostgresSecrets(params *GetPostgresSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPostgresSecretsOK, error)

	ListPostgres(params *ListPostgresParams, authInfo runtime.ClientAuthInfoWriter) (*ListPostgresOK, error)

	UpdatePostgres(params *UpdatePostgresParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePostgresOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePostgres creates a postgres if the given ID already exists a conflict is returned
*/
func (a *Client) CreatePostgres(params *CreatePostgresParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePostgresCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePostgresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPostgres",
		Method:             "PUT",
		PathPattern:        "/v1/database/postgres",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePostgresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePostgresCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePostgresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePostgres deletes an postgres and returns the deleted entity
*/
func (a *Client) DeletePostgres(params *DeletePostgresParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePostgresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePostgresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePostgres",
		Method:             "DELETE",
		PathPattern:        "/v1/database/postgres/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePostgresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePostgresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePostgresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindPostgres finds postgres databases by multiple criteria
*/
func (a *Client) FindPostgres(params *FindPostgresParams, authInfo runtime.ClientAuthInfoWriter) (*FindPostgresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPostgresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findPostgres",
		Method:             "POST",
		PathPattern:        "/v1/database/postgres/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindPostgresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPostgresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindPostgresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPostgres gets postgres by id
*/
func (a *Client) GetPostgres(params *GetPostgresParams, authInfo runtime.ClientAuthInfoWriter) (*GetPostgresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPostgresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPostgres",
		Method:             "GET",
		PathPattern:        "/v1/database/postgres/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPostgresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPostgresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPostgresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPostgresSecrets gets postgres secrets by id
*/
func (a *Client) GetPostgresSecrets(params *GetPostgresSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPostgresSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPostgresSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPostgresSecrets",
		Method:             "GET",
		PathPattern:        "/v1/database/postgres/{id}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPostgresSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPostgresSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPostgresSecretsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPostgres gets all postgres databases
*/
func (a *Client) ListPostgres(params *ListPostgresParams, authInfo runtime.ClientAuthInfoWriter) (*ListPostgresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPostgresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPostgres",
		Method:             "GET",
		PathPattern:        "/v1/database/postgres",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPostgresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPostgresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPostgresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePostgres updates a postgres if the postgres was changed since this one was read a conflict is returned
*/
func (a *Client) UpdatePostgres(params *UpdatePostgresParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePostgresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePostgresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePostgres",
		Method:             "POST",
		PathPattern:        "/v1/database/postgres",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePostgresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePostgresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePostgresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
