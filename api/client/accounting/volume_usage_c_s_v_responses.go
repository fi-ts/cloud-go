// Code generated by go-swagger; DO NOT EDIT.

package accounting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-lib/httperrors"
)

// VolumeUsageCSVReader is a Reader for the VolumeUsageCSV structure.
type VolumeUsageCSVReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeUsageCSVReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVolumeUsageCSVOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewVolumeUsageCSVDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVolumeUsageCSVOK creates a VolumeUsageCSVOK with default headers values
func NewVolumeUsageCSVOK() *VolumeUsageCSVOK {
	return &VolumeUsageCSVOK{}
}

/*
VolumeUsageCSVOK describes a response with status code 200, with default header values.

OK
*/
type VolumeUsageCSVOK struct {
	Payload string
}

// IsSuccess returns true when this volume usage c s v o k response has a 2xx status code
func (o *VolumeUsageCSVOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this volume usage c s v o k response has a 3xx status code
func (o *VolumeUsageCSVOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume usage c s v o k response has a 4xx status code
func (o *VolumeUsageCSVOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume usage c s v o k response has a 5xx status code
func (o *VolumeUsageCSVOK) IsServerError() bool {
	return false
}

// IsCode returns true when this volume usage c s v o k response a status code equal to that given
func (o *VolumeUsageCSVOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the volume usage c s v o k response
func (o *VolumeUsageCSVOK) Code() int {
	return 200
}

func (o *VolumeUsageCSVOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/accounting/volume-usage-csv][%d] volumeUsageCSVOK %s", 200, payload)
}

func (o *VolumeUsageCSVOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/accounting/volume-usage-csv][%d] volumeUsageCSVOK %s", 200, payload)
}

func (o *VolumeUsageCSVOK) GetPayload() string {
	return o.Payload
}

func (o *VolumeUsageCSVOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeUsageCSVDefault creates a VolumeUsageCSVDefault with default headers values
func NewVolumeUsageCSVDefault(code int) *VolumeUsageCSVDefault {
	return &VolumeUsageCSVDefault{
		_statusCode: code,
	}
}

/*
VolumeUsageCSVDefault describes a response with status code -1, with default header values.

Error
*/
type VolumeUsageCSVDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this volume usage c s v default response has a 2xx status code
func (o *VolumeUsageCSVDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this volume usage c s v default response has a 3xx status code
func (o *VolumeUsageCSVDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this volume usage c s v default response has a 4xx status code
func (o *VolumeUsageCSVDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this volume usage c s v default response has a 5xx status code
func (o *VolumeUsageCSVDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this volume usage c s v default response a status code equal to that given
func (o *VolumeUsageCSVDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the volume usage c s v default response
func (o *VolumeUsageCSVDefault) Code() int {
	return o._statusCode
}

func (o *VolumeUsageCSVDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/accounting/volume-usage-csv][%d] volumeUsageCSV default %s", o._statusCode, payload)
}

func (o *VolumeUsageCSVDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/accounting/volume-usage-csv][%d] volumeUsageCSV default %s", o._statusCode, payload)
}

func (o *VolumeUsageCSVDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *VolumeUsageCSVDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
