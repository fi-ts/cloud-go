// Code generated by go-swagger; DO NOT EDIT.

package accounting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/metal-stack/cloud-go/api/models"
)

// VolumeUsageCSVReader is a Reader for the VolumeUsageCSV structure.
type VolumeUsageCSVReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeUsageCSVReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVolumeUsageCSVOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewVolumeUsageCSVDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVolumeUsageCSVOK creates a VolumeUsageCSVOK with default headers values
func NewVolumeUsageCSVOK() *VolumeUsageCSVOK {
	return &VolumeUsageCSVOK{}
}

/*VolumeUsageCSVOK handles this case with default header values.

OK
*/
type VolumeUsageCSVOK struct {
	Payload string
}

func (o *VolumeUsageCSVOK) Error() string {
	return fmt.Sprintf("[POST /v1/accounting/volume-usage-csv][%d] volumeUsageCSVOK  %+v", 200, o.Payload)
}

func (o *VolumeUsageCSVOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeUsageCSVDefault creates a VolumeUsageCSVDefault with default headers values
func NewVolumeUsageCSVDefault(code int) *VolumeUsageCSVDefault {
	return &VolumeUsageCSVDefault{
		_statusCode: code,
	}
}

/*VolumeUsageCSVDefault handles this case with default header values.

Error
*/
type VolumeUsageCSVDefault struct {
	_statusCode int

	Payload *models.HttperrorsHTTPErrorResponse
}

// Code gets the status code for the volume usage c s v default response
func (o *VolumeUsageCSVDefault) Code() int {
	return o._statusCode
}

func (o *VolumeUsageCSVDefault) Error() string {
	return fmt.Sprintf("[POST /v1/accounting/volume-usage-csv][%d] volumeUsageCSV default  %+v", o._statusCode, o.Payload)
}

func (o *VolumeUsageCSVDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HttperrorsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
