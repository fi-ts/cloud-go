// Code generated by go-swagger; DO NOT EDIT.

package accounting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fi-ts/cloud-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// MachineUsageReader is a Reader for the MachineUsage structure.
type MachineUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MachineUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMachineUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewMachineUsageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMachineUsageOK creates a MachineUsageOK with default headers values
func NewMachineUsageOK() *MachineUsageOK {
	return &MachineUsageOK{}
}

/*
MachineUsageOK describes a response with status code 200, with default header values.

OK
*/
type MachineUsageOK struct {
	Payload *models.V1MachineUsageResponse
}

// IsSuccess returns true when this machine usage o k response has a 2xx status code
func (o *MachineUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this machine usage o k response has a 3xx status code
func (o *MachineUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this machine usage o k response has a 4xx status code
func (o *MachineUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this machine usage o k response has a 5xx status code
func (o *MachineUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this machine usage o k response a status code equal to that given
func (o *MachineUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the machine usage o k response
func (o *MachineUsageOK) Code() int {
	return 200
}

func (o *MachineUsageOK) Error() string {
	return fmt.Sprintf("[POST /v1/accounting/machine-usage][%d] machineUsageOK  %+v", 200, o.Payload)
}

func (o *MachineUsageOK) String() string {
	return fmt.Sprintf("[POST /v1/accounting/machine-usage][%d] machineUsageOK  %+v", 200, o.Payload)
}

func (o *MachineUsageOK) GetPayload() *models.V1MachineUsageResponse {
	return o.Payload
}

func (o *MachineUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1MachineUsageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMachineUsageDefault creates a MachineUsageDefault with default headers values
func NewMachineUsageDefault(code int) *MachineUsageDefault {
	return &MachineUsageDefault{
		_statusCode: code,
	}
}

/*
MachineUsageDefault describes a response with status code -1, with default header values.

Error
*/
type MachineUsageDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this machine usage default response has a 2xx status code
func (o *MachineUsageDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this machine usage default response has a 3xx status code
func (o *MachineUsageDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this machine usage default response has a 4xx status code
func (o *MachineUsageDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this machine usage default response has a 5xx status code
func (o *MachineUsageDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this machine usage default response a status code equal to that given
func (o *MachineUsageDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the machine usage default response
func (o *MachineUsageDefault) Code() int {
	return o._statusCode
}

func (o *MachineUsageDefault) Error() string {
	return fmt.Sprintf("[POST /v1/accounting/machine-usage][%d] machineUsage default  %+v", o._statusCode, o.Payload)
}

func (o *MachineUsageDefault) String() string {
	return fmt.Sprintf("[POST /v1/accounting/machine-usage][%d] machineUsage default  %+v", o._statusCode, o.Payload)
}

func (o *MachineUsageDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *MachineUsageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
