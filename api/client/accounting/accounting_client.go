// Code generated by go-swagger; DO NOT EDIT.

package accounting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new accounting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ClusterUsage gets cluster usage for given accounting query
*/
func (a *Client) ClusterUsage(params *ClusterUsageParams, authInfo runtime.ClientAuthInfoWriter) (*ClusterUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clusterUsage",
		Method:             "POST",
		PathPattern:        "/v1/accounting/cluster-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ClusterUsageOK), nil

}

/*
ClusterUsageCSV gets cluster usage for given accounting query
*/
func (a *Client) ClusterUsageCSV(params *ClusterUsageCSVParams, authInfo runtime.ClientAuthInfoWriter) (*ClusterUsageCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterUsageCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clusterUsageCSV",
		Method:             "POST",
		PathPattern:        "/v1/accounting/cluster-usage-csv",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterUsageCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ClusterUsageCSVOK), nil

}

/*
ContainerUsage gets container usage for given accounting query
*/
func (a *Client) ContainerUsage(params *ContainerUsageParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "containerUsage",
		Method:             "POST",
		PathPattern:        "/v1/accounting/container-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContainerUsageOK), nil

}

/*
ContainerUsageCSV gets container usage for given accounting query
*/
func (a *Client) ContainerUsageCSV(params *ContainerUsageCSVParams, authInfo runtime.ClientAuthInfoWriter) (*ContainerUsageCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerUsageCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "containerUsageCSV",
		Method:             "POST",
		PathPattern:        "/v1/accounting/container-usage-csv",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerUsageCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContainerUsageCSVOK), nil

}

/*
IPUsage gets ip usage for given accounting query
*/
func (a *Client) IPUsage(params *IPUsageParams, authInfo runtime.ClientAuthInfoWriter) (*IPUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipUsage",
		Method:             "POST",
		PathPattern:        "/v1/accounting/ip-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IPUsageOK), nil

}

/*
IPUsageCSV gets ip usage for given accounting query
*/
func (a *Client) IPUsageCSV(params *IPUsageCSVParams, authInfo runtime.ClientAuthInfoWriter) (*IPUsageCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPUsageCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ipUsageCSV",
		Method:             "POST",
		PathPattern:        "/v1/accounting/ip-usage-csv",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IPUsageCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IPUsageCSVOK), nil

}

/*
NetworkUsage gets network usage for given accounting query
*/
func (a *Client) NetworkUsage(params *NetworkUsageParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "networkUsage",
		Method:             "POST",
		PathPattern:        "/v1/accounting/network-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetworkUsageOK), nil

}

/*
NetworkUsageCSV gets network usage for given accounting query
*/
func (a *Client) NetworkUsageCSV(params *NetworkUsageCSVParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkUsageCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkUsageCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "networkUsageCSV",
		Method:             "POST",
		PathPattern:        "/v1/accounting/network-usage-csv",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkUsageCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetworkUsageCSVOK), nil

}

/*
S3Usage gets s3 bucket usage for given accounting query
*/
func (a *Client) S3Usage(params *S3UsageParams, authInfo runtime.ClientAuthInfoWriter) (*S3UsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3UsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Usage",
		Method:             "POST",
		PathPattern:        "/v1/accounting/s3-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3UsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*S3UsageOK), nil

}

/*
S3UsageCSV gets s3 bucket usage for given accounting query
*/
func (a *Client) S3UsageCSV(params *S3UsageCSVParams, authInfo runtime.ClientAuthInfoWriter) (*S3UsageCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3UsageCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3UsageCSV",
		Method:             "POST",
		PathPattern:        "/v1/accounting/s3-usage-csv",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3UsageCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*S3UsageCSVOK), nil

}

/*
VolumeUsage gets volume usage for given accounting query
*/
func (a *Client) VolumeUsage(params *VolumeUsageParams, authInfo runtime.ClientAuthInfoWriter) (*VolumeUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "volumeUsage",
		Method:             "POST",
		PathPattern:        "/v1/accounting/volume-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VolumeUsageOK), nil

}

/*
VolumeUsageCSV gets volume usage for given accounting query
*/
func (a *Client) VolumeUsageCSV(params *VolumeUsageCSVParams, authInfo runtime.ClientAuthInfoWriter) (*VolumeUsageCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeUsageCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "volumeUsageCSV",
		Method:             "POST",
		PathPattern:        "/v1/accounting/volume-usage-csv",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeUsageCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VolumeUsageCSVOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
