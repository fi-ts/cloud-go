// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package volume

import (
	"github.com/fi-ts/cloud-go/api/client/volume"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// ClusterInfo provides a mock function for the type ClientService
func (_mock *ClientService) ClusterInfo(params *volume.ClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.ClusterInfoOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ClusterInfo")
	}

	var r0 *volume.ClusterInfoOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.ClusterInfoParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.ClusterInfoOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.ClusterInfoParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.ClusterInfoOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.ClusterInfoOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.ClusterInfoParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ClusterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterInfo'
type ClientService_ClusterInfo_Call struct {
	*mock.Call
}

// ClusterInfo is a helper method to define mock.On call
//   - params *volume.ClusterInfoParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) ClusterInfo(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ClusterInfo_Call {
	return &ClientService_ClusterInfo_Call{Call: _e.mock.On("ClusterInfo",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ClusterInfo_Call) Run(run func(params *volume.ClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_ClusterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.ClusterInfoParams
		if args[0] != nil {
			arg0 = args[0].(*volume.ClusterInfoParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ClusterInfo_Call) Return(clusterInfoOK *volume.ClusterInfoOK, err error) *ClientService_ClusterInfo_Call {
	_c.Call.Return(clusterInfoOK, err)
	return _c
}

func (_c *ClientService_ClusterInfo_Call) RunAndReturn(run func(params *volume.ClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.ClusterInfoOK, error)) *ClientService_ClusterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnapshot provides a mock function for the type ClientService
func (_mock *ClientService) DeleteSnapshot(params *volume.DeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.DeleteSnapshotOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 *volume.DeleteSnapshotOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.DeleteSnapshotParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.DeleteSnapshotOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.DeleteSnapshotParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.DeleteSnapshotOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.DeleteSnapshotOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.DeleteSnapshotParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_DeleteSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshot'
type ClientService_DeleteSnapshot_Call struct {
	*mock.Call
}

// DeleteSnapshot is a helper method to define mock.On call
//   - params *volume.DeleteSnapshotParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) DeleteSnapshot(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_DeleteSnapshot_Call {
	return &ClientService_DeleteSnapshot_Call{Call: _e.mock.On("DeleteSnapshot",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_DeleteSnapshot_Call) Run(run func(params *volume.DeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_DeleteSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.DeleteSnapshotParams
		if args[0] != nil {
			arg0 = args[0].(*volume.DeleteSnapshotParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_DeleteSnapshot_Call) Return(deleteSnapshotOK *volume.DeleteSnapshotOK, err error) *ClientService_DeleteSnapshot_Call {
	_c.Call.Return(deleteSnapshotOK, err)
	return _c
}

func (_c *ClientService_DeleteSnapshot_Call) RunAndReturn(run func(params *volume.DeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.DeleteSnapshotOK, error)) *ClientService_DeleteSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVolume provides a mock function for the type ClientService
func (_mock *ClientService) DeleteVolume(params *volume.DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.DeleteVolumeOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 *volume.DeleteVolumeOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.DeleteVolumeParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.DeleteVolumeOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.DeleteVolumeParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.DeleteVolumeOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.DeleteVolumeOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.DeleteVolumeParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_DeleteVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVolume'
type ClientService_DeleteVolume_Call struct {
	*mock.Call
}

// DeleteVolume is a helper method to define mock.On call
//   - params *volume.DeleteVolumeParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) DeleteVolume(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_DeleteVolume_Call {
	return &ClientService_DeleteVolume_Call{Call: _e.mock.On("DeleteVolume",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_DeleteVolume_Call) Run(run func(params *volume.DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_DeleteVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.DeleteVolumeParams
		if args[0] != nil {
			arg0 = args[0].(*volume.DeleteVolumeParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_DeleteVolume_Call) Return(deleteVolumeOK *volume.DeleteVolumeOK, err error) *ClientService_DeleteVolume_Call {
	_c.Call.Return(deleteVolumeOK, err)
	return _c
}

func (_c *ClientService_DeleteVolume_Call) RunAndReturn(run func(params *volume.DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.DeleteVolumeOK, error)) *ClientService_DeleteVolume_Call {
	_c.Call.Return(run)
	return _c
}

// FindSnapshots provides a mock function for the type ClientService
func (_mock *ClientService) FindSnapshots(params *volume.FindSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.FindSnapshotsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindSnapshots")
	}

	var r0 *volume.FindSnapshotsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.FindSnapshotsParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.FindSnapshotsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.FindSnapshotsParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.FindSnapshotsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.FindSnapshotsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.FindSnapshotsParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSnapshots'
type ClientService_FindSnapshots_Call struct {
	*mock.Call
}

// FindSnapshots is a helper method to define mock.On call
//   - params *volume.FindSnapshotsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) FindSnapshots(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindSnapshots_Call {
	return &ClientService_FindSnapshots_Call{Call: _e.mock.On("FindSnapshots",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindSnapshots_Call) Run(run func(params *volume.FindSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_FindSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.FindSnapshotsParams
		if args[0] != nil {
			arg0 = args[0].(*volume.FindSnapshotsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindSnapshots_Call) Return(findSnapshotsOK *volume.FindSnapshotsOK, err error) *ClientService_FindSnapshots_Call {
	_c.Call.Return(findSnapshotsOK, err)
	return _c
}

func (_c *ClientService_FindSnapshots_Call) RunAndReturn(run func(params *volume.FindSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.FindSnapshotsOK, error)) *ClientService_FindSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// FindVolumes provides a mock function for the type ClientService
func (_mock *ClientService) FindVolumes(params *volume.FindVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.FindVolumesOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindVolumes")
	}

	var r0 *volume.FindVolumesOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.FindVolumesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.FindVolumesOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.FindVolumesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.FindVolumesOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.FindVolumesOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.FindVolumesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindVolumes'
type ClientService_FindVolumes_Call struct {
	*mock.Call
}

// FindVolumes is a helper method to define mock.On call
//   - params *volume.FindVolumesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) FindVolumes(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindVolumes_Call {
	return &ClientService_FindVolumes_Call{Call: _e.mock.On("FindVolumes",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindVolumes_Call) Run(run func(params *volume.FindVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_FindVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.FindVolumesParams
		if args[0] != nil {
			arg0 = args[0].(*volume.FindVolumesParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindVolumes_Call) Return(findVolumesOK *volume.FindVolumesOK, err error) *ClientService_FindVolumes_Call {
	_c.Call.Return(findVolumesOK, err)
	return _c
}

func (_c *ClientService_FindVolumes_Call) RunAndReturn(run func(params *volume.FindVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.FindVolumesOK, error)) *ClientService_FindVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnapshot provides a mock function for the type ClientService
func (_mock *ClientService) GetSnapshot(params *volume.GetSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.GetSnapshotOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 *volume.GetSnapshotOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.GetSnapshotParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.GetSnapshotOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.GetSnapshotParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.GetSnapshotOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.GetSnapshotOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.GetSnapshotParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshot'
type ClientService_GetSnapshot_Call struct {
	*mock.Call
}

// GetSnapshot is a helper method to define mock.On call
//   - params *volume.GetSnapshotParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) GetSnapshot(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetSnapshot_Call {
	return &ClientService_GetSnapshot_Call{Call: _e.mock.On("GetSnapshot",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetSnapshot_Call) Run(run func(params *volume.GetSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_GetSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.GetSnapshotParams
		if args[0] != nil {
			arg0 = args[0].(*volume.GetSnapshotParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetSnapshot_Call) Return(getSnapshotOK *volume.GetSnapshotOK, err error) *ClientService_GetSnapshot_Call {
	_c.Call.Return(getSnapshotOK, err)
	return _c
}

func (_c *ClientService_GetSnapshot_Call) RunAndReturn(run func(params *volume.GetSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.GetSnapshotOK, error)) *ClientService_GetSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetVolume provides a mock function for the type ClientService
func (_mock *ClientService) GetVolume(params *volume.GetVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.GetVolumeOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetVolume")
	}

	var r0 *volume.GetVolumeOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.GetVolumeParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.GetVolumeOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.GetVolumeParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.GetVolumeOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.GetVolumeOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.GetVolumeParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVolume'
type ClientService_GetVolume_Call struct {
	*mock.Call
}

// GetVolume is a helper method to define mock.On call
//   - params *volume.GetVolumeParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) GetVolume(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetVolume_Call {
	return &ClientService_GetVolume_Call{Call: _e.mock.On("GetVolume",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetVolume_Call) Run(run func(params *volume.GetVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_GetVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.GetVolumeParams
		if args[0] != nil {
			arg0 = args[0].(*volume.GetVolumeParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetVolume_Call) Return(getVolumeOK *volume.GetVolumeOK, err error) *ClientService_GetVolume_Call {
	_c.Call.Return(getVolumeOK, err)
	return _c
}

func (_c *ClientService_GetVolume_Call) RunAndReturn(run func(params *volume.GetVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.GetVolumeOK, error)) *ClientService_GetVolume_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicies provides a mock function for the type ClientService
func (_mock *ClientService) ListPolicies(params *volume.ListPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.ListPoliciesOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 *volume.ListPoliciesOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.ListPoliciesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.ListPoliciesOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.ListPoliciesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.ListPoliciesOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.ListPoliciesOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.ListPoliciesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicies'
type ClientService_ListPolicies_Call struct {
	*mock.Call
}

// ListPolicies is a helper method to define mock.On call
//   - params *volume.ListPoliciesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) ListPolicies(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListPolicies_Call {
	return &ClientService_ListPolicies_Call{Call: _e.mock.On("ListPolicies",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListPolicies_Call) Run(run func(params *volume.ListPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_ListPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.ListPoliciesParams
		if args[0] != nil {
			arg0 = args[0].(*volume.ListPoliciesParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListPolicies_Call) Return(listPoliciesOK *volume.ListPoliciesOK, err error) *ClientService_ListPolicies_Call {
	_c.Call.Return(listPoliciesOK, err)
	return _c
}

func (_c *ClientService_ListPolicies_Call) RunAndReturn(run func(params *volume.ListPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.ListPoliciesOK, error)) *ClientService_ListPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListVolumes provides a mock function for the type ClientService
func (_mock *ClientService) ListVolumes(params *volume.ListVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.ListVolumesOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListVolumes")
	}

	var r0 *volume.ListVolumesOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.ListVolumesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.ListVolumesOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.ListVolumesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.ListVolumesOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.ListVolumesOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.ListVolumesParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVolumes'
type ClientService_ListVolumes_Call struct {
	*mock.Call
}

// ListVolumes is a helper method to define mock.On call
//   - params *volume.ListVolumesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) ListVolumes(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListVolumes_Call {
	return &ClientService_ListVolumes_Call{Call: _e.mock.On("ListVolumes",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListVolumes_Call) Run(run func(params *volume.ListVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_ListVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.ListVolumesParams
		if args[0] != nil {
			arg0 = args[0].(*volume.ListVolumesParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListVolumes_Call) Return(listVolumesOK *volume.ListVolumesOK, err error) *ClientService_ListVolumes_Call {
	_c.Call.Return(listVolumesOK, err)
	return _c
}

func (_c *ClientService_ListVolumes_Call) RunAndReturn(run func(params *volume.ListVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.ListVolumesOK, error)) *ClientService_ListVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// SetVolumeQoSPolicy provides a mock function for the type ClientService
func (_mock *ClientService) SetVolumeQoSPolicy(params *volume.SetVolumeQoSPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.SetVolumeQoSPolicyOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetVolumeQoSPolicy")
	}

	var r0 *volume.SetVolumeQoSPolicyOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*volume.SetVolumeQoSPolicyParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) (*volume.SetVolumeQoSPolicyOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*volume.SetVolumeQoSPolicyParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) *volume.SetVolumeQoSPolicyOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*volume.SetVolumeQoSPolicyOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*volume.SetVolumeQoSPolicyParams, runtime.ClientAuthInfoWriter, ...volume.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_SetVolumeQoSPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVolumeQoSPolicy'
type ClientService_SetVolumeQoSPolicy_Call struct {
	*mock.Call
}

// SetVolumeQoSPolicy is a helper method to define mock.On call
//   - params *volume.SetVolumeQoSPolicyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...volume.ClientOption
func (_e *ClientService_Expecter) SetVolumeQoSPolicy(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_SetVolumeQoSPolicy_Call {
	return &ClientService_SetVolumeQoSPolicy_Call{Call: _e.mock.On("SetVolumeQoSPolicy",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_SetVolumeQoSPolicy_Call) Run(run func(params *volume.SetVolumeQoSPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption)) *ClientService_SetVolumeQoSPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *volume.SetVolumeQoSPolicyParams
		if args[0] != nil {
			arg0 = args[0].(*volume.SetVolumeQoSPolicyParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []volume.ClientOption
		var variadicArgs []volume.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]volume.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_SetVolumeQoSPolicy_Call) Return(setVolumeQoSPolicyOK *volume.SetVolumeQoSPolicyOK, err error) *ClientService_SetVolumeQoSPolicy_Call {
	_c.Call.Return(setVolumeQoSPolicyOK, err)
	return _c
}

func (_c *ClientService_SetVolumeQoSPolicy_Call) RunAndReturn(run func(params *volume.SetVolumeQoSPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...volume.ClientOption) (*volume.SetVolumeQoSPolicyOK, error)) *ClientService_SetVolumeQoSPolicy_Call {
	_c.Call.Return(run)
	return _c
}
