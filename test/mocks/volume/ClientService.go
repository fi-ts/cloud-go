// Code generated by mockery v2.14.0. DO NOT EDIT.

package volume

import (
	clientvolume "github.com/fi-ts/cloud-go/api/client/volume"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ClusterInfo provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterInfo(params *clientvolume.ClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientvolume.ClientOption) (*clientvolume.ClusterInfoOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientvolume.ClusterInfoOK
	if rf, ok := ret.Get(0).(func(*clientvolume.ClusterInfoParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) *clientvolume.ClusterInfoOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientvolume.ClusterInfoOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientvolume.ClusterInfoParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteSnapshot(params *clientvolume.DeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientvolume.ClientOption) (*clientvolume.DeleteSnapshotOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientvolume.DeleteSnapshotOK
	if rf, ok := ret.Get(0).(func(*clientvolume.DeleteSnapshotParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) *clientvolume.DeleteSnapshotOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientvolume.DeleteSnapshotOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientvolume.DeleteSnapshotParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSnapshots provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindSnapshots(params *clientvolume.FindSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientvolume.ClientOption) (*clientvolume.FindSnapshotsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientvolume.FindSnapshotsOK
	if rf, ok := ret.Get(0).(func(*clientvolume.FindSnapshotsParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) *clientvolume.FindSnapshotsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientvolume.FindSnapshotsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientvolume.FindSnapshotsParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetSnapshot(params *clientvolume.GetSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientvolume.ClientOption) (*clientvolume.GetSnapshotOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientvolume.GetSnapshotOK
	if rf, ok := ret.Get(0).(func(*clientvolume.GetSnapshotParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) *clientvolume.GetSnapshotOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientvolume.GetSnapshotOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientvolume.GetSnapshotParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListSnapshots(params *clientvolume.ListSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientvolume.ClientOption) (*clientvolume.ListSnapshotsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientvolume.ListSnapshotsOK
	if rf, ok := ret.Get(0).(func(*clientvolume.ListSnapshotsParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) *clientvolume.ListSnapshotsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientvolume.ListSnapshotsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientvolume.ListSnapshotsParams, runtime.ClientAuthInfoWriter, ...clientvolume.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

type mockConstructorTestingTNewClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientService(t mockConstructorTestingTNewClientService) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
