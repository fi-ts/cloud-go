// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package database

import (
	"github.com/fi-ts/cloud-go/api/client/database"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// AcceptPostgresRestore provides a mock function for the type ClientService
func (_mock *ClientService) AcceptPostgresRestore(params *database.AcceptPostgresRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.AcceptPostgresRestoreOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AcceptPostgresRestore")
	}

	var r0 *database.AcceptPostgresRestoreOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.AcceptPostgresRestoreParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.AcceptPostgresRestoreOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.AcceptPostgresRestoreParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.AcceptPostgresRestoreOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AcceptPostgresRestoreOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.AcceptPostgresRestoreParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_AcceptPostgresRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptPostgresRestore'
type ClientService_AcceptPostgresRestore_Call struct {
	*mock.Call
}

// AcceptPostgresRestore is a helper method to define mock.On call
//   - params *database.AcceptPostgresRestoreParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) AcceptPostgresRestore(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_AcceptPostgresRestore_Call {
	return &ClientService_AcceptPostgresRestore_Call{Call: _e.mock.On("AcceptPostgresRestore",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_AcceptPostgresRestore_Call) Run(run func(params *database.AcceptPostgresRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_AcceptPostgresRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.AcceptPostgresRestoreParams
		if args[0] != nil {
			arg0 = args[0].(*database.AcceptPostgresRestoreParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_AcceptPostgresRestore_Call) Return(acceptPostgresRestoreOK *database.AcceptPostgresRestoreOK, err error) *ClientService_AcceptPostgresRestore_Call {
	_c.Call.Return(acceptPostgresRestoreOK, err)
	return _c
}

func (_c *ClientService_AcceptPostgresRestore_Call) RunAndReturn(run func(params *database.AcceptPostgresRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.AcceptPostgresRestoreOK, error)) *ClientService_AcceptPostgresRestore_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptPostgresRestoreDeprecated provides a mock function for the type ClientService
func (_mock *ClientService) AcceptPostgresRestoreDeprecated(params *database.AcceptPostgresRestoreDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.AcceptPostgresRestoreDeprecatedOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AcceptPostgresRestoreDeprecated")
	}

	var r0 *database.AcceptPostgresRestoreDeprecatedOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.AcceptPostgresRestoreDeprecatedParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.AcceptPostgresRestoreDeprecatedOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.AcceptPostgresRestoreDeprecatedParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.AcceptPostgresRestoreDeprecatedOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AcceptPostgresRestoreDeprecatedOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.AcceptPostgresRestoreDeprecatedParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_AcceptPostgresRestoreDeprecated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptPostgresRestoreDeprecated'
type ClientService_AcceptPostgresRestoreDeprecated_Call struct {
	*mock.Call
}

// AcceptPostgresRestoreDeprecated is a helper method to define mock.On call
//   - params *database.AcceptPostgresRestoreDeprecatedParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) AcceptPostgresRestoreDeprecated(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_AcceptPostgresRestoreDeprecated_Call {
	return &ClientService_AcceptPostgresRestoreDeprecated_Call{Call: _e.mock.On("AcceptPostgresRestoreDeprecated",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_AcceptPostgresRestoreDeprecated_Call) Run(run func(params *database.AcceptPostgresRestoreDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_AcceptPostgresRestoreDeprecated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.AcceptPostgresRestoreDeprecatedParams
		if args[0] != nil {
			arg0 = args[0].(*database.AcceptPostgresRestoreDeprecatedParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_AcceptPostgresRestoreDeprecated_Call) Return(acceptPostgresRestoreDeprecatedOK *database.AcceptPostgresRestoreDeprecatedOK, err error) *ClientService_AcceptPostgresRestoreDeprecated_Call {
	_c.Call.Return(acceptPostgresRestoreDeprecatedOK, err)
	return _c
}

func (_c *ClientService_AcceptPostgresRestoreDeprecated_Call) RunAndReturn(run func(params *database.AcceptPostgresRestoreDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.AcceptPostgresRestoreDeprecatedOK, error)) *ClientService_AcceptPostgresRestoreDeprecated_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePostgres provides a mock function for the type ClientService
func (_mock *ClientService) CreatePostgres(params *database.CreatePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.CreatePostgresCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePostgres")
	}

	var r0 *database.CreatePostgresCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.CreatePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.CreatePostgresCreated, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.CreatePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.CreatePostgresCreated); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CreatePostgresCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.CreatePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_CreatePostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePostgres'
type ClientService_CreatePostgres_Call struct {
	*mock.Call
}

// CreatePostgres is a helper method to define mock.On call
//   - params *database.CreatePostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) CreatePostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_CreatePostgres_Call {
	return &ClientService_CreatePostgres_Call{Call: _e.mock.On("CreatePostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_CreatePostgres_Call) Run(run func(params *database.CreatePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_CreatePostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.CreatePostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.CreatePostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_CreatePostgres_Call) Return(createPostgresCreated *database.CreatePostgresCreated, err error) *ClientService_CreatePostgres_Call {
	_c.Call.Return(createPostgresCreated, err)
	return _c
}

func (_c *ClientService_CreatePostgres_Call) RunAndReturn(run func(params *database.CreatePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.CreatePostgresCreated, error)) *ClientService_CreatePostgres_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePostgresBackupConfig provides a mock function for the type ClientService
func (_mock *ClientService) CreatePostgresBackupConfig(params *database.CreatePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.CreatePostgresBackupConfigCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePostgresBackupConfig")
	}

	var r0 *database.CreatePostgresBackupConfigCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.CreatePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.CreatePostgresBackupConfigCreated, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.CreatePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.CreatePostgresBackupConfigCreated); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CreatePostgresBackupConfigCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.CreatePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_CreatePostgresBackupConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePostgresBackupConfig'
type ClientService_CreatePostgresBackupConfig_Call struct {
	*mock.Call
}

// CreatePostgresBackupConfig is a helper method to define mock.On call
//   - params *database.CreatePostgresBackupConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) CreatePostgresBackupConfig(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_CreatePostgresBackupConfig_Call {
	return &ClientService_CreatePostgresBackupConfig_Call{Call: _e.mock.On("CreatePostgresBackupConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_CreatePostgresBackupConfig_Call) Run(run func(params *database.CreatePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_CreatePostgresBackupConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.CreatePostgresBackupConfigParams
		if args[0] != nil {
			arg0 = args[0].(*database.CreatePostgresBackupConfigParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_CreatePostgresBackupConfig_Call) Return(createPostgresBackupConfigCreated *database.CreatePostgresBackupConfigCreated, err error) *ClientService_CreatePostgresBackupConfig_Call {
	_c.Call.Return(createPostgresBackupConfigCreated, err)
	return _c
}

func (_c *ClientService_CreatePostgresBackupConfig_Call) RunAndReturn(run func(params *database.CreatePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.CreatePostgresBackupConfigCreated, error)) *ClientService_CreatePostgresBackupConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePostgresStandby provides a mock function for the type ClientService
func (_mock *ClientService) CreatePostgresStandby(params *database.CreatePostgresStandbyParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.CreatePostgresStandbyCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePostgresStandby")
	}

	var r0 *database.CreatePostgresStandbyCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.CreatePostgresStandbyParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.CreatePostgresStandbyCreated, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.CreatePostgresStandbyParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.CreatePostgresStandbyCreated); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CreatePostgresStandbyCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.CreatePostgresStandbyParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_CreatePostgresStandby_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePostgresStandby'
type ClientService_CreatePostgresStandby_Call struct {
	*mock.Call
}

// CreatePostgresStandby is a helper method to define mock.On call
//   - params *database.CreatePostgresStandbyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) CreatePostgresStandby(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_CreatePostgresStandby_Call {
	return &ClientService_CreatePostgresStandby_Call{Call: _e.mock.On("CreatePostgresStandby",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_CreatePostgresStandby_Call) Run(run func(params *database.CreatePostgresStandbyParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_CreatePostgresStandby_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.CreatePostgresStandbyParams
		if args[0] != nil {
			arg0 = args[0].(*database.CreatePostgresStandbyParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_CreatePostgresStandby_Call) Return(createPostgresStandbyCreated *database.CreatePostgresStandbyCreated, err error) *ClientService_CreatePostgresStandby_Call {
	_c.Call.Return(createPostgresStandbyCreated, err)
	return _c
}

func (_c *ClientService_CreatePostgresStandby_Call) RunAndReturn(run func(params *database.CreatePostgresStandbyParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.CreatePostgresStandbyCreated, error)) *ClientService_CreatePostgresStandby_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePostgres provides a mock function for the type ClientService
func (_mock *ClientService) DeletePostgres(params *database.DeletePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.DeletePostgresOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeletePostgres")
	}

	var r0 *database.DeletePostgresOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.DeletePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.DeletePostgresOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.DeletePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.DeletePostgresOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeletePostgresOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.DeletePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_DeletePostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePostgres'
type ClientService_DeletePostgres_Call struct {
	*mock.Call
}

// DeletePostgres is a helper method to define mock.On call
//   - params *database.DeletePostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) DeletePostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_DeletePostgres_Call {
	return &ClientService_DeletePostgres_Call{Call: _e.mock.On("DeletePostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_DeletePostgres_Call) Run(run func(params *database.DeletePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_DeletePostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.DeletePostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.DeletePostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_DeletePostgres_Call) Return(deletePostgresOK *database.DeletePostgresOK, err error) *ClientService_DeletePostgres_Call {
	_c.Call.Return(deletePostgresOK, err)
	return _c
}

func (_c *ClientService_DeletePostgres_Call) RunAndReturn(run func(params *database.DeletePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.DeletePostgresOK, error)) *ClientService_DeletePostgres_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePostgresBackupConfig provides a mock function for the type ClientService
func (_mock *ClientService) DeletePostgresBackupConfig(params *database.DeletePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.DeletePostgresBackupConfigOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeletePostgresBackupConfig")
	}

	var r0 *database.DeletePostgresBackupConfigOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.DeletePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.DeletePostgresBackupConfigOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.DeletePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.DeletePostgresBackupConfigOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeletePostgresBackupConfigOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.DeletePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_DeletePostgresBackupConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePostgresBackupConfig'
type ClientService_DeletePostgresBackupConfig_Call struct {
	*mock.Call
}

// DeletePostgresBackupConfig is a helper method to define mock.On call
//   - params *database.DeletePostgresBackupConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) DeletePostgresBackupConfig(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_DeletePostgresBackupConfig_Call {
	return &ClientService_DeletePostgresBackupConfig_Call{Call: _e.mock.On("DeletePostgresBackupConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_DeletePostgresBackupConfig_Call) Run(run func(params *database.DeletePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_DeletePostgresBackupConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.DeletePostgresBackupConfigParams
		if args[0] != nil {
			arg0 = args[0].(*database.DeletePostgresBackupConfigParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_DeletePostgresBackupConfig_Call) Return(deletePostgresBackupConfigOK *database.DeletePostgresBackupConfigOK, err error) *ClientService_DeletePostgresBackupConfig_Call {
	_c.Call.Return(deletePostgresBackupConfigOK, err)
	return _c
}

func (_c *ClientService_DeletePostgresBackupConfig_Call) RunAndReturn(run func(params *database.DeletePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.DeletePostgresBackupConfigOK, error)) *ClientService_DeletePostgresBackupConfig_Call {
	_c.Call.Return(run)
	return _c
}

// FindPostgres provides a mock function for the type ClientService
func (_mock *ClientService) FindPostgres(params *database.FindPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.FindPostgresOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindPostgres")
	}

	var r0 *database.FindPostgresOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.FindPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.FindPostgresOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.FindPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.FindPostgresOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.FindPostgresOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.FindPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindPostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPostgres'
type ClientService_FindPostgres_Call struct {
	*mock.Call
}

// FindPostgres is a helper method to define mock.On call
//   - params *database.FindPostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) FindPostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindPostgres_Call {
	return &ClientService_FindPostgres_Call{Call: _e.mock.On("FindPostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindPostgres_Call) Run(run func(params *database.FindPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_FindPostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.FindPostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.FindPostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindPostgres_Call) Return(findPostgresOK *database.FindPostgresOK, err error) *ClientService_FindPostgres_Call {
	_c.Call.Return(findPostgresOK, err)
	return _c
}

func (_c *ClientService_FindPostgres_Call) RunAndReturn(run func(params *database.FindPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.FindPostgresOK, error)) *ClientService_FindPostgres_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupConfig provides a mock function for the type ClientService
func (_mock *ClientService) GetBackupConfig(params *database.GetBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetBackupConfigOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBackupConfig")
	}

	var r0 *database.GetBackupConfigOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.GetBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.GetBackupConfigOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.GetBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.GetBackupConfigOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GetBackupConfigOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.GetBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetBackupConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupConfig'
type ClientService_GetBackupConfig_Call struct {
	*mock.Call
}

// GetBackupConfig is a helper method to define mock.On call
//   - params *database.GetBackupConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) GetBackupConfig(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetBackupConfig_Call {
	return &ClientService_GetBackupConfig_Call{Call: _e.mock.On("GetBackupConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetBackupConfig_Call) Run(run func(params *database.GetBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_GetBackupConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.GetBackupConfigParams
		if args[0] != nil {
			arg0 = args[0].(*database.GetBackupConfigParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetBackupConfig_Call) Return(getBackupConfigOK *database.GetBackupConfigOK, err error) *ClientService_GetBackupConfig_Call {
	_c.Call.Return(getBackupConfigOK, err)
	return _c
}

func (_c *ClientService_GetBackupConfig_Call) RunAndReturn(run func(params *database.GetBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetBackupConfigOK, error)) *ClientService_GetBackupConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostgres provides a mock function for the type ClientService
func (_mock *ClientService) GetPostgres(params *database.GetPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPostgres")
	}

	var r0 *database.GetPostgresOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.GetPostgresOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.GetPostgresOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GetPostgresOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.GetPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetPostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostgres'
type ClientService_GetPostgres_Call struct {
	*mock.Call
}

// GetPostgres is a helper method to define mock.On call
//   - params *database.GetPostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) GetPostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetPostgres_Call {
	return &ClientService_GetPostgres_Call{Call: _e.mock.On("GetPostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetPostgres_Call) Run(run func(params *database.GetPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_GetPostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.GetPostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.GetPostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetPostgres_Call) Return(getPostgresOK *database.GetPostgresOK, err error) *ClientService_GetPostgres_Call {
	_c.Call.Return(getPostgresOK, err)
	return _c
}

func (_c *ClientService_GetPostgres_Call) RunAndReturn(run func(params *database.GetPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresOK, error)) *ClientService_GetPostgres_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostgresBackups provides a mock function for the type ClientService
func (_mock *ClientService) GetPostgresBackups(params *database.GetPostgresBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresBackupsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPostgresBackups")
	}

	var r0 *database.GetPostgresBackupsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresBackupsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.GetPostgresBackupsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresBackupsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.GetPostgresBackupsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GetPostgresBackupsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.GetPostgresBackupsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetPostgresBackups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostgresBackups'
type ClientService_GetPostgresBackups_Call struct {
	*mock.Call
}

// GetPostgresBackups is a helper method to define mock.On call
//   - params *database.GetPostgresBackupsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) GetPostgresBackups(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetPostgresBackups_Call {
	return &ClientService_GetPostgresBackups_Call{Call: _e.mock.On("GetPostgresBackups",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetPostgresBackups_Call) Run(run func(params *database.GetPostgresBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_GetPostgresBackups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.GetPostgresBackupsParams
		if args[0] != nil {
			arg0 = args[0].(*database.GetPostgresBackupsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetPostgresBackups_Call) Return(getPostgresBackupsOK *database.GetPostgresBackupsOK, err error) *ClientService_GetPostgresBackups_Call {
	_c.Call.Return(getPostgresBackupsOK, err)
	return _c
}

func (_c *ClientService_GetPostgresBackups_Call) RunAndReturn(run func(params *database.GetPostgresBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresBackupsOK, error)) *ClientService_GetPostgresBackups_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostgresPartitions provides a mock function for the type ClientService
func (_mock *ClientService) GetPostgresPartitions(params *database.GetPostgresPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresPartitionsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPostgresPartitions")
	}

	var r0 *database.GetPostgresPartitionsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresPartitionsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.GetPostgresPartitionsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresPartitionsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.GetPostgresPartitionsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GetPostgresPartitionsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.GetPostgresPartitionsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetPostgresPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostgresPartitions'
type ClientService_GetPostgresPartitions_Call struct {
	*mock.Call
}

// GetPostgresPartitions is a helper method to define mock.On call
//   - params *database.GetPostgresPartitionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) GetPostgresPartitions(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetPostgresPartitions_Call {
	return &ClientService_GetPostgresPartitions_Call{Call: _e.mock.On("GetPostgresPartitions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetPostgresPartitions_Call) Run(run func(params *database.GetPostgresPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_GetPostgresPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.GetPostgresPartitionsParams
		if args[0] != nil {
			arg0 = args[0].(*database.GetPostgresPartitionsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetPostgresPartitions_Call) Return(getPostgresPartitionsOK *database.GetPostgresPartitionsOK, err error) *ClientService_GetPostgresPartitions_Call {
	_c.Call.Return(getPostgresPartitionsOK, err)
	return _c
}

func (_c *ClientService_GetPostgresPartitions_Call) RunAndReturn(run func(params *database.GetPostgresPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresPartitionsOK, error)) *ClientService_GetPostgresPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostgresSecrets provides a mock function for the type ClientService
func (_mock *ClientService) GetPostgresSecrets(params *database.GetPostgresSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresSecretsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPostgresSecrets")
	}

	var r0 *database.GetPostgresSecretsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresSecretsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.GetPostgresSecretsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresSecretsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.GetPostgresSecretsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GetPostgresSecretsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.GetPostgresSecretsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetPostgresSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostgresSecrets'
type ClientService_GetPostgresSecrets_Call struct {
	*mock.Call
}

// GetPostgresSecrets is a helper method to define mock.On call
//   - params *database.GetPostgresSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) GetPostgresSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetPostgresSecrets_Call {
	return &ClientService_GetPostgresSecrets_Call{Call: _e.mock.On("GetPostgresSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetPostgresSecrets_Call) Run(run func(params *database.GetPostgresSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_GetPostgresSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.GetPostgresSecretsParams
		if args[0] != nil {
			arg0 = args[0].(*database.GetPostgresSecretsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetPostgresSecrets_Call) Return(getPostgresSecretsOK *database.GetPostgresSecretsOK, err error) *ClientService_GetPostgresSecrets_Call {
	_c.Call.Return(getPostgresSecretsOK, err)
	return _c
}

func (_c *ClientService_GetPostgresSecrets_Call) RunAndReturn(run func(params *database.GetPostgresSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresSecretsOK, error)) *ClientService_GetPostgresSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostgresVersions provides a mock function for the type ClientService
func (_mock *ClientService) GetPostgresVersions(params *database.GetPostgresVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresVersionsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPostgresVersions")
	}

	var r0 *database.GetPostgresVersionsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresVersionsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.GetPostgresVersionsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.GetPostgresVersionsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.GetPostgresVersionsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GetPostgresVersionsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.GetPostgresVersionsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetPostgresVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostgresVersions'
type ClientService_GetPostgresVersions_Call struct {
	*mock.Call
}

// GetPostgresVersions is a helper method to define mock.On call
//   - params *database.GetPostgresVersionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) GetPostgresVersions(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetPostgresVersions_Call {
	return &ClientService_GetPostgresVersions_Call{Call: _e.mock.On("GetPostgresVersions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetPostgresVersions_Call) Run(run func(params *database.GetPostgresVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_GetPostgresVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.GetPostgresVersionsParams
		if args[0] != nil {
			arg0 = args[0].(*database.GetPostgresVersionsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetPostgresVersions_Call) Return(getPostgresVersionsOK *database.GetPostgresVersionsOK, err error) *ClientService_GetPostgresVersions_Call {
	_c.Call.Return(getPostgresVersionsOK, err)
	return _c
}

func (_c *ClientService_GetPostgresVersions_Call) RunAndReturn(run func(params *database.GetPostgresVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.GetPostgresVersionsOK, error)) *ClientService_GetPostgresVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListPostgres provides a mock function for the type ClientService
func (_mock *ClientService) ListPostgres(params *database.ListPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.ListPostgresOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPostgres")
	}

	var r0 *database.ListPostgresOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.ListPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.ListPostgresOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.ListPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.ListPostgresOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ListPostgresOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.ListPostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListPostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPostgres'
type ClientService_ListPostgres_Call struct {
	*mock.Call
}

// ListPostgres is a helper method to define mock.On call
//   - params *database.ListPostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) ListPostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListPostgres_Call {
	return &ClientService_ListPostgres_Call{Call: _e.mock.On("ListPostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListPostgres_Call) Run(run func(params *database.ListPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_ListPostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.ListPostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.ListPostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListPostgres_Call) Return(listPostgresOK *database.ListPostgresOK, err error) *ClientService_ListPostgres_Call {
	_c.Call.Return(listPostgresOK, err)
	return _c
}

func (_c *ClientService_ListPostgres_Call) RunAndReturn(run func(params *database.ListPostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.ListPostgresOK, error)) *ClientService_ListPostgres_Call {
	_c.Call.Return(run)
	return _c
}

// ListPostgresBackupConfigs provides a mock function for the type ClientService
func (_mock *ClientService) ListPostgresBackupConfigs(params *database.ListPostgresBackupConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.ListPostgresBackupConfigsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPostgresBackupConfigs")
	}

	var r0 *database.ListPostgresBackupConfigsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.ListPostgresBackupConfigsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.ListPostgresBackupConfigsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.ListPostgresBackupConfigsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.ListPostgresBackupConfigsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ListPostgresBackupConfigsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.ListPostgresBackupConfigsParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListPostgresBackupConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPostgresBackupConfigs'
type ClientService_ListPostgresBackupConfigs_Call struct {
	*mock.Call
}

// ListPostgresBackupConfigs is a helper method to define mock.On call
//   - params *database.ListPostgresBackupConfigsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) ListPostgresBackupConfigs(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListPostgresBackupConfigs_Call {
	return &ClientService_ListPostgresBackupConfigs_Call{Call: _e.mock.On("ListPostgresBackupConfigs",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListPostgresBackupConfigs_Call) Run(run func(params *database.ListPostgresBackupConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_ListPostgresBackupConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.ListPostgresBackupConfigsParams
		if args[0] != nil {
			arg0 = args[0].(*database.ListPostgresBackupConfigsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListPostgresBackupConfigs_Call) Return(listPostgresBackupConfigsOK *database.ListPostgresBackupConfigsOK, err error) *ClientService_ListPostgresBackupConfigs_Call {
	_c.Call.Return(listPostgresBackupConfigsOK, err)
	return _c
}

func (_c *ClientService_ListPostgresBackupConfigs_Call) RunAndReturn(run func(params *database.ListPostgresBackupConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.ListPostgresBackupConfigsOK, error)) *ClientService_ListPostgresBackupConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// RestorePostgres provides a mock function for the type ClientService
func (_mock *ClientService) RestorePostgres(params *database.RestorePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.RestorePostgresCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RestorePostgres")
	}

	var r0 *database.RestorePostgresCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.RestorePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.RestorePostgresCreated, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.RestorePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.RestorePostgresCreated); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RestorePostgresCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.RestorePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_RestorePostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestorePostgres'
type ClientService_RestorePostgres_Call struct {
	*mock.Call
}

// RestorePostgres is a helper method to define mock.On call
//   - params *database.RestorePostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) RestorePostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_RestorePostgres_Call {
	return &ClientService_RestorePostgres_Call{Call: _e.mock.On("RestorePostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_RestorePostgres_Call) Run(run func(params *database.RestorePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_RestorePostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.RestorePostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.RestorePostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_RestorePostgres_Call) Return(restorePostgresCreated *database.RestorePostgresCreated, err error) *ClientService_RestorePostgres_Call {
	_c.Call.Return(restorePostgresCreated, err)
	return _c
}

func (_c *ClientService_RestorePostgres_Call) RunAndReturn(run func(params *database.RestorePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.RestorePostgresCreated, error)) *ClientService_RestorePostgres_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// UpdatePostgres provides a mock function for the type ClientService
func (_mock *ClientService) UpdatePostgres(params *database.UpdatePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.UpdatePostgresOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostgres")
	}

	var r0 *database.UpdatePostgresOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.UpdatePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.UpdatePostgresOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.UpdatePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.UpdatePostgresOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.UpdatePostgresOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.UpdatePostgresParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_UpdatePostgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePostgres'
type ClientService_UpdatePostgres_Call struct {
	*mock.Call
}

// UpdatePostgres is a helper method to define mock.On call
//   - params *database.UpdatePostgresParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) UpdatePostgres(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_UpdatePostgres_Call {
	return &ClientService_UpdatePostgres_Call{Call: _e.mock.On("UpdatePostgres",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_UpdatePostgres_Call) Run(run func(params *database.UpdatePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_UpdatePostgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.UpdatePostgresParams
		if args[0] != nil {
			arg0 = args[0].(*database.UpdatePostgresParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_UpdatePostgres_Call) Return(updatePostgresOK *database.UpdatePostgresOK, err error) *ClientService_UpdatePostgres_Call {
	_c.Call.Return(updatePostgresOK, err)
	return _c
}

func (_c *ClientService_UpdatePostgres_Call) RunAndReturn(run func(params *database.UpdatePostgresParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.UpdatePostgresOK, error)) *ClientService_UpdatePostgres_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePostgresBackupConfig provides a mock function for the type ClientService
func (_mock *ClientService) UpdatePostgresBackupConfig(params *database.UpdatePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.UpdatePostgresBackupConfigOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostgresBackupConfig")
	}

	var r0 *database.UpdatePostgresBackupConfigOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*database.UpdatePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) (*database.UpdatePostgresBackupConfigOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*database.UpdatePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) *database.UpdatePostgresBackupConfigOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.UpdatePostgresBackupConfigOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*database.UpdatePostgresBackupConfigParams, runtime.ClientAuthInfoWriter, ...database.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_UpdatePostgresBackupConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePostgresBackupConfig'
type ClientService_UpdatePostgresBackupConfig_Call struct {
	*mock.Call
}

// UpdatePostgresBackupConfig is a helper method to define mock.On call
//   - params *database.UpdatePostgresBackupConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...database.ClientOption
func (_e *ClientService_Expecter) UpdatePostgresBackupConfig(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_UpdatePostgresBackupConfig_Call {
	return &ClientService_UpdatePostgresBackupConfig_Call{Call: _e.mock.On("UpdatePostgresBackupConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_UpdatePostgresBackupConfig_Call) Run(run func(params *database.UpdatePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption)) *ClientService_UpdatePostgresBackupConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.UpdatePostgresBackupConfigParams
		if args[0] != nil {
			arg0 = args[0].(*database.UpdatePostgresBackupConfigParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []database.ClientOption
		var variadicArgs []database.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]database.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_UpdatePostgresBackupConfig_Call) Return(updatePostgresBackupConfigOK *database.UpdatePostgresBackupConfigOK, err error) *ClientService_UpdatePostgresBackupConfig_Call {
	_c.Call.Return(updatePostgresBackupConfigOK, err)
	return _c
}

func (_c *ClientService_UpdatePostgresBackupConfig_Call) RunAndReturn(run func(params *database.UpdatePostgresBackupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...database.ClientOption) (*database.UpdatePostgresBackupConfigOK, error)) *ClientService_UpdatePostgresBackupConfig_Call {
	_c.Call.Return(run)
	return _c
}
