// Code generated by mockery v2.8.0. DO NOT EDIT.

package ip

import (
	ip "github.com/fi-ts/cloud-go/api/client/ip"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// AllocateIP provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AllocateIP(params *ip.AllocateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.AllocateIPCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ip.AllocateIPCreated
	if rf, ok := ret.Get(0).(func(*ip.AllocateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.AllocateIPCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.AllocateIPCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ip.AllocateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindIPs provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindIPs(params *ip.FindIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.FindIPsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ip.FindIPsOK
	if rf, ok := ret.Get(0).(func(*ip.FindIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.FindIPsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.FindIPsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ip.FindIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FreeIP provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FreeIP(params *ip.FreeIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.FreeIPOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ip.FreeIPOK
	if rf, ok := ret.Get(0).(func(*ip.FreeIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.FreeIPOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.FreeIPOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ip.FreeIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIP provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetIP(params *ip.GetIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.GetIPOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ip.GetIPOK
	if rf, ok := ret.Get(0).(func(*ip.GetIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.GetIPOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.GetIPOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ip.GetIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPs provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListIPs(params *ip.ListIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.ListIPsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ip.ListIPsOK
	if rf, ok := ret.Get(0).(func(*ip.ListIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.ListIPsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.ListIPsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ip.ListIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateIP provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateIP(params *ip.UpdateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.UpdateIPOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ip.UpdateIPOK
	if rf, ok := ret.Get(0).(func(*ip.UpdateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.UpdateIPOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.UpdateIPOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ip.UpdateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
