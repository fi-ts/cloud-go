// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ip

import (
	"github.com/fi-ts/cloud-go/api/client/ip"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// AllocateIP provides a mock function for the type ClientService
func (_mock *ClientService) AllocateIP(params *ip.AllocateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.AllocateIPCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AllocateIP")
	}

	var r0 *ip.AllocateIPCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ip.AllocateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) (*ip.AllocateIPCreated, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ip.AllocateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.AllocateIPCreated); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.AllocateIPCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ip.AllocateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_AllocateIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocateIP'
type ClientService_AllocateIP_Call struct {
	*mock.Call
}

// AllocateIP is a helper method to define mock.On call
//   - params *ip.AllocateIPParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ip.ClientOption
func (_e *ClientService_Expecter) AllocateIP(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_AllocateIP_Call {
	return &ClientService_AllocateIP_Call{Call: _e.mock.On("AllocateIP",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_AllocateIP_Call) Run(run func(params *ip.AllocateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption)) *ClientService_AllocateIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ip.AllocateIPParams
		if args[0] != nil {
			arg0 = args[0].(*ip.AllocateIPParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []ip.ClientOption
		var variadicArgs []ip.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ip.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_AllocateIP_Call) Return(allocateIPCreated *ip.AllocateIPCreated, err error) *ClientService_AllocateIP_Call {
	_c.Call.Return(allocateIPCreated, err)
	return _c
}

func (_c *ClientService_AllocateIP_Call) RunAndReturn(run func(params *ip.AllocateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.AllocateIPCreated, error)) *ClientService_AllocateIP_Call {
	_c.Call.Return(run)
	return _c
}

// FindIPs provides a mock function for the type ClientService
func (_mock *ClientService) FindIPs(params *ip.FindIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.FindIPsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindIPs")
	}

	var r0 *ip.FindIPsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ip.FindIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) (*ip.FindIPsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ip.FindIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.FindIPsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.FindIPsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ip.FindIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindIPs'
type ClientService_FindIPs_Call struct {
	*mock.Call
}

// FindIPs is a helper method to define mock.On call
//   - params *ip.FindIPsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ip.ClientOption
func (_e *ClientService_Expecter) FindIPs(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindIPs_Call {
	return &ClientService_FindIPs_Call{Call: _e.mock.On("FindIPs",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindIPs_Call) Run(run func(params *ip.FindIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption)) *ClientService_FindIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ip.FindIPsParams
		if args[0] != nil {
			arg0 = args[0].(*ip.FindIPsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []ip.ClientOption
		var variadicArgs []ip.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ip.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindIPs_Call) Return(findIPsOK *ip.FindIPsOK, err error) *ClientService_FindIPs_Call {
	_c.Call.Return(findIPsOK, err)
	return _c
}

func (_c *ClientService_FindIPs_Call) RunAndReturn(run func(params *ip.FindIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.FindIPsOK, error)) *ClientService_FindIPs_Call {
	_c.Call.Return(run)
	return _c
}

// FreeIP provides a mock function for the type ClientService
func (_mock *ClientService) FreeIP(params *ip.FreeIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.FreeIPOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FreeIP")
	}

	var r0 *ip.FreeIPOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ip.FreeIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) (*ip.FreeIPOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ip.FreeIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.FreeIPOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.FreeIPOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ip.FreeIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FreeIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FreeIP'
type ClientService_FreeIP_Call struct {
	*mock.Call
}

// FreeIP is a helper method to define mock.On call
//   - params *ip.FreeIPParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ip.ClientOption
func (_e *ClientService_Expecter) FreeIP(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FreeIP_Call {
	return &ClientService_FreeIP_Call{Call: _e.mock.On("FreeIP",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FreeIP_Call) Run(run func(params *ip.FreeIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption)) *ClientService_FreeIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ip.FreeIPParams
		if args[0] != nil {
			arg0 = args[0].(*ip.FreeIPParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []ip.ClientOption
		var variadicArgs []ip.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ip.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FreeIP_Call) Return(freeIPOK *ip.FreeIPOK, err error) *ClientService_FreeIP_Call {
	_c.Call.Return(freeIPOK, err)
	return _c
}

func (_c *ClientService_FreeIP_Call) RunAndReturn(run func(params *ip.FreeIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.FreeIPOK, error)) *ClientService_FreeIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetIP provides a mock function for the type ClientService
func (_mock *ClientService) GetIP(params *ip.GetIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.GetIPOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetIP")
	}

	var r0 *ip.GetIPOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ip.GetIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) (*ip.GetIPOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ip.GetIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.GetIPOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.GetIPOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ip.GetIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIP'
type ClientService_GetIP_Call struct {
	*mock.Call
}

// GetIP is a helper method to define mock.On call
//   - params *ip.GetIPParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ip.ClientOption
func (_e *ClientService_Expecter) GetIP(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetIP_Call {
	return &ClientService_GetIP_Call{Call: _e.mock.On("GetIP",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetIP_Call) Run(run func(params *ip.GetIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption)) *ClientService_GetIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ip.GetIPParams
		if args[0] != nil {
			arg0 = args[0].(*ip.GetIPParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []ip.ClientOption
		var variadicArgs []ip.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ip.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetIP_Call) Return(getIPOK *ip.GetIPOK, err error) *ClientService_GetIP_Call {
	_c.Call.Return(getIPOK, err)
	return _c
}

func (_c *ClientService_GetIP_Call) RunAndReturn(run func(params *ip.GetIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.GetIPOK, error)) *ClientService_GetIP_Call {
	_c.Call.Return(run)
	return _c
}

// ListIPs provides a mock function for the type ClientService
func (_mock *ClientService) ListIPs(params *ip.ListIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.ListIPsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListIPs")
	}

	var r0 *ip.ListIPsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ip.ListIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) (*ip.ListIPsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ip.ListIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.ListIPsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.ListIPsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ip.ListIPsParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIPs'
type ClientService_ListIPs_Call struct {
	*mock.Call
}

// ListIPs is a helper method to define mock.On call
//   - params *ip.ListIPsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ip.ClientOption
func (_e *ClientService_Expecter) ListIPs(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListIPs_Call {
	return &ClientService_ListIPs_Call{Call: _e.mock.On("ListIPs",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListIPs_Call) Run(run func(params *ip.ListIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption)) *ClientService_ListIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ip.ListIPsParams
		if args[0] != nil {
			arg0 = args[0].(*ip.ListIPsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []ip.ClientOption
		var variadicArgs []ip.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ip.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListIPs_Call) Return(listIPsOK *ip.ListIPsOK, err error) *ClientService_ListIPs_Call {
	_c.Call.Return(listIPsOK, err)
	return _c
}

func (_c *ClientService_ListIPs_Call) RunAndReturn(run func(params *ip.ListIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.ListIPsOK, error)) *ClientService_ListIPs_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// UpdateIP provides a mock function for the type ClientService
func (_mock *ClientService) UpdateIP(params *ip.UpdateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.UpdateIPOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateIP")
	}

	var r0 *ip.UpdateIPOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ip.UpdateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) (*ip.UpdateIPOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ip.UpdateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) *ip.UpdateIPOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ip.UpdateIPOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ip.UpdateIPParams, runtime.ClientAuthInfoWriter, ...ip.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_UpdateIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIP'
type ClientService_UpdateIP_Call struct {
	*mock.Call
}

// UpdateIP is a helper method to define mock.On call
//   - params *ip.UpdateIPParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ip.ClientOption
func (_e *ClientService_Expecter) UpdateIP(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_UpdateIP_Call {
	return &ClientService_UpdateIP_Call{Call: _e.mock.On("UpdateIP",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_UpdateIP_Call) Run(run func(params *ip.UpdateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption)) *ClientService_UpdateIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ip.UpdateIPParams
		if args[0] != nil {
			arg0 = args[0].(*ip.UpdateIPParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []ip.ClientOption
		var variadicArgs []ip.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]ip.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_UpdateIP_Call) Return(updateIPOK *ip.UpdateIPOK, err error) *ClientService_UpdateIP_Call {
	_c.Call.Return(updateIPOK, err)
	return _c
}

func (_c *ClientService_UpdateIP_Call) RunAndReturn(run func(params *ip.UpdateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ip.ClientOption) (*ip.UpdateIPOK, error)) *ClientService_UpdateIP_Call {
	_c.Call.Return(run)
	return _c
}
