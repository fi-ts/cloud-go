// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tenant

import (
	"github.com/fi-ts/cloud-go/api/client/tenant"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// FindTenants provides a mock function for the type ClientService
func (_mock *ClientService) FindTenants(params *tenant.FindTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.FindTenantsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindTenants")
	}

	var r0 *tenant.FindTenantsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*tenant.FindTenantsParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) (*tenant.FindTenantsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*tenant.FindTenantsParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) *tenant.FindTenantsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.FindTenantsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*tenant.FindTenantsParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTenants'
type ClientService_FindTenants_Call struct {
	*mock.Call
}

// FindTenants is a helper method to define mock.On call
//   - params *tenant.FindTenantsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...tenant.ClientOption
func (_e *ClientService_Expecter) FindTenants(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindTenants_Call {
	return &ClientService_FindTenants_Call{Call: _e.mock.On("FindTenants",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindTenants_Call) Run(run func(params *tenant.FindTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption)) *ClientService_FindTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *tenant.FindTenantsParams
		if args[0] != nil {
			arg0 = args[0].(*tenant.FindTenantsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []tenant.ClientOption
		var variadicArgs []tenant.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]tenant.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindTenants_Call) Return(findTenantsOK *tenant.FindTenantsOK, err error) *ClientService_FindTenants_Call {
	_c.Call.Return(findTenantsOK, err)
	return _c
}

func (_c *ClientService_FindTenants_Call) RunAndReturn(run func(params *tenant.FindTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.FindTenantsOK, error)) *ClientService_FindTenants_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenant provides a mock function for the type ClientService
func (_mock *ClientService) GetTenant(params *tenant.GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.GetTenantOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *tenant.GetTenantOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*tenant.GetTenantParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) (*tenant.GetTenantOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*tenant.GetTenantParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) *tenant.GetTenantOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.GetTenantOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*tenant.GetTenantParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type ClientService_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//   - params *tenant.GetTenantParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...tenant.ClientOption
func (_e *ClientService_Expecter) GetTenant(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetTenant_Call {
	return &ClientService_GetTenant_Call{Call: _e.mock.On("GetTenant",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetTenant_Call) Run(run func(params *tenant.GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption)) *ClientService_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *tenant.GetTenantParams
		if args[0] != nil {
			arg0 = args[0].(*tenant.GetTenantParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []tenant.ClientOption
		var variadicArgs []tenant.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]tenant.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetTenant_Call) Return(getTenantOK *tenant.GetTenantOK, err error) *ClientService_GetTenant_Call {
	_c.Call.Return(getTenantOK, err)
	return _c
}

func (_c *ClientService_GetTenant_Call) RunAndReturn(run func(params *tenant.GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.GetTenantOK, error)) *ClientService_GetTenant_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenants provides a mock function for the type ClientService
func (_mock *ClientService) ListTenants(params *tenant.ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.ListTenantsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListTenants")
	}

	var r0 *tenant.ListTenantsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*tenant.ListTenantsParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) (*tenant.ListTenantsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*tenant.ListTenantsParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) *tenant.ListTenantsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.ListTenantsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*tenant.ListTenantsParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type ClientService_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//   - params *tenant.ListTenantsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...tenant.ClientOption
func (_e *ClientService_Expecter) ListTenants(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListTenants_Call {
	return &ClientService_ListTenants_Call{Call: _e.mock.On("ListTenants",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListTenants_Call) Run(run func(params *tenant.ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption)) *ClientService_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *tenant.ListTenantsParams
		if args[0] != nil {
			arg0 = args[0].(*tenant.ListTenantsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []tenant.ClientOption
		var variadicArgs []tenant.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]tenant.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListTenants_Call) Return(listTenantsOK *tenant.ListTenantsOK, err error) *ClientService_ListTenants_Call {
	_c.Call.Return(listTenantsOK, err)
	return _c
}

func (_c *ClientService_ListTenants_Call) RunAndReturn(run func(params *tenant.ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.ListTenantsOK, error)) *ClientService_ListTenants_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// UpdateTenant provides a mock function for the type ClientService
func (_mock *ClientService) UpdateTenant(params *tenant.UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.UpdateTenantOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenant")
	}

	var r0 *tenant.UpdateTenantOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*tenant.UpdateTenantParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) (*tenant.UpdateTenantOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*tenant.UpdateTenantParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) *tenant.UpdateTenantOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.UpdateTenantOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*tenant.UpdateTenantParams, runtime.ClientAuthInfoWriter, ...tenant.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_UpdateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenant'
type ClientService_UpdateTenant_Call struct {
	*mock.Call
}

// UpdateTenant is a helper method to define mock.On call
//   - params *tenant.UpdateTenantParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...tenant.ClientOption
func (_e *ClientService_Expecter) UpdateTenant(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_UpdateTenant_Call {
	return &ClientService_UpdateTenant_Call{Call: _e.mock.On("UpdateTenant",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_UpdateTenant_Call) Run(run func(params *tenant.UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption)) *ClientService_UpdateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *tenant.UpdateTenantParams
		if args[0] != nil {
			arg0 = args[0].(*tenant.UpdateTenantParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []tenant.ClientOption
		var variadicArgs []tenant.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]tenant.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_UpdateTenant_Call) Return(updateTenantOK *tenant.UpdateTenantOK, err error) *ClientService_UpdateTenant_Call {
	_c.Call.Return(updateTenantOK, err)
	return _c
}

func (_c *ClientService_UpdateTenant_Call) RunAndReturn(run func(params *tenant.UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...tenant.ClientOption) (*tenant.UpdateTenantOK, error)) *ClientService_UpdateTenant_Call {
	_c.Call.Return(run)
	return _c
}
