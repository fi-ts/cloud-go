// Code generated by mockery v2.8.0. DO NOT EDIT.

package gateway

import (
	gateway "github.com/fi-ts/cloud-go/api/client/gateway"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ClientDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClientDelete(params *gateway.ClientDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ClientDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ClientDeleteOK
	if rf, ok := ret.Get(0).(func(*gateway.ClientDeleteParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ClientDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ClientDeleteOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ClientDeleteParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClientGet(params *gateway.ClientGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ClientGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ClientGetOK
	if rf, ok := ret.Get(0).(func(*gateway.ClientGetParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ClientGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ClientGetOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ClientGetParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientList provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClientList(params *gateway.ClientListParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ClientListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ClientListOK
	if rf, ok := ret.Get(0).(func(*gateway.ClientListParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ClientListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ClientListOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ClientListParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientListAll provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClientListAll(params *gateway.ClientListAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ClientListAllOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ClientListAllOK
	if rf, ok := ret.Get(0).(func(*gateway.ClientListAllParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ClientListAllOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ClientListAllOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ClientListAllParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientPatch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClientPatch(params *gateway.ClientPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ClientPatchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ClientPatchOK
	if rf, ok := ret.Get(0).(func(*gateway.ClientPatchParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ClientPatchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ClientPatchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ClientPatchParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientPost provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClientPost(params *gateway.ClientPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ClientPostCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ClientPostCreated
	if rf, ok := ret.Get(0).(func(*gateway.ClientPostParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ClientPostCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ClientPostCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ClientPostParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ServerDelete(params *gateway.ServerDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ServerDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ServerDeleteOK
	if rf, ok := ret.Get(0).(func(*gateway.ServerDeleteParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ServerDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ServerDeleteOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ServerDeleteParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ServerGet(params *gateway.ServerGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ServerGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ServerGetOK
	if rf, ok := ret.Get(0).(func(*gateway.ServerGetParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ServerGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ServerGetOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ServerGetParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerList provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ServerList(params *gateway.ServerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ServerListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ServerListOK
	if rf, ok := ret.Get(0).(func(*gateway.ServerListParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ServerListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ServerListOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ServerListParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerListAll provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ServerListAll(params *gateway.ServerListAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ServerListAllOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ServerListAllOK
	if rf, ok := ret.Get(0).(func(*gateway.ServerListAllParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ServerListAllOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ServerListAllOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ServerListAllParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerPatch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ServerPatch(params *gateway.ServerPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ServerPatchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ServerPatchOK
	if rf, ok := ret.Get(0).(func(*gateway.ServerPatchParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ServerPatchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ServerPatchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ServerPatchParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerPost provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ServerPost(params *gateway.ServerPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...gateway.ClientOption) (*gateway.ServerPostCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gateway.ServerPostCreated
	if rf, ok := ret.Get(0).(func(*gateway.ServerPostParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) *gateway.ServerPostCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.ServerPostCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gateway.ServerPostParams, runtime.ClientAuthInfoWriter, ...gateway.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
