// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package masterdata

import (
	"github.com/fi-ts/cloud-go/api/client/masterdata"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// GetMasterdata provides a mock function for the type ClientService
func (_mock *ClientService) GetMasterdata(params *masterdata.GetMasterdataParams, authInfo runtime.ClientAuthInfoWriter, opts ...masterdata.ClientOption) (*masterdata.GetMasterdataOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMasterdata")
	}

	var r0 *masterdata.GetMasterdataOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*masterdata.GetMasterdataParams, runtime.ClientAuthInfoWriter, ...masterdata.ClientOption) (*masterdata.GetMasterdataOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*masterdata.GetMasterdataParams, runtime.ClientAuthInfoWriter, ...masterdata.ClientOption) *masterdata.GetMasterdataOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*masterdata.GetMasterdataOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*masterdata.GetMasterdataParams, runtime.ClientAuthInfoWriter, ...masterdata.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetMasterdata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMasterdata'
type ClientService_GetMasterdata_Call struct {
	*mock.Call
}

// GetMasterdata is a helper method to define mock.On call
//   - params *masterdata.GetMasterdataParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...masterdata.ClientOption
func (_e *ClientService_Expecter) GetMasterdata(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetMasterdata_Call {
	return &ClientService_GetMasterdata_Call{Call: _e.mock.On("GetMasterdata",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetMasterdata_Call) Run(run func(params *masterdata.GetMasterdataParams, authInfo runtime.ClientAuthInfoWriter, opts ...masterdata.ClientOption)) *ClientService_GetMasterdata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *masterdata.GetMasterdataParams
		if args[0] != nil {
			arg0 = args[0].(*masterdata.GetMasterdataParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []masterdata.ClientOption
		var variadicArgs []masterdata.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]masterdata.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetMasterdata_Call) Return(getMasterdataOK *masterdata.GetMasterdataOK, err error) *ClientService_GetMasterdata_Call {
	_c.Call.Return(getMasterdataOK, err)
	return _c
}

func (_c *ClientService_GetMasterdata_Call) RunAndReturn(run func(params *masterdata.GetMasterdataParams, authInfo runtime.ClientAuthInfoWriter, opts ...masterdata.ClientOption) (*masterdata.GetMasterdataOK, error)) *ClientService_GetMasterdata_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}
