// Code generated by mockery v2.7.4. DO NOT EDIT.

package cluster

import (
	cluster "github.com/fi-ts/cloud-go/api/client/cluster"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateCluster(params *cluster.CreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.CreateClusterCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.CreateClusterCreated
	if rf, ok := ret.Get(0).(func(*cluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.CreateClusterCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.CreateClusterCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CycleMachine provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CycleMachine(params *cluster.CycleMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.CycleMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.CycleMachineOK
	if rf, ok := ret.Get(0).(func(*cluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.CycleMachineOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.CycleMachineOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteCluster(params *cluster.DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.DeleteClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.DeleteClusterOK
	if rf, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.DeleteClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.DeleteClusterOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindCluster(params *cluster.FindClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.FindClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.FindClusterOK
	if rf, ok := ret.Get(0).(func(*cluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.FindClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.FindClusterOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindClusters provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindClusters(params *cluster.FindClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.FindClustersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.FindClustersOK
	if rf, ok := ret.Get(0).(func(*cluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.FindClustersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.FindClustersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterKubeconfigTpl provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetClusterKubeconfigTpl(params *cluster.GetClusterKubeconfigTplParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetClusterKubeconfigTplOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.GetClusterKubeconfigTplOK
	if rf, ok := ret.Get(0).(func(*cluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.GetClusterKubeconfigTplOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetClusterKubeconfigTplOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSSHKeyPair provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetSSHKeyPair(params *cluster.GetSSHKeyPairParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetSSHKeyPairOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.GetSSHKeyPairOK
	if rf, ok := ret.Get(0).(func(*cluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.GetSSHKeyPairOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetSSHKeyPairOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListClusters(params *cluster.ListClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ListClustersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ListClustersOK
	if rf, ok := ret.Get(0).(func(*cluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ListClustersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListClustersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConstraints provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListConstraints(params *cluster.ListConstraintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ListConstraintsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ListConstraintsOK
	if rf, ok := ret.Get(0).(func(*cluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ListConstraintsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListConstraintsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ReconcileCluster(params *cluster.ReconcileClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ReconcileClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ReconcileClusterOK
	if rf, ok := ret.Get(0).(func(*cluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ReconcileClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ReconcileClusterOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReinstallMachine provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ReinstallMachine(params *cluster.ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ReinstallMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ReinstallMachineOK
	if rf, ok := ret.Get(0).(func(*cluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ReinstallMachineOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ReinstallMachineOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetMachine provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ResetMachine(params *cluster.ResetMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ResetMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ResetMachineOK
	if rf, ok := ret.Get(0).(func(*cluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ResetMachineOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ResetMachineOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateCluster(params *cluster.UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.UpdateClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.UpdateClusterOK
	if rf, ok := ret.Get(0).(func(*cluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.UpdateClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.UpdateClusterOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
