// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cluster

import (
	"github.com/fi-ts/cloud-go/api/client/cluster"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// CreateCluster provides a mock function for the type ClientService
func (_mock *ClientService) CreateCluster(params *cluster.CreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.CreateClusterCreated, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *cluster.CreateClusterCreated
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.CreateClusterCreated, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.CreateClusterCreated); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.CreateClusterCreated)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type ClientService_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
//   - params *cluster.CreateClusterParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) CreateCluster(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_CreateCluster_Call {
	return &ClientService_CreateCluster_Call{Call: _e.mock.On("CreateCluster",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_CreateCluster_Call) Run(run func(params *cluster.CreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.CreateClusterParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.CreateClusterParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_CreateCluster_Call) Return(createClusterCreated *cluster.CreateClusterCreated, err error) *ClientService_CreateCluster_Call {
	_c.Call.Return(createClusterCreated, err)
	return _c
}

func (_c *ClientService_CreateCluster_Call) RunAndReturn(run func(params *cluster.CreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.CreateClusterCreated, error)) *ClientService_CreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// CycleMachine provides a mock function for the type ClientService
func (_mock *ClientService) CycleMachine(params *cluster.CycleMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.CycleMachineOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CycleMachine")
	}

	var r0 *cluster.CycleMachineOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.CycleMachineOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.CycleMachineOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.CycleMachineOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_CycleMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CycleMachine'
type ClientService_CycleMachine_Call struct {
	*mock.Call
}

// CycleMachine is a helper method to define mock.On call
//   - params *cluster.CycleMachineParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) CycleMachine(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_CycleMachine_Call {
	return &ClientService_CycleMachine_Call{Call: _e.mock.On("CycleMachine",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_CycleMachine_Call) Run(run func(params *cluster.CycleMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_CycleMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.CycleMachineParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.CycleMachineParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_CycleMachine_Call) Return(cycleMachineOK *cluster.CycleMachineOK, err error) *ClientService_CycleMachine_Call {
	_c.Call.Return(cycleMachineOK, err)
	return _c
}

func (_c *ClientService_CycleMachine_Call) RunAndReturn(run func(params *cluster.CycleMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.CycleMachineOK, error)) *ClientService_CycleMachine_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function for the type ClientService
func (_mock *ClientService) DeleteCluster(params *cluster.DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.DeleteClusterOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *cluster.DeleteClusterOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.DeleteClusterOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.DeleteClusterOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.DeleteClusterOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type ClientService_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - params *cluster.DeleteClusterParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) DeleteCluster(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_DeleteCluster_Call {
	return &ClientService_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_DeleteCluster_Call) Run(run func(params *cluster.DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.DeleteClusterParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.DeleteClusterParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_DeleteCluster_Call) Return(deleteClusterOK *cluster.DeleteClusterOK, err error) *ClientService_DeleteCluster_Call {
	_c.Call.Return(deleteClusterOK, err)
	return _c
}

func (_c *ClientService_DeleteCluster_Call) RunAndReturn(run func(params *cluster.DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.DeleteClusterOK, error)) *ClientService_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// FindCluster provides a mock function for the type ClientService
func (_mock *ClientService) FindCluster(params *cluster.FindClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.FindClusterOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindCluster")
	}

	var r0 *cluster.FindClusterOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.FindClusterOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.FindClusterOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.FindClusterOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCluster'
type ClientService_FindCluster_Call struct {
	*mock.Call
}

// FindCluster is a helper method to define mock.On call
//   - params *cluster.FindClusterParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) FindCluster(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindCluster_Call {
	return &ClientService_FindCluster_Call{Call: _e.mock.On("FindCluster",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindCluster_Call) Run(run func(params *cluster.FindClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_FindCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.FindClusterParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.FindClusterParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindCluster_Call) Return(findClusterOK *cluster.FindClusterOK, err error) *ClientService_FindCluster_Call {
	_c.Call.Return(findClusterOK, err)
	return _c
}

func (_c *ClientService_FindCluster_Call) RunAndReturn(run func(params *cluster.FindClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.FindClusterOK, error)) *ClientService_FindCluster_Call {
	_c.Call.Return(run)
	return _c
}

// FindClusters provides a mock function for the type ClientService
func (_mock *ClientService) FindClusters(params *cluster.FindClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.FindClustersOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindClusters")
	}

	var r0 *cluster.FindClustersOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.FindClustersOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.FindClustersOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.FindClustersOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_FindClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClusters'
type ClientService_FindClusters_Call struct {
	*mock.Call
}

// FindClusters is a helper method to define mock.On call
//   - params *cluster.FindClustersParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) FindClusters(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_FindClusters_Call {
	return &ClientService_FindClusters_Call{Call: _e.mock.On("FindClusters",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_FindClusters_Call) Run(run func(params *cluster.FindClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_FindClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.FindClustersParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.FindClustersParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_FindClusters_Call) Return(findClustersOK *cluster.FindClustersOK, err error) *ClientService_FindClusters_Call {
	_c.Call.Return(findClustersOK, err)
	return _c
}

func (_c *ClientService_FindClusters_Call) RunAndReturn(run func(params *cluster.FindClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.FindClustersOK, error)) *ClientService_FindClusters_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditPolicy provides a mock function for the type ClientService
func (_mock *ClientService) GetAuditPolicy(params *cluster.GetAuditPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetAuditPolicyOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAuditPolicy")
	}

	var r0 *cluster.GetAuditPolicyOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetAuditPolicyParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.GetAuditPolicyOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetAuditPolicyParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.GetAuditPolicyOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetAuditPolicyOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.GetAuditPolicyParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetAuditPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditPolicy'
type ClientService_GetAuditPolicy_Call struct {
	*mock.Call
}

// GetAuditPolicy is a helper method to define mock.On call
//   - params *cluster.GetAuditPolicyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) GetAuditPolicy(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetAuditPolicy_Call {
	return &ClientService_GetAuditPolicy_Call{Call: _e.mock.On("GetAuditPolicy",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetAuditPolicy_Call) Run(run func(params *cluster.GetAuditPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_GetAuditPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.GetAuditPolicyParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.GetAuditPolicyParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetAuditPolicy_Call) Return(getAuditPolicyOK *cluster.GetAuditPolicyOK, err error) *ClientService_GetAuditPolicy_Call {
	_c.Call.Return(getAuditPolicyOK, err)
	return _c
}

func (_c *ClientService_GetAuditPolicy_Call) RunAndReturn(run func(params *cluster.GetAuditPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetAuditPolicyOK, error)) *ClientService_GetAuditPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterKubeconfigTpl provides a mock function for the type ClientService
func (_mock *ClientService) GetClusterKubeconfigTpl(params *cluster.GetClusterKubeconfigTplParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetClusterKubeconfigTplOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetClusterKubeconfigTpl")
	}

	var r0 *cluster.GetClusterKubeconfigTplOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.GetClusterKubeconfigTplOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.GetClusterKubeconfigTplOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetClusterKubeconfigTplOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetClusterKubeconfigTpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterKubeconfigTpl'
type ClientService_GetClusterKubeconfigTpl_Call struct {
	*mock.Call
}

// GetClusterKubeconfigTpl is a helper method to define mock.On call
//   - params *cluster.GetClusterKubeconfigTplParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) GetClusterKubeconfigTpl(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetClusterKubeconfigTpl_Call {
	return &ClientService_GetClusterKubeconfigTpl_Call{Call: _e.mock.On("GetClusterKubeconfigTpl",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetClusterKubeconfigTpl_Call) Run(run func(params *cluster.GetClusterKubeconfigTplParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_GetClusterKubeconfigTpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.GetClusterKubeconfigTplParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.GetClusterKubeconfigTplParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetClusterKubeconfigTpl_Call) Return(getClusterKubeconfigTplOK *cluster.GetClusterKubeconfigTplOK, err error) *ClientService_GetClusterKubeconfigTpl_Call {
	_c.Call.Return(getClusterKubeconfigTplOK, err)
	return _c
}

func (_c *ClientService_GetClusterKubeconfigTpl_Call) RunAndReturn(run func(params *cluster.GetClusterKubeconfigTplParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetClusterKubeconfigTplOK, error)) *ClientService_GetClusterKubeconfigTpl_Call {
	_c.Call.Return(run)
	return _c
}

// GetMonitoringSecret provides a mock function for the type ClientService
func (_mock *ClientService) GetMonitoringSecret(params *cluster.GetMonitoringSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetMonitoringSecretOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoringSecret")
	}

	var r0 *cluster.GetMonitoringSecretOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetMonitoringSecretParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.GetMonitoringSecretOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetMonitoringSecretParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.GetMonitoringSecretOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetMonitoringSecretOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.GetMonitoringSecretParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetMonitoringSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMonitoringSecret'
type ClientService_GetMonitoringSecret_Call struct {
	*mock.Call
}

// GetMonitoringSecret is a helper method to define mock.On call
//   - params *cluster.GetMonitoringSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) GetMonitoringSecret(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetMonitoringSecret_Call {
	return &ClientService_GetMonitoringSecret_Call{Call: _e.mock.On("GetMonitoringSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetMonitoringSecret_Call) Run(run func(params *cluster.GetMonitoringSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_GetMonitoringSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.GetMonitoringSecretParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.GetMonitoringSecretParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetMonitoringSecret_Call) Return(getMonitoringSecretOK *cluster.GetMonitoringSecretOK, err error) *ClientService_GetMonitoringSecret_Call {
	_c.Call.Return(getMonitoringSecretOK, err)
	return _c
}

func (_c *ClientService_GetMonitoringSecret_Call) RunAndReturn(run func(params *cluster.GetMonitoringSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetMonitoringSecretOK, error)) *ClientService_GetMonitoringSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSHKeyPair provides a mock function for the type ClientService
func (_mock *ClientService) GetSSHKeyPair(params *cluster.GetSSHKeyPairParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetSSHKeyPairOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSSHKeyPair")
	}

	var r0 *cluster.GetSSHKeyPairOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.GetSSHKeyPairOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.GetSSHKeyPairOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetSSHKeyPairOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_GetSSHKeyPair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSHKeyPair'
type ClientService_GetSSHKeyPair_Call struct {
	*mock.Call
}

// GetSSHKeyPair is a helper method to define mock.On call
//   - params *cluster.GetSSHKeyPairParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) GetSSHKeyPair(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_GetSSHKeyPair_Call {
	return &ClientService_GetSSHKeyPair_Call{Call: _e.mock.On("GetSSHKeyPair",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_GetSSHKeyPair_Call) Run(run func(params *cluster.GetSSHKeyPairParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_GetSSHKeyPair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.GetSSHKeyPairParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.GetSSHKeyPairParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_GetSSHKeyPair_Call) Return(getSSHKeyPairOK *cluster.GetSSHKeyPairOK, err error) *ClientService_GetSSHKeyPair_Call {
	_c.Call.Return(getSSHKeyPairOK, err)
	return _c
}

func (_c *ClientService_GetSSHKeyPair_Call) RunAndReturn(run func(params *cluster.GetSSHKeyPairParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.GetSSHKeyPairOK, error)) *ClientService_GetSSHKeyPair_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function for the type ClientService
func (_mock *ClientService) ListClusters(params *cluster.ListClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ListClustersOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *cluster.ListClustersOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.ListClustersOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ListClustersOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListClustersOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type ClientService_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - params *cluster.ListClustersParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) ListClusters(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListClusters_Call {
	return &ClientService_ListClusters_Call{Call: _e.mock.On("ListClusters",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListClusters_Call) Run(run func(params *cluster.ListClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.ListClustersParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.ListClustersParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListClusters_Call) Return(listClustersOK *cluster.ListClustersOK, err error) *ClientService_ListClusters_Call {
	_c.Call.Return(listClustersOK, err)
	return _c
}

func (_c *ClientService_ListClusters_Call) RunAndReturn(run func(params *cluster.ListClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ListClustersOK, error)) *ClientService_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListConstraints provides a mock function for the type ClientService
func (_mock *ClientService) ListConstraints(params *cluster.ListConstraintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ListConstraintsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConstraints")
	}

	var r0 *cluster.ListConstraintsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.ListConstraintsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ListConstraintsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListConstraintsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ListConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConstraints'
type ClientService_ListConstraints_Call struct {
	*mock.Call
}

// ListConstraints is a helper method to define mock.On call
//   - params *cluster.ListConstraintsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) ListConstraints(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ListConstraints_Call {
	return &ClientService_ListConstraints_Call{Call: _e.mock.On("ListConstraints",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ListConstraints_Call) Run(run func(params *cluster.ListConstraintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_ListConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.ListConstraintsParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.ListConstraintsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ListConstraints_Call) Return(listConstraintsOK *cluster.ListConstraintsOK, err error) *ClientService_ListConstraints_Call {
	_c.Call.Return(listConstraintsOK, err)
	return _c
}

func (_c *ClientService_ListConstraints_Call) RunAndReturn(run func(params *cluster.ListConstraintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ListConstraintsOK, error)) *ClientService_ListConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// ReconcileCluster provides a mock function for the type ClientService
func (_mock *ClientService) ReconcileCluster(params *cluster.ReconcileClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ReconcileClusterOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ReconcileCluster")
	}

	var r0 *cluster.ReconcileClusterOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.ReconcileClusterOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ReconcileClusterOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ReconcileClusterOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ReconcileCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileCluster'
type ClientService_ReconcileCluster_Call struct {
	*mock.Call
}

// ReconcileCluster is a helper method to define mock.On call
//   - params *cluster.ReconcileClusterParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) ReconcileCluster(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ReconcileCluster_Call {
	return &ClientService_ReconcileCluster_Call{Call: _e.mock.On("ReconcileCluster",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ReconcileCluster_Call) Run(run func(params *cluster.ReconcileClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_ReconcileCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.ReconcileClusterParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.ReconcileClusterParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ReconcileCluster_Call) Return(reconcileClusterOK *cluster.ReconcileClusterOK, err error) *ClientService_ReconcileCluster_Call {
	_c.Call.Return(reconcileClusterOK, err)
	return _c
}

func (_c *ClientService_ReconcileCluster_Call) RunAndReturn(run func(params *cluster.ReconcileClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ReconcileClusterOK, error)) *ClientService_ReconcileCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ReinstallMachine provides a mock function for the type ClientService
func (_mock *ClientService) ReinstallMachine(params *cluster.ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ReinstallMachineOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ReinstallMachine")
	}

	var r0 *cluster.ReinstallMachineOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.ReinstallMachineOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ReinstallMachineOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ReinstallMachineOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ReinstallMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReinstallMachine'
type ClientService_ReinstallMachine_Call struct {
	*mock.Call
}

// ReinstallMachine is a helper method to define mock.On call
//   - params *cluster.ReinstallMachineParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) ReinstallMachine(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ReinstallMachine_Call {
	return &ClientService_ReinstallMachine_Call{Call: _e.mock.On("ReinstallMachine",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ReinstallMachine_Call) Run(run func(params *cluster.ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_ReinstallMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.ReinstallMachineParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.ReinstallMachineParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ReinstallMachine_Call) Return(reinstallMachineOK *cluster.ReinstallMachineOK, err error) *ClientService_ReinstallMachine_Call {
	_c.Call.Return(reinstallMachineOK, err)
	return _c
}

func (_c *ClientService_ReinstallMachine_Call) RunAndReturn(run func(params *cluster.ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ReinstallMachineOK, error)) *ClientService_ReinstallMachine_Call {
	_c.Call.Return(run)
	return _c
}

// ResetMachine provides a mock function for the type ClientService
func (_mock *ClientService) ResetMachine(params *cluster.ResetMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ResetMachineOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ResetMachine")
	}

	var r0 *cluster.ResetMachineOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.ResetMachineOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.ResetMachineOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ResetMachineOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_ResetMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetMachine'
type ClientService_ResetMachine_Call struct {
	*mock.Call
}

// ResetMachine is a helper method to define mock.On call
//   - params *cluster.ResetMachineParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) ResetMachine(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_ResetMachine_Call {
	return &ClientService_ResetMachine_Call{Call: _e.mock.On("ResetMachine",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_ResetMachine_Call) Run(run func(params *cluster.ResetMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_ResetMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.ResetMachineParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.ResetMachineParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_ResetMachine_Call) Return(resetMachineOK *cluster.ResetMachineOK, err error) *ClientService_ResetMachine_Call {
	_c.Call.Return(resetMachineOK, err)
	return _c
}

func (_c *ClientService_ResetMachine_Call) RunAndReturn(run func(params *cluster.ResetMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.ResetMachineOK, error)) *ClientService_ResetMachine_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// UpdateCluster provides a mock function for the type ClientService
func (_mock *ClientService) UpdateCluster(params *cluster.UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.UpdateClusterOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *cluster.UpdateClusterOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) (*cluster.UpdateClusterOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*cluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) *cluster.UpdateClusterOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.UpdateClusterOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...cluster.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type ClientService_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//   - params *cluster.UpdateClusterParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...cluster.ClientOption
func (_e *ClientService_Expecter) UpdateCluster(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_UpdateCluster_Call {
	return &ClientService_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_UpdateCluster_Call) Run(run func(params *cluster.UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption)) *ClientService_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cluster.UpdateClusterParams
		if args[0] != nil {
			arg0 = args[0].(*cluster.UpdateClusterParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []cluster.ClientOption
		var variadicArgs []cluster.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cluster.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_UpdateCluster_Call) Return(updateClusterOK *cluster.UpdateClusterOK, err error) *ClientService_UpdateCluster_Call {
	_c.Call.Return(updateClusterOK, err)
	return _c
}

func (_c *ClientService_UpdateCluster_Call) RunAndReturn(run func(params *cluster.UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...cluster.ClientOption) (*cluster.UpdateClusterOK, error)) *ClientService_UpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}
