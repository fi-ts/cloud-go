// Code generated by mockery v2.46.1. DO NOT EDIT.

package cluster

import (
	clientcluster "github.com/fi-ts/cloud-go/api/client/cluster"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateCluster(params *clientcluster.CreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.CreateClusterCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *clientcluster.CreateClusterCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.CreateClusterCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.CreateClusterCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.CreateClusterCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.CreateClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CycleMachine provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CycleMachine(params *clientcluster.CycleMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.CycleMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CycleMachine")
	}

	var r0 *clientcluster.CycleMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.CycleMachineOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.CycleMachineOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.CycleMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.CycleMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteCluster(params *clientcluster.DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.DeleteClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *clientcluster.DeleteClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.DeleteClusterOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.DeleteClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.DeleteClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.DeleteClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindCluster(params *clientcluster.FindClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.FindClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindCluster")
	}

	var r0 *clientcluster.FindClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.FindClusterOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.FindClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.FindClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.FindClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindClusters provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindClusters(params *clientcluster.FindClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.FindClustersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindClusters")
	}

	var r0 *clientcluster.FindClustersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.FindClustersOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.FindClustersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.FindClustersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.FindClustersParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuditPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetAuditPolicy(params *clientcluster.GetAuditPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.GetAuditPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditPolicy")
	}

	var r0 *clientcluster.GetAuditPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.GetAuditPolicyParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.GetAuditPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.GetAuditPolicyParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.GetAuditPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.GetAuditPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.GetAuditPolicyParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterKubeconfigTpl provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetClusterKubeconfigTpl(params *clientcluster.GetClusterKubeconfigTplParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.GetClusterKubeconfigTplOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterKubeconfigTpl")
	}

	var r0 *clientcluster.GetClusterKubeconfigTplOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.GetClusterKubeconfigTplOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.GetClusterKubeconfigTplOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.GetClusterKubeconfigTplOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.GetClusterKubeconfigTplParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitoringSecret provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetMonitoringSecret(params *clientcluster.GetMonitoringSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.GetMonitoringSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoringSecret")
	}

	var r0 *clientcluster.GetMonitoringSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.GetMonitoringSecretParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.GetMonitoringSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.GetMonitoringSecretParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.GetMonitoringSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.GetMonitoringSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.GetMonitoringSecretParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSSHKeyPair provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetSSHKeyPair(params *clientcluster.GetSSHKeyPairParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.GetSSHKeyPairOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSSHKeyPair")
	}

	var r0 *clientcluster.GetSSHKeyPairOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.GetSSHKeyPairOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.GetSSHKeyPairOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.GetSSHKeyPairOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.GetSSHKeyPairParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListClusters(params *clientcluster.ListClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.ListClustersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *clientcluster.ListClustersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.ListClustersOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.ListClustersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.ListClustersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.ListClustersParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConstraints provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListConstraints(params *clientcluster.ListConstraintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.ListConstraintsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConstraints")
	}

	var r0 *clientcluster.ListConstraintsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.ListConstraintsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.ListConstraintsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.ListConstraintsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.ListConstraintsParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ReconcileCluster(params *clientcluster.ReconcileClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.ReconcileClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileCluster")
	}

	var r0 *clientcluster.ReconcileClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.ReconcileClusterOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.ReconcileClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.ReconcileClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.ReconcileClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReinstallMachine provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ReinstallMachine(params *clientcluster.ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.ReinstallMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReinstallMachine")
	}

	var r0 *clientcluster.ReinstallMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.ReinstallMachineOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.ReinstallMachineOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.ReinstallMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.ReinstallMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetMachine provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ResetMachine(params *clientcluster.ResetMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.ResetMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetMachine")
	}

	var r0 *clientcluster.ResetMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.ResetMachineOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.ResetMachineOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.ResetMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.ResetMachineParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateCluster provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateCluster(params *clientcluster.UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientcluster.ClientOption) (*clientcluster.UpdateClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *clientcluster.UpdateClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientcluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) (*clientcluster.UpdateClusterOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientcluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) *clientcluster.UpdateClusterOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientcluster.UpdateClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientcluster.UpdateClusterParams, runtime.ClientAuthInfoWriter, ...clientcluster.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
