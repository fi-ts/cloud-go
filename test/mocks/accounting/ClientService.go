// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package accounting

import (
	accounting "github.com/fi-ts/cloud-go/api/client/accounting"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ClusterUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterUsage(params *accounting.ClusterUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.ClusterUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.ClusterUsageOK
	if rf, ok := ret.Get(0).(func(*accounting.ClusterUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.ClusterUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ClusterUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.ClusterUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterUsageCSV(params *accounting.ClusterUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.ClusterUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.ClusterUsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.ClusterUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.ClusterUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ClusterUsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.ClusterUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ContainerUsage(params *accounting.ContainerUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.ContainerUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.ContainerUsageOK
	if rf, ok := ret.Get(0).(func(*accounting.ContainerUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.ContainerUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ContainerUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.ContainerUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ContainerUsageCSV(params *accounting.ContainerUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.ContainerUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.ContainerUsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.ContainerUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.ContainerUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ContainerUsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.ContainerUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IPUsage(params *accounting.IPUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.IPUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.IPUsageOK
	if rf, ok := ret.Get(0).(func(*accounting.IPUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.IPUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.IPUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.IPUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IPUsageCSV(params *accounting.IPUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.IPUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.IPUsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.IPUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.IPUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.IPUsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.IPUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NetworkUsage(params *accounting.NetworkUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.NetworkUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.NetworkUsageOK
	if rf, ok := ret.Get(0).(func(*accounting.NetworkUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.NetworkUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.NetworkUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.NetworkUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NetworkUsageCSV(params *accounting.NetworkUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.NetworkUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.NetworkUsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.NetworkUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.NetworkUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.NetworkUsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.NetworkUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostgresUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostgresUsage(params *accounting.PostgresUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.PostgresUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.PostgresUsageOK
	if rf, ok := ret.Get(0).(func(*accounting.PostgresUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.PostgresUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.PostgresUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.PostgresUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostgresUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostgresUsageCSV(params *accounting.PostgresUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.PostgresUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.PostgresUsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.PostgresUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.PostgresUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.PostgresUsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.PostgresUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3Usage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3Usage(params *accounting.S3UsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.S3UsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.S3UsageOK
	if rf, ok := ret.Get(0).(func(*accounting.S3UsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.S3UsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.S3UsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.S3UsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UsageCSV(params *accounting.S3UsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.S3UsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.S3UsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.S3UsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.S3UsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.S3UsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.S3UsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// VolumeUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VolumeUsage(params *accounting.VolumeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.VolumeUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.VolumeUsageOK
	if rf, ok := ret.Get(0).(func(*accounting.VolumeUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.VolumeUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.VolumeUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.VolumeUsageParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VolumeUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VolumeUsageCSV(params *accounting.VolumeUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...accounting.ClientOption) (*accounting.VolumeUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accounting.VolumeUsageCSVOK
	if rf, ok := ret.Get(0).(func(*accounting.VolumeUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) *accounting.VolumeUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.VolumeUsageCSVOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*accounting.VolumeUsageCSVParams, runtime.ClientAuthInfoWriter, ...accounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
