// Code generated by mockery v2.50.0. DO NOT EDIT.

package accounting

import (
	clientaccounting "github.com/fi-ts/cloud-go/api/client/accounting"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ClusterUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterUsage(params *clientaccounting.ClusterUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.ClusterUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterUsage")
	}

	var r0 *clientaccounting.ClusterUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.ClusterUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.ClusterUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.ClusterUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.ClusterUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.ClusterUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.ClusterUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterUsageCSV(params *clientaccounting.ClusterUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.ClusterUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterUsageCSV")
	}

	var r0 *clientaccounting.ClusterUsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.ClusterUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.ClusterUsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.ClusterUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.ClusterUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.ClusterUsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.ClusterUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ContainerUsage(params *clientaccounting.ContainerUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.ContainerUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ContainerUsage")
	}

	var r0 *clientaccounting.ContainerUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.ContainerUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.ContainerUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.ContainerUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.ContainerUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.ContainerUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.ContainerUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ContainerUsageCSV(params *clientaccounting.ContainerUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.ContainerUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ContainerUsageCSV")
	}

	var r0 *clientaccounting.ContainerUsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.ContainerUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.ContainerUsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.ContainerUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.ContainerUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.ContainerUsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.ContainerUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IPUsage(params *clientaccounting.IPUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.IPUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IPUsage")
	}

	var r0 *clientaccounting.IPUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.IPUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.IPUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.IPUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.IPUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.IPUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.IPUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IPUsageCSV(params *clientaccounting.IPUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.IPUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IPUsageCSV")
	}

	var r0 *clientaccounting.IPUsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.IPUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.IPUsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.IPUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.IPUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.IPUsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.IPUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MachineReservationUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) MachineReservationUsage(params *clientaccounting.MachineReservationUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.MachineReservationUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MachineReservationUsage")
	}

	var r0 *clientaccounting.MachineReservationUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.MachineReservationUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.MachineReservationUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.MachineReservationUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.MachineReservationUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.MachineReservationUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.MachineReservationUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MachineUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) MachineUsage(params *clientaccounting.MachineUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.MachineUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MachineUsage")
	}

	var r0 *clientaccounting.MachineUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.MachineUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.MachineUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.MachineUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.MachineUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.MachineUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.MachineUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NetworkUsage(params *clientaccounting.NetworkUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.NetworkUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NetworkUsage")
	}

	var r0 *clientaccounting.NetworkUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.NetworkUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.NetworkUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.NetworkUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.NetworkUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.NetworkUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.NetworkUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NetworkUsageCSV(params *clientaccounting.NetworkUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.NetworkUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NetworkUsageCSV")
	}

	var r0 *clientaccounting.NetworkUsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.NetworkUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.NetworkUsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.NetworkUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.NetworkUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.NetworkUsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.NetworkUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostgresUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostgresUsage(params *clientaccounting.PostgresUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.PostgresUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostgresUsage")
	}

	var r0 *clientaccounting.PostgresUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.PostgresUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.PostgresUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.PostgresUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.PostgresUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.PostgresUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.PostgresUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostgresUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostgresUsageCSV(params *clientaccounting.PostgresUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.PostgresUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostgresUsageCSV")
	}

	var r0 *clientaccounting.PostgresUsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.PostgresUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.PostgresUsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.PostgresUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.PostgresUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.PostgresUsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.PostgresUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductOptionUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ProductOptionUsage(params *clientaccounting.ProductOptionUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.ProductOptionUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProductOptionUsage")
	}

	var r0 *clientaccounting.ProductOptionUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.ProductOptionUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.ProductOptionUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.ProductOptionUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.ProductOptionUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.ProductOptionUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.ProductOptionUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Projects provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) Projects(params *clientaccounting.ProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.ProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Projects")
	}

	var r0 *clientaccounting.ProjectsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.ProjectsParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.ProjectsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.ProjectsParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.ProjectsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.ProjectsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.ProjectsParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3Usage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3Usage(params *clientaccounting.S3UsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.S3UsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3Usage")
	}

	var r0 *clientaccounting.S3UsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.S3UsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.S3UsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.S3UsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.S3UsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.S3UsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.S3UsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UsageCSV(params *clientaccounting.S3UsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.S3UsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3UsageCSV")
	}

	var r0 *clientaccounting.S3UsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.S3UsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.S3UsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.S3UsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.S3UsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.S3UsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.S3UsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// VolumeUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VolumeUsage(params *clientaccounting.VolumeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.VolumeUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VolumeUsage")
	}

	var r0 *clientaccounting.VolumeUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.VolumeUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.VolumeUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.VolumeUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.VolumeUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.VolumeUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.VolumeUsageParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VolumeUsageCSV provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VolumeUsageCSV(params *clientaccounting.VolumeUsageCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientaccounting.ClientOption) (*clientaccounting.VolumeUsageCSVOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VolumeUsageCSV")
	}

	var r0 *clientaccounting.VolumeUsageCSVOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientaccounting.VolumeUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) (*clientaccounting.VolumeUsageCSVOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientaccounting.VolumeUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) *clientaccounting.VolumeUsageCSVOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientaccounting.VolumeUsageCSVOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientaccounting.VolumeUsageCSVParams, runtime.ClientAuthInfoWriter, ...clientaccounting.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
