// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package s3

import (
	"github.com/fi-ts/cloud-go/api/client/s3"
	"github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

type ClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientService) EXPECT() *ClientService_Expecter {
	return &ClientService_Expecter{mock: &_m.Mock}
}

// Creates3 provides a mock function for the type ClientService
func (_mock *ClientService) Creates3(params *s3.Creates3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Creates3OK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Creates3")
	}

	var r0 *s3.Creates3OK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*s3.Creates3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) (*s3.Creates3OK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*s3.Creates3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) *s3.Creates3OK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Creates3OK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*s3.Creates3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_Creates3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Creates3'
type ClientService_Creates3_Call struct {
	*mock.Call
}

// Creates3 is a helper method to define mock.On call
//   - params *s3.Creates3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s3.ClientOption
func (_e *ClientService_Expecter) Creates3(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_Creates3_Call {
	return &ClientService_Creates3_Call{Call: _e.mock.On("Creates3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_Creates3_Call) Run(run func(params *s3.Creates3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption)) *ClientService_Creates3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *s3.Creates3Params
		if args[0] != nil {
			arg0 = args[0].(*s3.Creates3Params)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []s3.ClientOption
		var variadicArgs []s3.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]s3.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_Creates3_Call) Return(creates3OK *s3.Creates3OK, err error) *ClientService_Creates3_Call {
	_c.Call.Return(creates3OK, err)
	return _c
}

func (_c *ClientService_Creates3_Call) RunAndReturn(run func(params *s3.Creates3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Creates3OK, error)) *ClientService_Creates3_Call {
	_c.Call.Return(run)
	return _c
}

// Deletes3 provides a mock function for the type ClientService
func (_mock *ClientService) Deletes3(params *s3.Deletes3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Deletes3OK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Deletes3")
	}

	var r0 *s3.Deletes3OK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*s3.Deletes3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) (*s3.Deletes3OK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*s3.Deletes3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) *s3.Deletes3OK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Deletes3OK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*s3.Deletes3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_Deletes3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deletes3'
type ClientService_Deletes3_Call struct {
	*mock.Call
}

// Deletes3 is a helper method to define mock.On call
//   - params *s3.Deletes3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s3.ClientOption
func (_e *ClientService_Expecter) Deletes3(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_Deletes3_Call {
	return &ClientService_Deletes3_Call{Call: _e.mock.On("Deletes3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_Deletes3_Call) Run(run func(params *s3.Deletes3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption)) *ClientService_Deletes3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *s3.Deletes3Params
		if args[0] != nil {
			arg0 = args[0].(*s3.Deletes3Params)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []s3.ClientOption
		var variadicArgs []s3.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]s3.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_Deletes3_Call) Return(deletes3OK *s3.Deletes3OK, err error) *ClientService_Deletes3_Call {
	_c.Call.Return(deletes3OK, err)
	return _c
}

func (_c *ClientService_Deletes3_Call) RunAndReturn(run func(params *s3.Deletes3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Deletes3OK, error)) *ClientService_Deletes3_Call {
	_c.Call.Return(run)
	return _c
}

// Gets3 provides a mock function for the type ClientService
func (_mock *ClientService) Gets3(params *s3.Gets3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Gets3OK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Gets3")
	}

	var r0 *s3.Gets3OK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*s3.Gets3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) (*s3.Gets3OK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*s3.Gets3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) *s3.Gets3OK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Gets3OK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*s3.Gets3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_Gets3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gets3'
type ClientService_Gets3_Call struct {
	*mock.Call
}

// Gets3 is a helper method to define mock.On call
//   - params *s3.Gets3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s3.ClientOption
func (_e *ClientService_Expecter) Gets3(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_Gets3_Call {
	return &ClientService_Gets3_Call{Call: _e.mock.On("Gets3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_Gets3_Call) Run(run func(params *s3.Gets3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption)) *ClientService_Gets3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *s3.Gets3Params
		if args[0] != nil {
			arg0 = args[0].(*s3.Gets3Params)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []s3.ClientOption
		var variadicArgs []s3.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]s3.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_Gets3_Call) Return(gets3OK *s3.Gets3OK, err error) *ClientService_Gets3_Call {
	_c.Call.Return(gets3OK, err)
	return _c
}

func (_c *ClientService_Gets3_Call) RunAndReturn(run func(params *s3.Gets3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Gets3OK, error)) *ClientService_Gets3_Call {
	_c.Call.Return(run)
	return _c
}

// Lists3 provides a mock function for the type ClientService
func (_mock *ClientService) Lists3(params *s3.Lists3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Lists3OK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Lists3")
	}

	var r0 *s3.Lists3OK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*s3.Lists3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) (*s3.Lists3OK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*s3.Lists3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) *s3.Lists3OK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Lists3OK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*s3.Lists3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_Lists3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lists3'
type ClientService_Lists3_Call struct {
	*mock.Call
}

// Lists3 is a helper method to define mock.On call
//   - params *s3.Lists3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s3.ClientOption
func (_e *ClientService_Expecter) Lists3(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_Lists3_Call {
	return &ClientService_Lists3_Call{Call: _e.mock.On("Lists3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_Lists3_Call) Run(run func(params *s3.Lists3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption)) *ClientService_Lists3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *s3.Lists3Params
		if args[0] != nil {
			arg0 = args[0].(*s3.Lists3Params)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []s3.ClientOption
		var variadicArgs []s3.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]s3.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_Lists3_Call) Return(lists3OK *s3.Lists3OK, err error) *ClientService_Lists3_Call {
	_c.Call.Return(lists3OK, err)
	return _c
}

func (_c *ClientService_Lists3_Call) RunAndReturn(run func(params *s3.Lists3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Lists3OK, error)) *ClientService_Lists3_Call {
	_c.Call.Return(run)
	return _c
}

// Lists3partitions provides a mock function for the type ClientService
func (_mock *ClientService) Lists3partitions(params *s3.Lists3partitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Lists3partitionsOK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Lists3partitions")
	}

	var r0 *s3.Lists3partitionsOK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*s3.Lists3partitionsParams, runtime.ClientAuthInfoWriter, ...s3.ClientOption) (*s3.Lists3partitionsOK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*s3.Lists3partitionsParams, runtime.ClientAuthInfoWriter, ...s3.ClientOption) *s3.Lists3partitionsOK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Lists3partitionsOK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*s3.Lists3partitionsParams, runtime.ClientAuthInfoWriter, ...s3.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_Lists3partitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lists3partitions'
type ClientService_Lists3partitions_Call struct {
	*mock.Call
}

// Lists3partitions is a helper method to define mock.On call
//   - params *s3.Lists3partitionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s3.ClientOption
func (_e *ClientService_Expecter) Lists3partitions(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_Lists3partitions_Call {
	return &ClientService_Lists3partitions_Call{Call: _e.mock.On("Lists3partitions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_Lists3partitions_Call) Run(run func(params *s3.Lists3partitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption)) *ClientService_Lists3partitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *s3.Lists3partitionsParams
		if args[0] != nil {
			arg0 = args[0].(*s3.Lists3partitionsParams)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []s3.ClientOption
		var variadicArgs []s3.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]s3.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_Lists3partitions_Call) Return(lists3partitionsOK *s3.Lists3partitionsOK, err error) *ClientService_Lists3partitions_Call {
	_c.Call.Return(lists3partitionsOK, err)
	return _c
}

func (_c *ClientService_Lists3partitions_Call) RunAndReturn(run func(params *s3.Lists3partitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Lists3partitionsOK, error)) *ClientService_Lists3partitions_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function for the type ClientService
func (_mock *ClientService) SetTransport(transport runtime.ClientTransport) {
	_mock.Called(transport)
	return
}

// ClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type ClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *ClientService_Expecter) SetTransport(transport interface{}) *ClientService_SetTransport_Call {
	return &ClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *ClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.ClientTransport
		if args[0] != nil {
			arg0 = args[0].(runtime.ClientTransport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ClientService_SetTransport_Call) Return() *ClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientService_SetTransport_Call) RunAndReturn(run func(transport runtime.ClientTransport)) *ClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// Updates3 provides a mock function for the type ClientService
func (_mock *ClientService) Updates3(params *s3.Updates3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Updates3OK, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(params, authInfo, opts)
	} else {
		tmpRet = _mock.Called(params, authInfo)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Updates3")
	}

	var r0 *s3.Updates3OK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*s3.Updates3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) (*s3.Updates3OK, error)); ok {
		return returnFunc(params, authInfo, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(*s3.Updates3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) *s3.Updates3OK); ok {
		r0 = returnFunc(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Updates3OK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*s3.Updates3Params, runtime.ClientAuthInfoWriter, ...s3.ClientOption) error); ok {
		r1 = returnFunc(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientService_Updates3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updates3'
type ClientService_Updates3_Call struct {
	*mock.Call
}

// Updates3 is a helper method to define mock.On call
//   - params *s3.Updates3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s3.ClientOption
func (_e *ClientService_Expecter) Updates3(params interface{}, authInfo interface{}, opts ...interface{}) *ClientService_Updates3_Call {
	return &ClientService_Updates3_Call{Call: _e.mock.On("Updates3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *ClientService_Updates3_Call) Run(run func(params *s3.Updates3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption)) *ClientService_Updates3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *s3.Updates3Params
		if args[0] != nil {
			arg0 = args[0].(*s3.Updates3Params)
		}
		var arg1 runtime.ClientAuthInfoWriter
		if args[1] != nil {
			arg1 = args[1].(runtime.ClientAuthInfoWriter)
		}
		var arg2 []s3.ClientOption
		var variadicArgs []s3.ClientOption
		if len(args) > 2 {
			variadicArgs = args[2].([]s3.ClientOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ClientService_Updates3_Call) Return(updates3OK *s3.Updates3OK, err error) *ClientService_Updates3_Call {
	_c.Call.Return(updates3OK, err)
	return _c
}

func (_c *ClientService_Updates3_Call) RunAndReturn(run func(params *s3.Updates3Params, authInfo runtime.ClientAuthInfoWriter, opts ...s3.ClientOption) (*s3.Updates3OK, error)) *ClientService_Updates3_Call {
	_c.Call.Return(run)
	return _c
}
