// Code generated by generate_mock_client.go. DO NOT EDIT.
package client

import (
	"testing"

	cloudgo "github.com/fi-ts/cloud-go/api/client"

	accountingmocks "github.com/fi-ts/cloud-go/test/mocks/accounting"
	auditmocks "github.com/fi-ts/cloud-go/test/mocks/audit"
	clustermocks "github.com/fi-ts/cloud-go/test/mocks/cluster"
	databasemocks "github.com/fi-ts/cloud-go/test/mocks/database"
	healthmocks "github.com/fi-ts/cloud-go/test/mocks/health"
	ipmocks "github.com/fi-ts/cloud-go/test/mocks/ip"
	masterdatamocks "github.com/fi-ts/cloud-go/test/mocks/masterdata"
	projectmocks "github.com/fi-ts/cloud-go/test/mocks/project"
	s3mocks "github.com/fi-ts/cloud-go/test/mocks/s3"
	tenantmocks "github.com/fi-ts/cloud-go/test/mocks/tenant"
	versionmocks "github.com/fi-ts/cloud-go/test/mocks/version"
	volumemocks "github.com/fi-ts/cloud-go/test/mocks/volume"

	"github.com/stretchr/testify/mock"
)

type CloudMockFns struct {
	Accounting func(mock *mock.Mock)
	Audit      func(mock *mock.Mock)
	Cluster    func(mock *mock.Mock)
	Database   func(mock *mock.Mock)
	Health     func(mock *mock.Mock)
	IP         func(mock *mock.Mock)
	Masterdata func(mock *mock.Mock)
	Project    func(mock *mock.Mock)
	S3         func(mock *mock.Mock)
	Tenant     func(mock *mock.Mock)
	Version    func(mock *mock.Mock)
	Volume     func(mock *mock.Mock)
}

func NewCloudMockClient(t *testing.T, mockFns *CloudMockFns) *cloudgo.CloudAPI {
	var (
		accounting = accountingmocks.NewClientService(t)
		audit      = auditmocks.NewClientService(t)
		cluster    = clustermocks.NewClientService(t)
		database   = databasemocks.NewClientService(t)
		health     = healthmocks.NewClientService(t)
		ip         = ipmocks.NewClientService(t)
		masterdata = masterdatamocks.NewClientService(t)
		project    = projectmocks.NewClientService(t)
		s3         = s3mocks.NewClientService(t)
		tenant     = tenantmocks.NewClientService(t)
		version    = versionmocks.NewClientService(t)
		volume     = volumemocks.NewClientService(t)
	)

	client := &cloudgo.CloudAPI{
		Accounting: accounting,
		Audit:      audit,
		Cluster:    cluster,
		Database:   database,
		Health:     health,
		IP:         ip,
		Masterdata: masterdata,
		Project:    project,
		S3:         s3,
		Tenant:     tenant,
		Version:    version,
		Volume:     volume,
	}

	if mockFns == nil {
		return client
	}

	if mockFns.Accounting != nil {
		mockFns.Accounting(&accounting.Mock)
	}
	if mockFns.Audit != nil {
		mockFns.Audit(&audit.Mock)
	}
	if mockFns.Cluster != nil {
		mockFns.Cluster(&cluster.Mock)
	}
	if mockFns.Database != nil {
		mockFns.Database(&database.Mock)
	}
	if mockFns.Health != nil {
		mockFns.Health(&health.Mock)
	}
	if mockFns.IP != nil {
		mockFns.IP(&ip.Mock)
	}
	if mockFns.Masterdata != nil {
		mockFns.Masterdata(&masterdata.Mock)
	}
	if mockFns.Project != nil {
		mockFns.Project(&project.Mock)
	}
	if mockFns.S3 != nil {
		mockFns.S3(&s3.Mock)
	}
	if mockFns.Tenant != nil {
		mockFns.Tenant(&tenant.Mock)
	}
	if mockFns.Version != nil {
		mockFns.Version(&version.Mock)
	}
	if mockFns.Volume != nil {
		mockFns.Volume(&volume.Mock)
	}

	return client
}
