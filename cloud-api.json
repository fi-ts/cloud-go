{
  "basePath": "/",
  "definitions": {
    "httperrors.HTTPErrorResponse": {
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        },
        "statuscode": {
          "description": "http status code",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "message",
        "statuscode"
      ]
    },
    "models.V1BootInfo": {
      "properties": {
        "bootloaderid": {
          "type": "string"
        },
        "cmdline": {
          "type": "string"
        },
        "image_id": {
          "type": "string"
        },
        "initrd": {
          "type": "string"
        },
        "kernel": {
          "type": "string"
        },
        "os_partition": {
          "type": "string"
        },
        "primary_disk": {
          "type": "string"
        }
      },
      "required": [
        "bootloaderid",
        "cmdline",
        "image_id",
        "initrd",
        "kernel",
        "os_partition",
        "primary_disk"
      ]
    },
    "models.V1ChassisIdentifyLEDState": {
      "properties": {
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "value"
      ]
    },
    "models.V1IPResponse": {
      "properties": {
        "changed": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkid": {
          "type": "string"
        },
        "projectid": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "changed",
        "created",
        "ipaddress",
        "networkid",
        "projectid",
        "tags",
        "type"
      ]
    },
    "models.V1ImageResponse": {
      "properties": {
        "changed": {
          "type": "string"
        },
        "classification": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "changed",
        "created",
        "expirationDate",
        "features",
        "id"
      ]
    },
    "models.V1MachineAllocation": {
      "properties": {
        "boot_info": {
          "$ref": "#/definitions/models.V1BootInfo"
        },
        "console_password": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/models.V1ImageResponse"
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "items": {
            "$ref": "#/definitions/models.V1MachineNetwork"
          },
          "type": "array"
        },
        "project": {
          "type": "string"
        },
        "reinstall": {
          "type": "boolean"
        },
        "ssh_pub_keys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "succeeded": {
          "type": "boolean"
        },
        "user_data": {
          "type": "string"
        }
      },
      "required": [
        "created",
        "hostname",
        "name",
        "networks",
        "project",
        "reinstall",
        "ssh_pub_keys",
        "succeeded"
      ]
    },
    "models.V1MachineBIOS": {
      "properties": {
        "date": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "date",
        "vendor",
        "version"
      ]
    },
    "models.V1MachineBlockDevice": {
      "properties": {
        "name": {
          "type": "string"
        },
        "partitions": {
          "items": {
            "$ref": "#/definitions/models.V1MachineDiskPartition"
          },
          "type": "array"
        },
        "primary": {
          "type": "boolean"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "partitions",
        "primary",
        "size"
      ]
    },
    "models.V1MachineDiskPartition": {
      "properties": {
        "device": {
          "type": "string"
        },
        "filesystem": {
          "type": "string"
        },
        "gptguid": {
          "type": "string"
        },
        "gpttyoe": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "mountoptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mountpoint": {
          "type": "string"
        },
        "number": {
          "format": "int64",
          "type": "integer"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "device",
        "filesystem",
        "gptguid",
        "gpttyoe",
        "label",
        "mountoptions",
        "mountpoint",
        "number",
        "properties",
        "size"
      ]
    },
    "models.V1MachineHardware": {
      "properties": {
        "cpu_cores": {
          "format": "int32",
          "type": "integer"
        },
        "disks": {
          "items": {
            "$ref": "#/definitions/models.V1MachineBlockDevice"
          },
          "type": "array"
        },
        "memory": {
          "format": "int64",
          "type": "integer"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/models.V1MachineNic"
          },
          "type": "array"
        }
      },
      "required": [
        "cpu_cores",
        "disks",
        "memory",
        "nics"
      ]
    },
    "models.V1MachineNetwork": {
      "properties": {
        "asn": {
          "format": "int64",
          "type": "integer"
        },
        "destinationprefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nat": {
          "type": "boolean"
        },
        "networkid": {
          "type": "string"
        },
        "prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "private": {
          "type": "boolean"
        },
        "underlay": {
          "type": "boolean"
        },
        "vrf": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "asn",
        "destinationprefixes",
        "ips",
        "nat",
        "networkid",
        "prefixes",
        "private",
        "underlay",
        "vrf"
      ]
    },
    "models.V1MachineNic": {
      "properties": {
        "mac": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "mac",
        "name"
      ]
    },
    "models.V1MachineProvisioningEvent": {
      "properties": {
        "event": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      },
      "required": [
        "event"
      ]
    },
    "models.V1MachineRecentProvisioningEvents": {
      "properties": {
        "incomplete_provisioning_cycles": {
          "type": "string"
        },
        "last_event_time": {
          "type": "string"
        },
        "log": {
          "items": {
            "$ref": "#/definitions/models.V1MachineProvisioningEvent"
          },
          "type": "array"
        }
      },
      "required": [
        "incomplete_provisioning_cycles",
        "last_event_time",
        "log"
      ]
    },
    "models.V1MachineResponse": {
      "properties": {
        "allocation": {
          "$ref": "#/definitions/models.V1MachineAllocation"
        },
        "bios": {
          "$ref": "#/definitions/models.V1MachineBIOS"
        },
        "changed": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "events": {
          "$ref": "#/definitions/models.V1MachineRecentProvisioningEvents"
        },
        "hardware": {
          "$ref": "#/definitions/models.V1MachineHardware"
        },
        "id": {
          "type": "string"
        },
        "ledstate": {
          "$ref": "#/definitions/models.V1ChassisIdentifyLEDState"
        },
        "liveliness": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/models.V1PartitionResponse"
        },
        "rackid": {
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/models.V1SizeResponse"
        },
        "state": {
          "$ref": "#/definitions/models.V1MachineState"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation",
        "bios",
        "changed",
        "created",
        "events",
        "hardware",
        "id",
        "ledstate",
        "liveliness",
        "partition",
        "rackid",
        "size",
        "state",
        "tags"
      ]
    },
    "models.V1MachineState": {
      "properties": {
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "value"
      ]
    },
    "models.V1PartitionBootConfiguration": {
      "properties": {
        "commandline": {
          "type": "string"
        },
        "imageurl": {
          "type": "string"
        },
        "kernelurl": {
          "type": "string"
        }
      }
    },
    "models.V1PartitionResponse": {
      "properties": {
        "bootconfig": {
          "$ref": "#/definitions/models.V1PartitionBootConfiguration"
        },
        "changed": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mgmtserviceaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "privatenetworkprefixlength": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "bootconfig",
        "changed",
        "created",
        "id"
      ]
    },
    "models.V1SizeConstraint": {
      "properties": {
        "max": {
          "format": "int64",
          "type": "integer"
        },
        "min": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "max",
        "min",
        "type"
      ]
    },
    "models.V1SizeResponse": {
      "properties": {
        "changed": {
          "type": "string"
        },
        "constraints": {
          "items": {
            "$ref": "#/definitions/models.V1SizeConstraint"
          },
          "type": "array"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "changed",
        "constraints",
        "created",
        "id"
      ]
    },
    "rest.status": {
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "status"
      ]
    },
    "rest.version": {
      "properties": {
        "builddate": {
          "type": "string"
        },
        "gitsha1": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "builddate",
        "gitsha1",
        "name",
        "revision",
        "version"
      ]
    },
    "v1.Addons": {
      "properties": {
        "KubernetesDashboard": {
          "type": "boolean"
        },
        "NginxIngress": {
          "type": "boolean"
        }
      },
      "required": [
        "KubernetesDashboard",
        "NginxIngress"
      ]
    },
    "v1.ClusterCreateRequest": {
      "properties": {
        "AdditionalNetworks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Addons": {
          "$ref": "#/definitions/v1.Addons"
        },
        "Description": {
          "type": "string"
        },
        "FirewallImage": {
          "type": "string"
        },
        "FirewallSize": {
          "type": "string"
        },
        "Kubernetes": {
          "$ref": "#/definitions/v1.Kubernetes"
        },
        "Maintenance": {
          "$ref": "#/definitions/v1.Maintenance"
        },
        "Name": {
          "type": "string"
        },
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "Purpose": {
          "type": "string"
        },
        "Tenant": {
          "type": "string"
        },
        "Workers": {
          "items": {
            "$ref": "#/definitions/v1.Worker"
          },
          "type": "array"
        }
      },
      "required": [
        "AdditionalNetworks",
        "Addons",
        "Description",
        "FirewallImage",
        "FirewallSize",
        "Kubernetes",
        "Maintenance",
        "Name",
        "PartitionID",
        "ProjectID",
        "Purpose",
        "Tenant",
        "Workers"
      ]
    },
    "v1.ClusterCredentialsResponse": {
      "properties": {
        "Kubeconfig": {
          "type": "string"
        },
        "SSHKeyPair": {
          "$ref": "#/definitions/v1.SSHKeyPair"
        }
      },
      "required": [
        "Kubeconfig",
        "SSHKeyPair"
      ]
    },
    "v1.ClusterFindRequest": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "Tenant": {
          "type": "string"
        }
      },
      "required": [
        "Name",
        "PartitionID",
        "ProjectID",
        "Tenant"
      ]
    },
    "v1.ClusterKubeconfigResponse": {
      "properties": {
        "Kubeconfig": {
          "type": "string"
        }
      },
      "required": [
        "Kubeconfig"
      ]
    },
    "v1.ClusterNameProject": {
      "properties": {
        "cluster_name": {
          "description": "cluster name",
          "type": "string"
        },
        "project": {
          "description": "generated middle-part of gardener shoot namespace, e.g. 'ps5d42'",
          "type": "string"
        }
      }
    },
    "v1.ClusterResponse": {
      "properties": {
        "controlplane": {
          "$ref": "#/definitions/v1alpha1.ControlPlaneConfig",
          "description": "the gardener shoot control plane raw extension"
        },
        "infrastructure": {
          "$ref": "#/definitions/v1alpha1.InfrastructureConfig",
          "description": "the gardener shoot infrastructure raw extension"
        },
        "machines": {
          "description": "the machines which belong to this cluster",
          "items": {
            "$ref": "#/definitions/models.V1MachineResponse"
          },
          "type": "array"
        },
        "network": {
          "$ref": "#/definitions/v1alpha1.NetworkConfig",
          "description": "the gardener shoot network raw extension"
        },
        "shoot": {
          "$ref": "#/definitions/v1beta1.Shoot",
          "description": "the gardener shoot resource but with the raw extensions separated out"
        }
      },
      "required": [
        "controlplane",
        "infrastructure",
        "machines",
        "network",
        "shoot"
      ]
    },
    "v1.ClusterUpdateRequest": {
      "properties": {
        "FirewallImage": {
          "type": "string"
        },
        "FirewallSize": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        },
        "Kubernetes": {
          "$ref": "#/definitions/v1.Kubernetes"
        },
        "Maintenance": {
          "$ref": "#/definitions/v1.Maintenance"
        },
        "Purpose": {
          "type": "string"
        },
        "Workers": {
          "items": {
            "$ref": "#/definitions/v1.Worker"
          },
          "type": "array"
        }
      },
      "required": [
        "FirewallImage",
        "FirewallSize",
        "ID",
        "Kubernetes",
        "Maintenance",
        "Purpose",
        "Workers"
      ]
    },
    "v1.ClusterUsage": {
      "properties": {
        "clusterend": {
          "description": "the end time of this cluster",
          "format": "date-time",
          "type": "string"
        },
        "clusterid": {
          "description": "the cluster id of this cluster",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this cluster",
          "type": "string"
        },
        "clusterstart": {
          "description": "the start time of this cluster",
          "format": "date-time",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this cluster is running",
          "format": "integer",
          "type": "integer"
        },
        "partition": {
          "description": "the partition of this cluster",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this cluster",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this cluster",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this cluster",
          "type": "string"
        },
        "warnings": {
          "description": "warnings that occurred when calculating the usage of this cluster",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterend",
        "clusterid",
        "clustername",
        "clusterstart",
        "lifetime",
        "partition",
        "projectid",
        "projectname",
        "tenant",
        "warnings"
      ]
    },
    "v1.ClusterUsageAccumuluated": {
      "properties": {
        "lifetime": {
          "description": "the duration that this cluster is running",
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "lifetime"
      ]
    },
    "v1.ClusterUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.ClusterUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.ClusterUsageAccumuluated",
          "description": "just the usage data of the individual clusters summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual clusters",
          "items": {
            "$ref": "#/definitions/v1.ClusterUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.ContainerUsage": {
      "properties": {
        "clusterid": {
          "description": "the cluster id of this container",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this container",
          "type": "string"
        },
        "containerimage": {
          "description": "the container image of this container",
          "type": "string"
        },
        "containername": {
          "description": "the name of this container",
          "type": "string"
        },
        "cpuseconds": {
          "description": "the cpu seconds of this container (s*s)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this container is running",
          "format": "integer",
          "type": "integer"
        },
        "memoryseconds": {
          "description": "the memory seconds of this container (byte*s)",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace of this container",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this container",
          "type": "string"
        },
        "podend": {
          "description": "the pod end time of this container",
          "format": "date-time",
          "type": "string"
        },
        "podname": {
          "description": "the pod name of this container",
          "type": "string"
        },
        "podstart": {
          "description": "the pod start time of this container",
          "format": "date-time",
          "type": "string"
        },
        "poduuid": {
          "description": "the pod uuid of this container",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this container",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this container",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this container",
          "type": "string"
        },
        "warnings": {
          "description": "warnings that occurred when calculating the usage of this container",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterid",
        "clustername",
        "containerimage",
        "containername",
        "cpuseconds",
        "lifetime",
        "memoryseconds",
        "namespace",
        "partition",
        "podend",
        "podname",
        "podstart",
        "poduuid",
        "projectid",
        "projectname",
        "tenant",
        "warnings"
      ]
    },
    "v1.ContainerUsageAccumuluated": {
      "properties": {
        "cpuseconds": {
          "description": "the accumuluated cpu seconds of the containers in this response (s*s)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this container is running",
          "format": "integer",
          "type": "integer"
        },
        "memoryseconds": {
          "description": "the accumulated memory seconds of the containers in this response (byte*s)",
          "type": "string"
        }
      },
      "required": [
        "cpuseconds",
        "lifetime",
        "memoryseconds"
      ]
    },
    "v1.ContainerUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace name to account for",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.ContainerUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.ContainerUsageAccumuluated",
          "description": "just the usage data of the individual containers summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual containers",
          "items": {
            "$ref": "#/definitions/v1.ContainerUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.IPFindRequest": {
      "properties": {
        "IPAddress": {
          "type": "string"
        },
        "MachineID": {
          "type": "string"
        },
        "NetworkID": {
          "type": "string"
        },
        "ParentPrefixCidr": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "Tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Type": {
          "type": "string"
        }
      },
      "required": [
        "IPAddress",
        "MachineID",
        "NetworkID",
        "ParentPrefixCidr",
        "ProjectID",
        "Tags",
        "Type"
      ]
    },
    "v1.IPUpdateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "ipaddress"
      ]
    },
    "v1.IPUsage": {
      "properties": {
        "end": {
          "description": "the end time of this ip",
          "format": "date-time",
          "type": "string"
        },
        "ip": {
          "description": "the address of this ip",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this ip is allocated",
          "format": "integer",
          "type": "integer"
        },
        "projectid": {
          "description": "the project id of this ip",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this ip",
          "type": "string"
        },
        "start": {
          "description": "the start time of this ip",
          "format": "date-time",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this ip",
          "type": "string"
        },
        "warnings": {
          "description": "warnings that occurred when calculating the usage of this ip",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "end",
        "ip",
        "lifetime",
        "projectid",
        "projectname",
        "start",
        "tenant",
        "warnings"
      ]
    },
    "v1.IPUsageAccumuluated": {
      "properties": {
        "lifetime": {
          "description": "the duration that this ip is running",
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "lifetime"
      ]
    },
    "v1.IPUsageRequest": {
      "properties": {
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.IPUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.IPUsageAccumuluated",
          "description": "just the usage data of the individual ips summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual network usage",
          "items": {
            "$ref": "#/definitions/v1.IPUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.Kubernetes": {
      "properties": {
        "AllowPrivilegedContainers": {
          "type": "boolean"
        },
        "Version": {
          "type": "string"
        }
      },
      "required": [
        "AllowPrivilegedContainers",
        "Version"
      ]
    },
    "v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      }
    },
    "v1.MachineImage": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      },
      "required": [
        "Name",
        "Version"
      ]
    },
    "v1.Maintenance": {
      "properties": {
        "AutoUpdate": {
          "$ref": "#/definitions/v1.MaintenanceAutoUpdate"
        },
        "TimeWindow": {
          "$ref": "#/definitions/v1.MaintenanceTimeWindow"
        }
      },
      "required": [
        "AutoUpdate",
        "TimeWindow"
      ]
    },
    "v1.MaintenanceAutoUpdate": {
      "properties": {
        "KubernetesVersion": {
          "type": "boolean"
        },
        "MachineImage": {
          "type": "boolean"
        }
      },
      "required": [
        "KubernetesVersion",
        "MachineImage"
      ]
    },
    "v1.MaintenanceTimeWindow": {
      "properties": {
        "Begin": {
          "type": "string"
        },
        "End": {
          "type": "string"
        }
      },
      "required": [
        "Begin",
        "End"
      ]
    },
    "v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "type": "string"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "time": {
          "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
          "type": "string"
        }
      }
    },
    "v1.MasterdataLookupRequest": {
      "properties": {
        "cluster_id": {
          "description": "lookup by clusterID as returned by cloud-api (e.g. 345abc12-3321-4dbc-8d17-55c6ea4fcb38)",
          "type": "string"
        },
        "cluster_name_project": {
          "$ref": "#/definitions/v1.ClusterNameProject",
          "description": "lookup by clustername and shoot-project"
        },
        "project_id_time": {
          "$ref": "#/definitions/v1.ProjectIDTime",
          "description": "lookup at some point in time by projectID as returned by cloud-api (e.g. 10241dd7-a8de-4856-8ac0-b55830b22036)"
        }
      }
    },
    "v1.MasterdataLookupResponse": {
      "properties": {
        "project": {
          "$ref": "#/definitions/v1.Project",
          "description": "project"
        },
        "tenant": {
          "$ref": "#/definitions/v1.Tenant",
          "description": "tenant to which the project belongs"
        }
      }
    },
    "v1.Meta": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "apiversion": {
          "type": "string"
        },
        "created_time": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updated_time": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "v1.NetworkUsage": {
      "properties": {
        "clusterid": {
          "description": "the cluster id of this network device",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this network device",
          "type": "string"
        },
        "device": {
          "description": "the device name of this network device",
          "type": "string"
        },
        "end": {
          "description": "the end time of this network device",
          "format": "date-time",
          "type": "string"
        },
        "in": {
          "description": "the ingoing traffic of this network device (byte)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this network device is running",
          "format": "integer",
          "type": "integer"
        },
        "out": {
          "description": "the outgoing traffic of this network device (byte)",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this network device",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this network device",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this network device",
          "type": "string"
        },
        "start": {
          "description": "the start time of this network device",
          "format": "date-time",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this network device",
          "type": "string"
        },
        "total": {
          "description": "the total traffic of this network device (byte)",
          "type": "string"
        },
        "warnings": {
          "description": "warnings that occurred when calculating the usage of this device's network traffic",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterid",
        "clustername",
        "device",
        "end",
        "in",
        "lifetime",
        "out",
        "partition",
        "projectid",
        "projectname",
        "start",
        "tenant",
        "total",
        "warnings"
      ]
    },
    "v1.NetworkUsageAccumuluated": {
      "properties": {
        "in": {
          "description": "the accumuluated ingoing traffic (byte)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration for that the network usage is accounted",
          "format": "integer",
          "type": "integer"
        },
        "out": {
          "description": "the accumulated outgoing traffic (byte)",
          "type": "string"
        },
        "total": {
          "description": "the accumulated total traffic (byte)",
          "type": "string"
        }
      },
      "required": [
        "in",
        "lifetime",
        "out",
        "total"
      ]
    },
    "v1.NetworkUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "device": {
          "description": "the device to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.NetworkUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.NetworkUsageAccumuluated",
          "description": "just the usage data of the individual network traffic summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual network usage",
          "items": {
            "$ref": "#/definitions/v1.NetworkUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ]
    },
    "v1.PartitionContraints": {
      "properties": {
        "networks": {
          "description": "the list of available networks in this partition",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "networks"
      ]
    },
    "v1.Project": {
      "properties": {
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.ProjectCreateRequest": {
      "properties": {
        "project": {
          "$ref": "#/definitions/v1.Project"
        }
      }
    },
    "v1.ProjectIDTime": {
      "properties": {
        "project_id": {
          "description": "projectID as returned by cloud-api (e.g. 10241dd7-a8de-4856-8ac0-b55830b22036)",
          "type": "string"
        },
        "time": {
          "description": "point in time",
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "v1.ProjectListResponse": {
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1.Project"
          },
          "type": "array"
        }
      }
    },
    "v1.ProjectResponse": {
      "properties": {
        "project": {
          "$ref": "#/definitions/v1.Project"
        }
      }
    },
    "v1.ProjectUpdateRequest": {
      "properties": {
        "project": {
          "$ref": "#/definitions/v1.Project"
        }
      }
    },
    "v1.Quota": {
      "properties": {
        "quota": {
          "format": "int32",
          "type": "integer"
        },
        "used": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1.QuotaSet": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1.Quota"
        },
        "ip": {
          "$ref": "#/definitions/v1.Quota"
        },
        "machine": {
          "$ref": "#/definitions/v1.Quota"
        }
      }
    },
    "v1.S3CreateRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/v1.S3Key"
        },
        "max_buckets": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "key",
        "max_buckets",
        "name",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3CredentialsResponse": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keys": {
          "items": {
            "$ref": "#/definitions/v1.S3Key"
          },
          "type": "array"
        },
        "max_buckets": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "id",
        "keys",
        "max_buckets",
        "name",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3DeleteRequest": {
      "properties": {
        "force": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "force",
        "id",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3GetRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3Key": {
      "properties": {
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        }
      },
      "required": [
        "access_key",
        "secret_key"
      ]
    },
    "v1.S3ListRequest": {
      "properties": {
        "partition": {
          "type": "string"
        }
      },
      "required": [
        "partition"
      ]
    },
    "v1.S3PartitionResponse": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ready": {
          "type": "boolean"
        }
      },
      "required": [
        "endpoint",
        "id",
        "ready"
      ]
    },
    "v1.S3Response": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "id",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3UpdateRequest": {
      "properties": {
        "add_keys": {
          "items": {
            "$ref": "#/definitions/v1.S3Key"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "remove_access_keys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "add_keys",
        "id",
        "partition",
        "project",
        "remove_access_keys",
        "tenant"
      ]
    },
    "v1.S3Usage": {
      "properties": {
        "bucketid": {
          "description": "the bucket id of this s3 bucket",
          "type": "string"
        },
        "bucketname": {
          "description": "the bucket name of this s3 bucket",
          "type": "string"
        },
        "currentnumberofobjects": {
          "description": "the last reported number of objects of this s3 bucket",
          "type": "string"
        },
        "end": {
          "description": "the end time of this s3 bucket",
          "format": "date-time",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this s3 bucket is running",
          "format": "integer",
          "type": "integer"
        },
        "partition": {
          "description": "the partition of this s3 bucket",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this s3 bucket",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this s3 bucket",
          "type": "string"
        },
        "start": {
          "description": "the start time of this s3 bucket",
          "format": "date-time",
          "type": "string"
        },
        "storageseconds": {
          "description": "the storage seconds of this s3 bucket (byte*s)",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this s3 bucket",
          "type": "string"
        },
        "user": {
          "description": "the user name of this s3 bucket",
          "type": "string"
        },
        "warnings": {
          "description": "warnings that occurred when calculating the usage of this s3 bucket",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "bucketid",
        "bucketname",
        "currentnumberofobjects",
        "end",
        "lifetime",
        "partition",
        "projectid",
        "projectname",
        "start",
        "storageseconds",
        "tenant",
        "user",
        "warnings"
      ]
    },
    "v1.S3UsageAccumuluated": {
      "properties": {
        "currentnumberofobjects": {
          "description": "the accumulated reported number of objects of the s3 bucketd in this response",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this s3 bucket is running",
          "format": "integer",
          "type": "integer"
        },
        "storageseconds": {
          "description": "the accumulated storage seconds of the s3 bucketd in this response (byte*s)",
          "type": "string"
        }
      },
      "required": [
        "currentnumberofobjects",
        "lifetime",
        "storageseconds"
      ]
    },
    "v1.S3UsageRequest": {
      "properties": {
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.S3UsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.S3UsageAccumuluated",
          "description": "just the usage data of the individual s3 buckets summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual s3 buckets",
          "items": {
            "$ref": "#/definitions/v1.S3Usage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.SSHKeyPair": {
      "properties": {
        "PrivateKey": {
          "type": "string"
        },
        "PublicKey": {
          "type": "string"
        }
      },
      "required": [
        "PrivateKey",
        "PublicKey"
      ]
    },
    "v1.ShootConstraints": {
      "properties": {
        "firewall_images": {
          "description": "the list of available firewall images",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "firewall_types": {
          "description": "the list of available firewall types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kubernetes_versions": {
          "description": "the list of available kubernetes versions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machine_images": {
          "description": "the list of available machine images",
          "items": {
            "$ref": "#/definitions/v1.MachineImage"
          },
          "type": "array"
        },
        "machine_types": {
          "description": "the list of available machine types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "partition_constraints": {
          "additionalProperties": {
            "$ref": "#/definitions/v1.PartitionContraints"
          },
          "description": "a list of partition specific shoot contraints",
          "type": "object"
        },
        "partitions": {
          "description": "the list of available partitions",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "firewall_images",
        "firewall_types",
        "kubernetes_versions",
        "machine_images",
        "machine_types",
        "partition_constraints",
        "partitions"
      ]
    },
    "v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "properties": {
        "effect": {
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Required. The taint key to be applied to a node.",
          "type": "string"
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
          "type": "string"
        },
        "value": {
          "description": "Required. The taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "required": [
        "effect",
        "key"
      ]
    },
    "v1.Tenant": {
      "properties": {
        "default_quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        }
      }
    },
    "v1.TenantResponse": {
      "properties": {
        "tenant": {
          "$ref": "#/definitions/v1.Tenant"
        }
      }
    },
    "v1.TenantUpdateRequest": {
      "properties": {
        "tenant": {
          "$ref": "#/definitions/v1.Tenant"
        }
      }
    },
    "v1.VolumeUsage": {
      "properties": {
        "capacityseconds": {
          "description": "the capacity seconds of this volume (byte*s)",
          "type": "string"
        },
        "class": {
          "description": "the class of this volume",
          "type": "string"
        },
        "clusterid": {
          "description": "the cluster id of this volume",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this volume",
          "type": "string"
        },
        "end": {
          "description": "the end time of this volume",
          "format": "date-time",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this volume is running",
          "format": "integer",
          "type": "integer"
        },
        "name": {
          "description": "the name of this volume",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this volume",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this volume",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this volume",
          "type": "string"
        },
        "start": {
          "description": "the start time of this volume",
          "format": "date-time",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this volume",
          "type": "string"
        },
        "type": {
          "description": "the type of this volume",
          "type": "string"
        },
        "warnings": {
          "description": "warnings that occurred when calculating the usage of this volume",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "capacityseconds",
        "class",
        "clusterid",
        "clustername",
        "end",
        "lifetime",
        "name",
        "partition",
        "projectid",
        "projectname",
        "start",
        "tenant",
        "type",
        "warnings"
      ]
    },
    "v1.VolumeUsageAccumuluated": {
      "properties": {
        "capacityseconds": {
          "description": "the accumulated capacity seconds of the volumes in this response (byte*s)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this volume is running",
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "capacityseconds",
        "lifetime"
      ]
    },
    "v1.VolumeUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace name to account for",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.VolumeUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.VolumeUsageAccumuluated",
          "description": "just the usage data of the individual volumes summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual volumes",
          "items": {
            "$ref": "#/definitions/v1.VolumeUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.Worker": {
      "properties": {
        "CRI": {
          "$ref": "#/definitions/v1beta1.CRI"
        },
        "MachineImage": {
          "$ref": "#/definitions/v1.MachineImage"
        },
        "MachineType": {
          "type": "string"
        },
        "MaxSurge": {
          "type": "string"
        },
        "MaxUnavailable": {
          "type": "string"
        },
        "Maximum": {
          "format": "int32",
          "type": "integer"
        },
        "Minimum": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        }
      },
      "required": [
        "CRI",
        "MachineImage",
        "MachineType",
        "MaxSurge",
        "MaxUnavailable",
        "Maximum",
        "Minimum",
        "Name"
      ]
    },
    "v1alpha1.CloudControllerManagerConfig": {
      "properties": {
        "featureGates": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        }
      }
    },
    "v1alpha1.ConnectorConfig": {
      "properties": {
        "idmAccessCode": {
          "type": "string"
        },
        "idmApiPassword": {
          "type": "string"
        },
        "idmApiUrl": {
          "type": "string"
        },
        "idmApiUser": {
          "type": "string"
        },
        "idmCustomerId": {
          "type": "string"
        },
        "idmDomainName": {
          "type": "string"
        },
        "idmGroupOU": {
          "type": "string"
        },
        "idmGroupnameTemplate": {
          "type": "string"
        },
        "idmJobInfo": {
          "type": "string"
        },
        "idmReqEMail": {
          "type": "string"
        },
        "idmReqSystem": {
          "type": "string"
        },
        "idmReqUser": {
          "type": "string"
        },
        "idmSubmitter": {
          "type": "string"
        },
        "idmSystemId": {
          "type": "string"
        },
        "idmTenantPrefix": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ControlPlaneConfig": {
      "description": "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "cloudControllerManager": {
          "$ref": "#/definitions/v1alpha1.CloudControllerManagerConfig"
        },
        "iamconfig": {
          "$ref": "#/definitions/v1alpha1.IAMConfig"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "required": [
        "iamconfig"
      ]
    },
    "v1alpha1.Firewall": {
      "properties": {
        "image": {
          "type": "string"
        },
        "networks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "size": {
          "type": "string"
        }
      },
      "required": [
        "image",
        "networks",
        "size"
      ]
    },
    "v1alpha1.IAMConfig": {
      "properties": {
        "groupConfig": {
          "$ref": "#/definitions/v1alpha1.NamespaceGroupConfig"
        },
        "idmConfig": {
          "$ref": "#/definitions/v1alpha1.IDMConfig"
        },
        "issuerConfig": {
          "$ref": "#/definitions/v1alpha1.IssuerConfig"
        }
      }
    },
    "v1alpha1.IDMConfig": {
      "properties": {
        "connectorConfig": {
          "$ref": "#/definitions/v1alpha1.ConnectorConfig"
        },
        "idmtype": {
          "type": "string"
        }
      }
    },
    "v1alpha1.IPAM": {
      "properties": {
        "cidr": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1alpha1.IPv4": {
      "properties": {
        "autoDetectionMethod": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        }
      }
    },
    "v1alpha1.InfrastructureConfig": {
      "description": "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "firewall": {
          "$ref": "#/definitions/v1alpha1.Firewall"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "partitionID": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        }
      },
      "required": [
        "firewall",
        "partitionID",
        "projectID"
      ]
    },
    "v1alpha1.IssuerConfig": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NamespaceGroupConfig": {
      "properties": {
        "clusterGroupnameTemplate": {
          "type": "string"
        },
        "excludedNamespaces": {
          "type": "string"
        },
        "expectedGroupsList": {
          "type": "string"
        },
        "namespaceMaxLength": {
          "format": "int32",
          "type": "integer"
        },
        "roleBindingNameTemplate": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NetworkConfig": {
      "description": "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "backend": {
          "type": "string"
        },
        "ipAutodetectionMethod": {
          "type": "string"
        },
        "ipam": {
          "$ref": "#/definitions/v1alpha1.IPAM"
        },
        "ipip": {
          "type": "string"
        },
        "ipv4": {
          "$ref": "#/definitions/v1alpha1.IPv4"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "typha": {
          "$ref": "#/definitions/v1alpha1.Typha"
        },
        "vethMTU": {
          "type": "string"
        }
      },
      "required": [
        "backend"
      ]
    },
    "v1alpha1.Typha": {
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "v1beta1.Addons": {
      "properties": {
        "kubernetesDashboard": {
          "$ref": "#/definitions/v1beta1.KubernetesDashboard"
        },
        "nginxIngress": {
          "$ref": "#/definitions/v1beta1.NginxIngress"
        }
      }
    },
    "v1beta1.AdmissionPlugin": {
      "properties": {
        "config": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1beta1.Alerting": {
      "properties": {
        "emailReceivers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "v1beta1.AuditConfig": {
      "properties": {
        "auditPolicy": {
          "$ref": "#/definitions/v1beta1.AuditPolicy"
        }
      }
    },
    "v1beta1.AuditPolicy": {
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/v1.ObjectReference"
        }
      }
    },
    "v1beta1.CRI": {
      "properties": {
        "containerRuntimes": {
          "items": {
            "$ref": "#/definitions/v1beta1.ContainerRuntime"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1beta1.ClusterAutoscaler": {
      "properties": {
        "scaleDownDelayAfterAdd": {
          "type": "string"
        },
        "scaleDownDelayAfterDelete": {
          "type": "string"
        },
        "scaleDownDelayAfterFailure": {
          "type": "string"
        },
        "scaleDownUnneededTime": {
          "type": "string"
        },
        "scaleDownUtilizationThreshold": {
          "format": "double",
          "type": "number"
        },
        "scanInterval": {
          "type": "string"
        }
      }
    },
    "v1beta1.Condition": {
      "properties": {
        "codes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "lastUpdateTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "lastTransitionTime",
        "lastUpdateTime",
        "message",
        "reason",
        "status",
        "type"
      ]
    },
    "v1beta1.ContainerRuntime": {
      "properties": {
        "providerConfig": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1beta1.DNS": {
      "properties": {
        "domain": {
          "type": "string"
        },
        "providers": {
          "items": {
            "$ref": "#/definitions/v1beta1.DNSProvider"
          },
          "type": "array"
        }
      }
    },
    "v1beta1.DNSIncludeExclude": {
      "properties": {
        "exclude": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "v1beta1.DNSProvider": {
      "properties": {
        "domains": {
          "$ref": "#/definitions/v1beta1.DNSIncludeExclude"
        },
        "primary": {
          "type": "boolean"
        },
        "secretName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "zones": {
          "$ref": "#/definitions/v1beta1.DNSIncludeExclude"
        }
      }
    },
    "v1beta1.Extension": {
      "properties": {
        "providerConfig": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1beta1.Gardener": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "version"
      ]
    },
    "v1beta1.Hibernation": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "schedules": {
          "items": {
            "$ref": "#/definitions/v1beta1.HibernationSchedule"
          },
          "type": "array"
        }
      }
    },
    "v1beta1.HibernationSchedule": {
      "properties": {
        "end": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "start": {
          "type": "string"
        }
      }
    },
    "v1beta1.HorizontalPodAutoscalerConfig": {
      "properties": {
        "cpuInitializationPeriod": {
          "type": "string"
        },
        "downscaleDelay": {
          "type": "string"
        },
        "downscaleStabilization": {
          "type": "string"
        },
        "initialReadinessDelay": {
          "type": "string"
        },
        "syncPeriod": {
          "type": "string"
        },
        "tolerance": {
          "format": "double",
          "type": "number"
        },
        "upscaleDelay": {
          "type": "string"
        }
      }
    },
    "v1beta1.KubeAPIServerConfig": {
      "properties": {
        "admissionPlugins": {
          "items": {
            "$ref": "#/definitions/v1beta1.AdmissionPlugin"
          },
          "type": "array"
        },
        "apiAudiences": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "auditConfig": {
          "$ref": "#/definitions/v1beta1.AuditConfig"
        },
        "enableBasicAuthentication": {
          "type": "boolean"
        },
        "featureGates": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "oidcConfig": {
          "$ref": "#/definitions/v1beta1.OIDCConfig"
        },
        "runtimeConfig": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "serviceAccountConfig": {
          "$ref": "#/definitions/v1beta1.ServiceAccountConfig"
        }
      }
    },
    "v1beta1.KubeControllerManagerConfig": {
      "properties": {
        "featureGates": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "horizontalPodAutoscaler": {
          "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerConfig"
        },
        "nodeCIDRMaskSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1beta1.KubeProxyConfig": {
      "properties": {
        "featureGates": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "mode": {
          "type": "string"
        }
      }
    },
    "v1beta1.KubeSchedulerConfig": {
      "properties": {
        "featureGates": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        }
      }
    },
    "v1beta1.KubeletConfig": {
      "properties": {
        "cpuCFSQuota": {
          "type": "boolean"
        },
        "cpuManagerPolicy": {
          "type": "string"
        },
        "evictionHard": {
          "$ref": "#/definitions/v1beta1.KubeletConfigEviction"
        },
        "evictionMaxPodGracePeriod": {
          "format": "int32",
          "type": "integer"
        },
        "evictionMinimumReclaim": {
          "$ref": "#/definitions/v1beta1.KubeletConfigEvictionMinimumReclaim"
        },
        "evictionPressureTransitionPeriod": {
          "type": "string"
        },
        "evictionSoft": {
          "$ref": "#/definitions/v1beta1.KubeletConfigEviction"
        },
        "evictionSoftGracePeriod": {
          "$ref": "#/definitions/v1beta1.KubeletConfigEvictionSoftGracePeriod"
        },
        "featureGates": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "imagePullProgressDeadline": {
          "type": "string"
        },
        "maxPods": {
          "format": "int32",
          "type": "integer"
        },
        "podPidsLimit": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "v1beta1.KubeletConfigEviction": {
      "properties": {
        "imageFSAvailable": {
          "type": "string"
        },
        "imageFSInodesFree": {
          "type": "string"
        },
        "memoryAvailable": {
          "type": "string"
        },
        "nodeFSAvailable": {
          "type": "string"
        },
        "nodeFSInodesFree": {
          "type": "string"
        }
      }
    },
    "v1beta1.KubeletConfigEvictionMinimumReclaim": {
      "properties": {
        "imageFSAvailable": {
          "type": "string"
        },
        "imageFSInodesFree": {
          "type": "string"
        },
        "memoryAvailable": {
          "type": "string"
        },
        "nodeFSAvailable": {
          "type": "string"
        },
        "nodeFSInodesFree": {
          "type": "string"
        }
      }
    },
    "v1beta1.KubeletConfigEvictionSoftGracePeriod": {
      "properties": {
        "imageFSAvailable": {
          "type": "string"
        },
        "imageFSInodesFree": {
          "type": "string"
        },
        "memoryAvailable": {
          "type": "string"
        },
        "nodeFSAvailable": {
          "type": "string"
        },
        "nodeFSInodesFree": {
          "type": "string"
        }
      }
    },
    "v1beta1.Kubernetes": {
      "properties": {
        "allowPrivilegedContainers": {
          "type": "boolean"
        },
        "clusterAutoscaler": {
          "$ref": "#/definitions/v1beta1.ClusterAutoscaler"
        },
        "kubeAPIServer": {
          "$ref": "#/definitions/v1beta1.KubeAPIServerConfig"
        },
        "kubeControllerManager": {
          "$ref": "#/definitions/v1beta1.KubeControllerManagerConfig"
        },
        "kubeProxy": {
          "$ref": "#/definitions/v1beta1.KubeProxyConfig"
        },
        "kubeScheduler": {
          "$ref": "#/definitions/v1beta1.KubeSchedulerConfig"
        },
        "kubelet": {
          "$ref": "#/definitions/v1beta1.KubeletConfig"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "version"
      ]
    },
    "v1beta1.KubernetesDashboard": {
      "properties": {
        "authenticationMode": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "v1beta1.LastError": {
      "properties": {
        "codes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "lastUpdateTime": {
          "type": "string"
        },
        "taskID": {
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "v1beta1.LastOperation": {
      "properties": {
        "description": {
          "type": "string"
        },
        "lastUpdateTime": {
          "type": "string"
        },
        "progress": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "lastUpdateTime",
        "progress",
        "state",
        "type"
      ]
    },
    "v1beta1.Machine": {
      "properties": {
        "image": {
          "$ref": "#/definitions/v1beta1.ShootMachineImage"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1beta1.Maintenance": {
      "properties": {
        "autoUpdate": {
          "$ref": "#/definitions/v1beta1.MaintenanceAutoUpdate"
        },
        "confineSpecUpdateRollout": {
          "type": "boolean"
        },
        "timeWindow": {
          "$ref": "#/definitions/v1beta1.MaintenanceTimeWindow"
        }
      }
    },
    "v1beta1.MaintenanceAutoUpdate": {
      "properties": {
        "kubernetesVersion": {
          "type": "boolean"
        },
        "machineImageVersion": {
          "type": "boolean"
        }
      },
      "required": [
        "kubernetesVersion",
        "machineImageVersion"
      ]
    },
    "v1beta1.MaintenanceTimeWindow": {
      "properties": {
        "begin": {
          "type": "string"
        },
        "end": {
          "type": "string"
        }
      },
      "required": [
        "begin",
        "end"
      ]
    },
    "v1beta1.Monitoring": {
      "properties": {
        "alerting": {
          "$ref": "#/definitions/v1beta1.Alerting"
        }
      }
    },
    "v1beta1.Networking": {
      "properties": {
        "nodes": {
          "type": "string"
        },
        "pods": {
          "type": "string"
        },
        "providerConfig": {
          "type": "string"
        },
        "services": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1beta1.NginxIngress": {
      "properties": {
        "config": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "enabled": {
          "type": "boolean"
        },
        "externalTrafficPolicy": {
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "v1beta1.OIDCConfig": {
      "properties": {
        "caBundle": {
          "type": "string"
        },
        "clientAuthentication": {
          "$ref": "#/definitions/v1beta1.OpenIDConnectClientAuthentication"
        },
        "clientID": {
          "type": "string"
        },
        "groupsClaim": {
          "type": "string"
        },
        "groupsPrefix": {
          "type": "string"
        },
        "issuerURL": {
          "type": "string"
        },
        "requiredClaims": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "signingAlgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usernameClaim": {
          "type": "string"
        },
        "usernamePrefix": {
          "type": "string"
        }
      }
    },
    "v1beta1.OpenIDConnectClientAuthentication": {
      "properties": {
        "extraConfig": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "v1beta1.Provider": {
      "properties": {
        "controlPlaneConfig": {
          "type": "string"
        },
        "infrastructureConfig": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "workers": {
          "items": {
            "$ref": "#/definitions/v1beta1.Worker"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "workers"
      ]
    },
    "v1beta1.ServiceAccountConfig": {
      "properties": {
        "issuer": {
          "type": "string"
        },
        "signingKeySecretName": {
          "$ref": "#/definitions/v1.LocalObjectReference"
        }
      }
    },
    "v1beta1.Shoot": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1beta1.ShootSpec"
        },
        "status": {
          "$ref": "#/definitions/v1beta1.ShootStatus"
        }
      }
    },
    "v1beta1.ShootMachineImage": {
      "properties": {
        "name": {
          "type": "string"
        },
        "providerConfig": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1beta1.ShootSpec": {
      "properties": {
        "addons": {
          "$ref": "#/definitions/v1beta1.Addons"
        },
        "cloudProfileName": {
          "type": "string"
        },
        "dns": {
          "$ref": "#/definitions/v1beta1.DNS"
        },
        "extensions": {
          "items": {
            "$ref": "#/definitions/v1beta1.Extension"
          },
          "type": "array"
        },
        "hibernation": {
          "$ref": "#/definitions/v1beta1.Hibernation"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1beta1.Kubernetes"
        },
        "maintenance": {
          "$ref": "#/definitions/v1beta1.Maintenance"
        },
        "monitoring": {
          "$ref": "#/definitions/v1beta1.Monitoring"
        },
        "networking": {
          "$ref": "#/definitions/v1beta1.Networking"
        },
        "provider": {
          "$ref": "#/definitions/v1beta1.Provider"
        },
        "purpose": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "secretBindingName": {
          "type": "string"
        },
        "seedName": {
          "type": "string"
        }
      },
      "required": [
        "cloudProfileName",
        "kubernetes",
        "networking",
        "provider",
        "region",
        "secretBindingName"
      ]
    },
    "v1beta1.ShootStatus": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1beta1.Condition"
          },
          "type": "array"
        },
        "constraints": {
          "items": {
            "$ref": "#/definitions/v1beta1.Condition"
          },
          "type": "array"
        },
        "gardener": {
          "$ref": "#/definitions/v1beta1.Gardener"
        },
        "hibernated": {
          "type": "boolean"
        },
        "lastErrors": {
          "items": {
            "$ref": "#/definitions/v1beta1.LastError"
          },
          "type": "array"
        },
        "lastOperation": {
          "$ref": "#/definitions/v1beta1.LastOperation"
        },
        "observedGeneration": {
          "format": "int64",
          "type": "integer"
        },
        "retryCycleStartTime": {
          "type": "string"
        },
        "seedName": {
          "type": "string"
        },
        "technicalID": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "required": [
        "gardener",
        "hibernated",
        "technicalID",
        "uid"
      ]
    },
    "v1beta1.Volume": {
      "properties": {
        "encrypted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "size"
      ]
    },
    "v1beta1.Worker": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "caBundle": {
          "type": "string"
        },
        "cri": {
          "$ref": "#/definitions/v1beta1.CRI"
        },
        "dataVolumes": {
          "items": {
            "$ref": "#/definitions/v1beta1.Volume"
          },
          "type": "array"
        },
        "kubeletDataVolumeName": {
          "type": "string"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1beta1.WorkerKubernetes"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "machine": {
          "$ref": "#/definitions/v1beta1.Machine"
        },
        "maxSurge": {
          "type": "string"
        },
        "maxUnavailable": {
          "type": "string"
        },
        "maximum": {
          "format": "int32",
          "type": "integer"
        },
        "minimum": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "providerConfig": {
          "type": "string"
        },
        "taints": {
          "items": {
            "$ref": "#/definitions/v1.Taint"
          },
          "type": "array"
        },
        "volume": {
          "$ref": "#/definitions/v1beta1.Volume"
        },
        "zones": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "machine",
        "maximum",
        "minimum",
        "name"
      ]
    },
    "v1beta1.WorkerKubernetes": {
      "properties": {
        "kubelet": {
          "$ref": "#/definitions/v1beta1.KubeletConfig"
        }
      }
    }
  },
  "info": {
    "contact": {
      "email": "devops@f-i-ts.de",
      "name": "Devops Team",
      "url": "http://www.f-i-ts.de"
    },
    "description": "Resource for managing pure metal cloud entities",
    "license": {
      "name": "MIT",
      "url": "http://mit.org"
    },
    "title": "cloud-api",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/accounting/cluster-usage": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "clusterUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get cluster usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/cluster-usage-csv": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "clusterUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get cluster usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/container-usage": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "containerUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ContainerUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ContainerUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get container usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/container-usage-csv": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "containerUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ContainerUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get container usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/ip-usage": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "ipUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get ip usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/ip-usage-csv": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "ipUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get ip usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/network-usage": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "networkUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get network usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/network-usage-csv": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "networkUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get network usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/s3-usage": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "s3Usage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3UsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3UsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get s3 bucket usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/s3-usage-csv": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "s3UsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3UsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get s3 bucket usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/volume-usage": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "volumeUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.VolumeUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get volume usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/volume-usage-csv": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "volumeUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.VolumeUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get volume usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/cluster": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listClusters",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ClusterResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all clusters",
        "tags": [
          "cluster"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates a cluster. if the cluster was changed since this one was read, a conflict is returned",
        "tags": [
          "cluster"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a cluster. if the given ID already exists a conflict is returned",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/constraints": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listConstraints",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ShootConstraints"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get constraints for cluster create",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findClusters",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ClusterResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find clusters by multiple criteria",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteCluster",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an cluster and returns the deleted entity",
        "tags": [
          "cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findCluster",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get cluster by id",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/kubeconfigtpl": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getClusterKubeconfigTpl",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterKubeconfigResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "gets the kubeconfig-template just with cluster-infos for the cluster",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/reconcile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "reconcileCluster",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "trigger cluster reconcilation ",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/sshkeypair": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getSSHKeyPair",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterCredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all the ssh-keypairs of the cluster",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.status"
            }
          },
          "500": {
            "description": "Unhealthy",
            "schema": {
              "$ref": "#/definitions/rest.status"
            }
          }
        },
        "summary": "perform a healthcheck",
        "tags": [
          "health"
        ]
      }
    },
    "/v1/ip": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listIPs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.V1IPResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all ips",
        "tags": [
          "ip"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates an ip.",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findIPs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.V1IPResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find ips by multiple criteria",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/free/{ip}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "freeIP",
        "parameters": [
          {
            "description": "address of the ip",
            "in": "path",
            "name": "ip",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "frees an ip and returns the freed entity",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/{ip}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getIP",
        "parameters": [
          {
            "description": "address of the ip",
            "in": "path",
            "name": "ip",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get ip by address",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/masterdata": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getMasterdata",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MasterdataLookupRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/v1.MasterdataLookupResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "gets Masterdata for given lookup criteria.",
        "tags": [
          "masterdata"
        ]
      }
    },
    "/v1/project": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all projects",
        "tags": [
          "project"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "412": {
            "description": "OptimisticLock",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "update a project. optimistic lock error can occur.",
        "tags": [
          "project"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a project. if the given ID already exists a conflict is returned",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/project/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteProject",
        "parameters": [
          {
            "description": "identifier of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes a project and returns the deleted entity",
        "tags": [
          "project"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findProject",
        "parameters": [
          {
            "description": "identifier of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get project by id",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/s3": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deletes3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3DeleteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3Response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an s3 user",
        "tags": [
          "s3"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "gets3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3GetRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3CredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get s3 user",
        "tags": [
          "s3"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updates3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3UpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3CredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates an s3 user.",
        "tags": [
          "s3"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "creates3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3CreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3CredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create an s3 user. if the given name for this tenant already exists a conflict is returned",
        "tags": [
          "s3"
        ]
      }
    },
    "/v1/s3/list": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "lists3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3ListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.S3Response"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "list s3 users",
        "tags": [
          "s3"
        ]
      }
    },
    "/v1/s3/partitions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "lists3partitions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.S3PartitionResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "list s3 partitions",
        "tags": [
          "s3"
        ]
      }
    },
    "/v1/tenant": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateTenant",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.TenantUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/v1.TenantResponse"
            }
          },
          "412": {
            "description": "OptimisticLock",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "update a tenant. optimistic lock error can occur.",
        "tags": [
          "tenant"
        ]
      }
    },
    "/v1/tenant/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getTenant",
        "parameters": [
          {
            "description": "identifier of the tenant",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.TenantResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get tenant by id",
        "tags": [
          "tenant"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "info",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.version"
            }
          }
        },
        "summary": "returns the current version information of this module",
        "tags": [
          "version"
        ]
      }
    }
  },
  "security": [
    {
      "Authorization": [
        "jwt"
      ]
    }
  ],
  "securityDefinitions": {
    "jwt": {
      "description": "Add a 'Authorization: Bearer ....' header to the request",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "Managing kubernetes cluster entities",
      "name": "cluster"
    },
    {
      "description": "Managing project entities",
      "name": "project"
    },
    {
      "description": "Managing accounting entities",
      "name": "accounting"
    }
  ]
}
