{
  "basePath": "/",
  "definitions": {
    "httperrors.HTTPErrorResponse": {
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        },
        "statuscode": {
          "description": "http status code",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "message",
        "statuscode"
      ],
      "x-go-type": {
        "import": {
          "package": "github.com/metal-stack/metal-lib/httperrors"
        },
        "type": "HTTPErrorResponse"
      }
    },
    "models.V1BootInfo": {
      "properties": {
        "bootloaderid": {
          "type": "string"
        },
        "cmdline": {
          "type": "string"
        },
        "image_id": {
          "type": "string"
        },
        "initrd": {
          "type": "string"
        },
        "kernel": {
          "type": "string"
        },
        "os_partition": {
          "type": "string"
        },
        "primary_disk": {
          "type": "string"
        }
      },
      "required": [
        "bootloaderid",
        "cmdline",
        "image_id",
        "initrd",
        "kernel",
        "os_partition",
        "primary_disk"
      ]
    },
    "models.V1ChassisIdentifyLEDState": {
      "properties": {
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "value"
      ]
    },
    "models.V1Disk": {
      "properties": {
        "device": {
          "type": "string"
        },
        "partitions": {
          "items": {
            "$ref": "#/definitions/models.V1DiskPartition"
          },
          "type": "array"
        },
        "wipeonreinstall": {
          "type": "boolean"
        }
      },
      "required": [
        "device",
        "partitions",
        "wipeonreinstall"
      ]
    },
    "models.V1DiskPartition": {
      "properties": {
        "gpttype": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "number": {
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "gpttype",
        "number",
        "size"
      ]
    },
    "models.V1Filesystem": {
      "properties": {
        "createoptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "device": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "mountoptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "type": "string"
        }
      },
      "required": [
        "createoptions",
        "device",
        "format",
        "mountoptions"
      ]
    },
    "models.V1FilesystemLayoutConstraints": {
      "properties": {
        "images": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "sizes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "images",
        "sizes"
      ]
    },
    "models.V1FilesystemLayoutResponse": {
      "properties": {
        "constraints": {
          "$ref": "#/definitions/models.V1FilesystemLayoutConstraints"
        },
        "description": {
          "type": "string"
        },
        "disks": {
          "items": {
            "$ref": "#/definitions/models.V1Disk"
          },
          "type": "array"
        },
        "filesystems": {
          "items": {
            "$ref": "#/definitions/models.V1Filesystem"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "logicalvolumes": {
          "items": {
            "$ref": "#/definitions/models.V1LogicalVolume"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "raid": {
          "items": {
            "$ref": "#/definitions/models.V1Raid"
          },
          "type": "array"
        },
        "volumegroups": {
          "items": {
            "$ref": "#/definitions/models.V1VolumeGroup"
          },
          "type": "array"
        }
      },
      "required": [
        "constraints",
        "disks",
        "filesystems",
        "id",
        "logicalvolumes",
        "raid",
        "volumegroups"
      ]
    },
    "models.V1IPAllocateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "machineid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkid": {
          "type": "string"
        },
        "projectid": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "networkid",
        "projectid",
        "tags",
        "type"
      ]
    },
    "models.V1IPFindRequest": {
      "properties": {
        "allocationuuid": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "machineid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkid": {
          "type": "string"
        },
        "networkprefix": {
          "type": "string"
        },
        "projectid": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "tags"
      ]
    },
    "models.V1IPResponse": {
      "properties": {
        "allocationuuid": {
          "type": "string"
        },
        "changed": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkid": {
          "type": "string"
        },
        "projectid": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "allocationuuid",
        "ipaddress",
        "networkid",
        "projectid",
        "tags",
        "type"
      ]
    },
    "models.V1IPUpdateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "ipaddress",
        "tags",
        "type"
      ]
    },
    "models.V1ImageResponse": {
      "properties": {
        "changed": {
          "type": "string"
        },
        "classification": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "usedby": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "expirationDate",
        "features",
        "id",
        "usedby"
      ]
    },
    "models.V1LogicalVolume": {
      "properties": {
        "lvmtype": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "volumegroup": {
          "type": "string"
        }
      },
      "required": [
        "lvmtype",
        "name",
        "size",
        "volumegroup"
      ]
    },
    "models.V1MachineAllocation": {
      "properties": {
        "boot_info": {
          "$ref": "#/definitions/models.V1BootInfo"
        },
        "created": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "filesystemlayout": {
          "$ref": "#/definitions/models.V1FilesystemLayoutResponse"
        },
        "hostname": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/models.V1ImageResponse"
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "items": {
            "$ref": "#/definitions/models.V1MachineNetwork"
          },
          "type": "array"
        },
        "project": {
          "type": "string"
        },
        "reinstall": {
          "type": "boolean"
        },
        "role": {
          "type": "string"
        },
        "ssh_pub_keys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "succeeded": {
          "type": "boolean"
        },
        "user_data": {
          "type": "string"
        },
        "vpn": {
          "$ref": "#/definitions/models.V1MachineVPN"
        }
      },
      "required": [
        "created",
        "creator",
        "hostname",
        "name",
        "networks",
        "project",
        "reinstall",
        "role",
        "ssh_pub_keys",
        "succeeded"
      ]
    },
    "models.V1MachineBIOS": {
      "properties": {
        "date": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "date",
        "vendor",
        "version"
      ]
    },
    "models.V1MachineBlockDevice": {
      "properties": {
        "name": {
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "size"
      ]
    },
    "models.V1MachineHardware": {
      "properties": {
        "cpu_cores": {
          "format": "int32",
          "type": "integer"
        },
        "disks": {
          "items": {
            "$ref": "#/definitions/models.V1MachineBlockDevice"
          },
          "type": "array"
        },
        "memory": {
          "format": "int64",
          "type": "integer"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/models.V1MachineNic"
          },
          "type": "array"
        }
      },
      "required": [
        "cpu_cores",
        "disks",
        "memory",
        "nics"
      ]
    },
    "models.V1MachineNetwork": {
      "properties": {
        "asn": {
          "format": "int64",
          "type": "integer"
        },
        "destinationprefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nat": {
          "type": "boolean"
        },
        "networkid": {
          "type": "string"
        },
        "networktype": {
          "type": "string"
        },
        "prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "private": {
          "type": "boolean"
        },
        "underlay": {
          "type": "boolean"
        },
        "vrf": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "asn",
        "destinationprefixes",
        "ips",
        "nat",
        "networkid",
        "networktype",
        "prefixes",
        "private",
        "underlay",
        "vrf"
      ]
    },
    "models.V1MachineNic": {
      "properties": {
        "identifier": {
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "neighbors": {
          "items": {
            "$ref": "#/definitions/models.V1MachineNic"
          },
          "type": "array"
        }
      },
      "required": [
        "identifier",
        "mac",
        "name",
        "neighbors"
      ]
    },
    "models.V1MachineProvisioningEvent": {
      "properties": {
        "event": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      },
      "required": [
        "event"
      ]
    },
    "models.V1MachineRecentProvisioningEvents": {
      "properties": {
        "crash_loop": {
          "type": "boolean"
        },
        "failed_machine_reclaim": {
          "type": "boolean"
        },
        "last_error_event": {
          "$ref": "#/definitions/models.V1MachineProvisioningEvent"
        },
        "last_event_time": {
          "type": "string"
        },
        "log": {
          "items": {
            "$ref": "#/definitions/models.V1MachineProvisioningEvent"
          },
          "type": "array"
        }
      },
      "required": [
        "crash_loop",
        "failed_machine_reclaim",
        "log"
      ]
    },
    "models.V1MachineResponse": {
      "properties": {
        "allocation": {
          "$ref": "#/definitions/models.V1MachineAllocation"
        },
        "bios": {
          "$ref": "#/definitions/models.V1MachineBIOS"
        },
        "changed": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "events": {
          "$ref": "#/definitions/models.V1MachineRecentProvisioningEvents"
        },
        "hardware": {
          "$ref": "#/definitions/models.V1MachineHardware"
        },
        "id": {
          "type": "string"
        },
        "ledstate": {
          "$ref": "#/definitions/models.V1ChassisIdentifyLEDState"
        },
        "liveliness": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/models.V1PartitionResponse"
        },
        "rackid": {
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/models.V1SizeResponse"
        },
        "state": {
          "$ref": "#/definitions/models.V1MachineState"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "bios",
        "events",
        "hardware",
        "id",
        "ledstate",
        "liveliness",
        "state",
        "tags"
      ]
    },
    "models.V1MachineState": {
      "properties": {
        "description": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "metal_hammer_version": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "metal_hammer_version",
        "value"
      ]
    },
    "models.V1MachineVPN": {
      "properties": {
        "address": {
          "type": "string"
        },
        "auth_key": {
          "type": "string"
        },
        "connected": {
          "type": "boolean"
        }
      },
      "required": [
        "address",
        "auth_key",
        "connected"
      ]
    },
    "models.V1PartitionBootConfiguration": {
      "properties": {
        "commandline": {
          "type": "string"
        },
        "imageurl": {
          "type": "string"
        },
        "kernelurl": {
          "type": "string"
        }
      }
    },
    "models.V1PartitionResponse": {
      "properties": {
        "bootconfig": {
          "$ref": "#/definitions/models.V1PartitionBootConfiguration"
        },
        "changed": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mgmtserviceaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "privatenetworkprefixlength": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "bootconfig",
        "id"
      ]
    },
    "models.V1Raid": {
      "properties": {
        "arrayname": {
          "type": "string"
        },
        "createoptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "devices": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "level": {
          "type": "string"
        },
        "spares": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "arrayname",
        "createoptions",
        "devices",
        "level",
        "spares"
      ]
    },
    "models.V1SizeConstraint": {
      "properties": {
        "max": {
          "format": "int64",
          "type": "integer"
        },
        "min": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "max",
        "min",
        "type"
      ]
    },
    "models.V1SizeResponse": {
      "properties": {
        "changed": {
          "type": "string"
        },
        "constraints": {
          "items": {
            "$ref": "#/definitions/models.V1SizeConstraint"
          },
          "type": "array"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "constraints",
        "id"
      ]
    },
    "models.V1VolumeGroup": {
      "properties": {
        "devices": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "devices",
        "name",
        "tags"
      ]
    },
    "rest.HealthResponse": {
      "properties": {
        "message": {
          "type": "string"
        },
        "services": {
          "additionalProperties": {
            "$ref": "#/definitions/rest.HealthResult"
          },
          "type": "object"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "services",
        "status"
      ]
    },
    "rest.HealthResult": {
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "status"
      ]
    },
    "rest.version": {
      "properties": {
        "builddate": {
          "type": "string"
        },
        "gitsha1": {
          "type": "string"
        },
        "min_client_version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "builddate",
        "gitsha1",
        "min_client_version",
        "name",
        "revision",
        "version"
      ]
    },
    "v1.AccessList": {
      "properties": {
        "sourceRanges": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "v1.Audit": {
      "properties": {
        "auditPolicy": {
          "type": "string"
        },
        "backends": {
          "$ref": "#/definitions/v1.AuditBackends"
        },
        "disabled": {
          "type": "boolean"
        },
        "webhookMode": {
          "enum": [
            "batch",
            "blocking",
            "blocking-strict"
          ],
          "type": "string"
        }
      },
      "required": [
        "auditPolicy",
        "disabled",
        "webhookMode"
      ]
    },
    "v1.AuditBackendClusterForwarding": {
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "v1.AuditBackendSplunk": {
      "properties": {
        "ca": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "host": {
          "type": "string"
        },
        "index": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "tls": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "ca",
        "enabled",
        "host",
        "index",
        "port",
        "tls",
        "token"
      ]
    },
    "v1.AuditBackends": {
      "properties": {
        "clusterForwarding": {
          "$ref": "#/definitions/v1.AuditBackendClusterForwarding"
        },
        "splunk": {
          "$ref": "#/definitions/v1.AuditBackendSplunk"
        }
      }
    },
    "v1.AuditFindRequest": {
      "properties": {
        "body": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "forwarded_for": {
          "type": "string"
        },
        "from": {
          "format": "date-time",
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "remote_addr": {
          "type": "string"
        },
        "rqid": {
          "type": "string"
        },
        "status_code": {
          "format": "int32",
          "type": "integer"
        },
        "tenant": {
          "type": "string"
        },
        "to": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "v1.AuditPolicyResponse": {
      "properties": {
        "raw": {
          "type": "string"
        }
      },
      "required": [
        "raw"
      ]
    },
    "v1.AuditResponse": {
      "properties": {
        "body": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "forwarded_for": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "remote_addr": {
          "type": "string"
        },
        "rqid": {
          "type": "string"
        },
        "status_code": {
          "format": "int32",
          "type": "integer"
        },
        "tenant": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "v1.ClusterCreateRequest": {
      "properties": {
        "AdditionalNetworks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Audit": {
          "$ref": "#/definitions/v1.Audit"
        },
        "ClusterFeatures": {
          "$ref": "#/definitions/v1.ClusterFeatures"
        },
        "CustomDefaultStorageClass": {
          "$ref": "#/definitions/v1.CustomDefaultStorageClass"
        },
        "Description": {
          "type": "string"
        },
        "EgressRules": {
          "items": {
            "$ref": "#/definitions/v1.EgressRule"
          },
          "type": "array"
        },
        "FirewallControllerVersion": {
          "type": "string"
        },
        "FirewallImage": {
          "type": "string"
        },
        "FirewallSize": {
          "type": "string"
        },
        "KubeAPIServerACL": {
          "$ref": "#/definitions/v1.KubeAPIServerACL"
        },
        "Kubernetes": {
          "$ref": "#/definitions/v1.Kubernetes"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Maintenance": {
          "$ref": "#/definitions/v1.Maintenance"
        },
        "Name": {
          "type": "string"
        },
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "Purpose": {
          "type": "string"
        },
        "SystemComponents": {
          "$ref": "#/definitions/v1.SystemComponents"
        },
        "Tenant": {
          "type": "string"
        },
        "Workers": {
          "items": {
            "$ref": "#/definitions/v1.Worker"
          },
          "type": "array"
        },
        "cni": {
          "type": "string"
        },
        "seedName": {
          "description": "seed name on which the cluster will be scheduled",
          "type": "string"
        }
      },
      "required": [
        "AdditionalNetworks",
        "Audit",
        "ClusterFeatures",
        "CustomDefaultStorageClass",
        "Description",
        "EgressRules",
        "FirewallControllerVersion",
        "FirewallImage",
        "FirewallSize",
        "KubeAPIServerACL",
        "Kubernetes",
        "Labels",
        "Maintenance",
        "Name",
        "PartitionID",
        "ProjectID",
        "Purpose",
        "SystemComponents",
        "Tenant",
        "Workers"
      ]
    },
    "v1.ClusterCredentialsResponse": {
      "properties": {
        "Kubeconfig": {
          "type": "string"
        },
        "SSHKeyPair": {
          "$ref": "#/definitions/v1.SSHKeyPair"
        },
        "VPN": {
          "$ref": "#/definitions/v1.VPN"
        }
      },
      "required": [
        "Kubeconfig",
        "SSHKeyPair",
        "VPN"
      ]
    },
    "v1.ClusterFeatures": {
      "properties": {
        "DurosStorageEncryption": {
          "type": "string"
        },
        "LogAcceptedConnections": {
          "type": "string"
        }
      },
      "required": [
        "DurosStorageEncryption",
        "LogAcceptedConnections"
      ]
    },
    "v1.ClusterFindRequest": {
      "properties": {
        "ID": {
          "type": "string"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Name": {
          "type": "string"
        },
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "Purpose": {
          "type": "string"
        },
        "SeedName": {
          "type": "string"
        },
        "Tenant": {
          "type": "string"
        }
      },
      "required": [
        "ID",
        "Labels",
        "Name",
        "PartitionID",
        "ProjectID",
        "Purpose",
        "SeedName",
        "Tenant"
      ]
    },
    "v1.ClusterHealth": {
      "properties": {
        "NumDegradedVolumes": {
          "format": "integer",
          "type": "integer"
        },
        "NumInactiveNodes": {
          "format": "integer",
          "type": "integer"
        },
        "NumNotAvailableVolumes": {
          "format": "integer",
          "type": "integer"
        },
        "NumReadOnlyVolumes": {
          "format": "integer",
          "type": "integer"
        },
        "State": {
          "type": "string"
        }
      },
      "required": [
        "NumDegradedVolumes",
        "NumInactiveNodes",
        "NumNotAvailableVolumes",
        "NumReadOnlyVolumes",
        "State"
      ]
    },
    "v1.ClusterKubeconfigResponse": {
      "properties": {
        "Kubeconfig": {
          "type": "string"
        }
      },
      "required": [
        "Kubeconfig"
      ]
    },
    "v1.ClusterMachineCycleRequest": {
      "properties": {
        "machineid": {
          "description": "uuid of the machine to power cycle",
          "type": "string"
        }
      },
      "required": [
        "machineid"
      ]
    },
    "v1.ClusterMachineReinstallRequest": {
      "properties": {
        "imageid": {
          "description": "id of the image to install",
          "type": "string"
        },
        "machineid": {
          "description": "uuid of the machine to reinstall",
          "type": "string"
        }
      },
      "required": [
        "machineid"
      ]
    },
    "v1.ClusterMachineResetRequest": {
      "properties": {
        "machineid": {
          "description": "uuid of the machine to power reset",
          "type": "string"
        }
      },
      "required": [
        "machineid"
      ]
    },
    "v1.ClusterMonitoringSecretResponse": {
      "properties": {
        "Endpoint": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "User": {
          "type": "string"
        }
      },
      "required": [
        "Endpoint",
        "Password",
        "User"
      ]
    },
    "v1.ClusterNameProject": {
      "properties": {
        "cluster_name": {
          "description": "cluster name",
          "type": "string"
        },
        "project": {
          "description": "generated middle-part of gardener shoot namespace, e.g. 'ps5d42'",
          "type": "string"
        }
      }
    },
    "v1.ClusterReconcileRequest": {
      "properties": {
        "operation": {
          "description": "the gardener shoot operation annotation to annotate the shoot with",
          "enum": [
            "maintain",
            "reconcile",
            "retry",
            "rotate-ssh-keypair"
          ],
          "type": "string"
        }
      },
      "required": [
        "operation"
      ]
    },
    "v1.ClusterResponse": {
      "properties": {
        "AdditionalNetworks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Audit": {
          "$ref": "#/definitions/v1.Audit"
        },
        "ClusterFeatures": {
          "$ref": "#/definitions/v1.ClusterFeatures"
        },
        "ControlPlaneFeatureGates": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "CreationTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Creator": {
          "type": "string"
        },
        "CustomDefaultStorageClass": {
          "$ref": "#/definitions/v1.CustomDefaultStorageClass"
        },
        "DNSEndpoint": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EgressRules": {
          "items": {
            "$ref": "#/definitions/v1.EgressRule"
          },
          "type": "array"
        },
        "FirewallControllerVersion": {
          "type": "string"
        },
        "FirewallImage": {
          "type": "string"
        },
        "FirewallSize": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        },
        "KubeAPIServerACL": {
          "$ref": "#/definitions/v1.KubeAPIServerACL"
        },
        "Kubernetes": {
          "$ref": "#/definitions/v1.Kubernetes"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Maintenance": {
          "$ref": "#/definitions/v1.Maintenance"
        },
        "Name": {
          "type": "string"
        },
        "Networking": {
          "$ref": "#/definitions/v1.Networking"
        },
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "Purpose": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/v1beta1.ShootStatus"
        },
        "SystemComponents": {
          "$ref": "#/definitions/v1.SystemComponents"
        },
        "Tenant": {
          "type": "string"
        },
        "Workers": {
          "items": {
            "$ref": "#/definitions/v1.Worker"
          },
          "type": "array"
        },
        "cni": {
          "type": "string"
        },
        "firewalls": {
          "description": "the firewalls which belong to this cluster",
          "items": {
            "$ref": "#/definitions/models.V1MachineResponse"
          },
          "type": "array"
        },
        "machines": {
          "description": "the machines which belong to this cluster",
          "items": {
            "$ref": "#/definitions/models.V1MachineResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "AdditionalNetworks",
        "Audit",
        "ClusterFeatures",
        "ControlPlaneFeatureGates",
        "CreationTimestamp",
        "Creator",
        "CustomDefaultStorageClass",
        "DNSEndpoint",
        "Description",
        "EgressRules",
        "FirewallControllerVersion",
        "FirewallImage",
        "FirewallSize",
        "ID",
        "KubeAPIServerACL",
        "Kubernetes",
        "Labels",
        "Maintenance",
        "Name",
        "Networking",
        "PartitionID",
        "ProjectID",
        "Purpose",
        "Status",
        "SystemComponents",
        "Tenant",
        "Workers",
        "cni"
      ]
    },
    "v1.ClusterStatisticsApi": {
      "properties": {
        "CompressionRatio": {
          "format": "double",
          "type": "number"
        },
        "EffectivePhysicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "EstimatedFreeLogicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "EstimatedLogicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "FreePhysicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "InstalledPhysicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "LogicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "LogicalUsedStorage": {
          "format": "integer",
          "type": "integer"
        },
        "ManagedPhysicalStorage": {
          "format": "integer",
          "type": "integer"
        },
        "PhysicalUsedStorage": {
          "format": "integer",
          "type": "integer"
        },
        "PhysicalUsedStorageIncludingParity": {
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "CompressionRatio",
        "EffectivePhysicalStorage",
        "EstimatedFreeLogicalStorage",
        "EstimatedLogicalStorage",
        "FreePhysicalStorage",
        "InstalledPhysicalStorage",
        "LogicalStorage",
        "LogicalUsedStorage",
        "ManagedPhysicalStorage",
        "PhysicalUsedStorage",
        "PhysicalUsedStorageIncludingParity"
      ]
    },
    "v1.ClusterUpdateRequest": {
      "properties": {
        "AdditionalNetworks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Audit": {
          "$ref": "#/definitions/v1.Audit"
        },
        "ClusterFeatures": {
          "$ref": "#/definitions/v1.ClusterFeatures"
        },
        "CustomDefaultStorageClass": {
          "$ref": "#/definitions/v1.CustomDefaultStorageClass"
        },
        "EgressRules": {
          "items": {
            "$ref": "#/definitions/v1.EgressRule"
          },
          "type": "array"
        },
        "FirewallControllerVersion": {
          "type": "string"
        },
        "FirewallImage": {
          "type": "string"
        },
        "FirewallSize": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        },
        "KubeAPIServerACL": {
          "$ref": "#/definitions/v1.KubeAPIServerACL"
        },
        "Kubernetes": {
          "$ref": "#/definitions/v1.Kubernetes"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Maintenance": {
          "$ref": "#/definitions/v1.Maintenance"
        },
        "Purpose": {
          "type": "string"
        },
        "SystemComponents": {
          "$ref": "#/definitions/v1.SystemComponents"
        },
        "Workers": {
          "items": {
            "$ref": "#/definitions/v1.Worker"
          },
          "type": "array"
        },
        "seedName": {
          "description": "seed name on which the cluster will be scheduled",
          "type": "string"
        }
      },
      "required": [
        "AdditionalNetworks",
        "Audit",
        "ClusterFeatures",
        "CustomDefaultStorageClass",
        "EgressRules",
        "FirewallControllerVersion",
        "FirewallImage",
        "FirewallSize",
        "ID",
        "KubeAPIServerACL",
        "Kubernetes",
        "Labels",
        "Maintenance",
        "Purpose",
        "SystemComponents",
        "Workers",
        "seedName"
      ]
    },
    "v1.ClusterUsage": {
      "properties": {
        "averageworkergroups": {
          "description": "the average amount of worker groups during the time window",
          "type": "string"
        },
        "clusterend": {
          "description": "the end time of this cluster",
          "format": "date-time",
          "type": "string"
        },
        "clusterid": {
          "description": "the cluster id of this cluster",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this cluster",
          "type": "string"
        },
        "clusterstart": {
          "description": "the start time of this cluster",
          "format": "date-time",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this cluster is running",
          "format": "int64",
          "type": "integer"
        },
        "partition": {
          "description": "the partition of this cluster",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        },
        "workergroups": {
          "description": "the worker groups of this cluster",
          "items": {
            "$ref": "#/definitions/v1.ClusterWorker"
          },
          "type": "array"
        }
      },
      "required": [
        "averageworkergroups",
        "clusterend",
        "clusterid",
        "clustername",
        "clusterstart",
        "contract",
        "debtorid",
        "lifetime",
        "partition",
        "projectid",
        "projectname",
        "tenant",
        "tenantname",
        "workergroups"
      ]
    },
    "v1.ClusterUsageAccumuluated": {
      "properties": {
        "lifetime": {
          "description": "the duration that this cluster is running",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "lifetime"
      ]
    },
    "v1.ClusterUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.ClusterUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.ClusterUsageAccumuluated",
          "description": "just the usage data of the individual clusters summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual clusters",
          "items": {
            "$ref": "#/definitions/v1.ClusterUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.ClusterWorker": {
      "properties": {
        "machinecount": {
          "description": "the machine count of this worker group",
          "format": "integer",
          "type": "integer"
        },
        "machinetype": {
          "description": "the machine type",
          "type": "string"
        },
        "name": {
          "description": "name of the worker group",
          "type": "string"
        }
      },
      "required": [
        "machinecount",
        "machinetype",
        "name"
      ]
    },
    "v1.Connection": {
      "properties": {
        "localSideIsPrimary": {
          "type": "boolean"
        },
        "postgresID": {
          "type": "string"
        },
        "synchronous": {
          "type": "boolean"
        }
      }
    },
    "v1.ContainerUsage": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this container",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clusterid": {
          "description": "the cluster id of this container",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this container",
          "type": "string"
        },
        "containerimage": {
          "description": "the container image of this container",
          "type": "string"
        },
        "containername": {
          "description": "the name of this container",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "cpuseconds": {
          "description": "the cpu seconds of this container (s*s)",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this container is running",
          "format": "int64",
          "type": "integer"
        },
        "memoryseconds": {
          "description": "the memory seconds of this container (byte*s)",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace of this container",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this container",
          "type": "string"
        },
        "podend": {
          "description": "the pod end time of this container",
          "format": "date-time",
          "type": "string"
        },
        "podname": {
          "description": "the pod name of this container",
          "type": "string"
        },
        "podstart": {
          "description": "the pod start time of this container",
          "format": "date-time",
          "type": "string"
        },
        "poduuid": {
          "description": "the pod uuid of this container",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "clusterid",
        "clustername",
        "containerimage",
        "containername",
        "contract",
        "cpuseconds",
        "debtorid",
        "lifetime",
        "memoryseconds",
        "namespace",
        "partition",
        "podend",
        "podname",
        "podstart",
        "poduuid",
        "projectid",
        "projectname",
        "tenant",
        "tenantname"
      ]
    },
    "v1.ContainerUsageAccumuluated": {
      "properties": {
        "cpuseconds": {
          "description": "the accumuluated cpu seconds of the containers in this response (s*s)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this container is running",
          "format": "int64",
          "type": "integer"
        },
        "memoryseconds": {
          "description": "the accumulated memory seconds of the containers in this response (byte*s)",
          "type": "string"
        }
      },
      "required": [
        "cpuseconds",
        "lifetime",
        "memoryseconds"
      ]
    },
    "v1.ContainerUsageRequest": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this container",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace name to account for",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "from"
      ]
    },
    "v1.ContainerUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.ContainerUsageAccumuluated",
          "description": "just the usage data of the individual containers summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual containers",
          "items": {
            "$ref": "#/definitions/v1.ContainerUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.CustomDefaultStorageClass": {
      "properties": {
        "ClassName": {
          "type": "string"
        }
      },
      "required": [
        "ClassName"
      ]
    },
    "v1.EgressRule": {
      "properties": {
        "IPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "NetworkID": {
          "type": "string"
        }
      },
      "required": [
        "IPs",
        "NetworkID"
      ]
    },
    "v1.FirewallControllerVersion": {
      "properties": {
        "Classification": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      },
      "required": [
        "Classification",
        "URL",
        "Version"
      ]
    },
    "v1.IAMConfig": {
      "properties": {
        "idm_config": {
          "$ref": "#/definitions/v1.IDMConfig"
        },
        "issuer_config": {
          "$ref": "#/definitions/v1.IssuerConfig"
        }
      }
    },
    "v1.IDMConfig": {
      "properties": {
        "idm_type": {
          "type": "string"
        }
      }
    },
    "v1.IPAllocateRequest": {
      "properties": {
        "SpecificIP": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "machineid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkid": {
          "type": "string"
        },
        "projectid": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "SpecificIP",
        "networkid",
        "projectid",
        "tags",
        "type"
      ]
    },
    "v1.IPFindRequest": {
      "properties": {
        "allocationuuid": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "machineid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkid": {
          "type": "string"
        },
        "networkprefix": {
          "type": "string"
        },
        "projectid": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "tags"
      ]
    },
    "v1.IPUpdateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "ipaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "ipaddress",
        "tags",
        "type"
      ]
    },
    "v1.IPUsage": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this ip",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "end": {
          "description": "the end time of this ip",
          "format": "date-time",
          "type": "string"
        },
        "ip": {
          "description": "the address of this ip",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this ip is allocated",
          "format": "int64",
          "type": "integer"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "start": {
          "description": "the start time of this ip",
          "format": "date-time",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        },
        "uuid": {
          "description": "the allocation uuid of this ip",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "contract",
        "debtorid",
        "end",
        "ip",
        "lifetime",
        "projectid",
        "projectname",
        "start",
        "tenant",
        "tenantname",
        "uuid"
      ]
    },
    "v1.IPUsageAccumuluated": {
      "properties": {
        "lifetime": {
          "description": "the duration that this ip is running",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "lifetime"
      ]
    },
    "v1.IPUsageRequest": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this ip",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the ip usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "from"
      ]
    },
    "v1.IPUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.IPUsageAccumuluated",
          "description": "just the usage data of the individual ips summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual network usage",
          "items": {
            "$ref": "#/definitions/v1.IPUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.IssuerConfig": {
      "properties": {
        "client_id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1.KubeAPIServerACL": {
      "properties": {
        "CIDRs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Disabled": {
          "type": "boolean"
        }
      },
      "required": [
        "CIDRs",
        "Disabled"
      ]
    },
    "v1.Kubernetes": {
      "properties": {
        "AllowPrivilegedContainers": {
          "type": "boolean"
        },
        "ExpirationDate": {
          "format": "date-time",
          "type": "string"
        },
        "MaxPodsPerNode": {
          "format": "int32",
          "type": "integer"
        },
        "Version": {
          "type": "string"
        },
        "defaultPodSecurityStandard": {
          "enum": [
            "",
            "baseline",
            "privileged",
            "restricted"
          ],
          "type": "string"
        },
        "disablePodSecurityPolicies": {
          "type": "boolean"
        }
      },
      "required": [
        "AllowPrivilegedContainers",
        "ExpirationDate",
        "Version",
        "defaultPodSecurityStandard",
        "disablePodSecurityPolicies"
      ]
    },
    "v1.MachineImage": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      },
      "required": [
        "Name",
        "Version"
      ]
    },
    "v1.MachineUsage": {
      "properties": {
        "clusterid": {
          "description": "the cluster id of this machine",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this machine",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this machine is running",
          "format": "int64",
          "type": "integer"
        },
        "machineend": {
          "description": "the end time of this machine",
          "format": "date-time",
          "type": "string"
        },
        "machinestart": {
          "description": "the start time of this machine",
          "format": "date-time",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this machine",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        }
      },
      "required": [
        "clusterid",
        "clustername",
        "contract",
        "debtorid",
        "lifetime",
        "machineend",
        "machinestart",
        "partition",
        "projectid",
        "projectname",
        "tenant",
        "tenantname"
      ]
    },
    "v1.MachineUsageAccumuluated": {
      "properties": {
        "lifetime": {
          "description": "the duration that the machines is running",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "lifetime"
      ]
    },
    "v1.MachineUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "the id of the machine",
          "type": "string"
        },
        "partition": {
          "description": "the partition of the machines",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "sizeid": {
          "description": "the size of the machines",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.MachineUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.MachineUsageAccumuluated",
          "description": "just the usage data of the individual machines summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual machines",
          "items": {
            "$ref": "#/definitions/v1.MachineUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.Maintenance": {
      "properties": {
        "AutoUpdate": {
          "$ref": "#/definitions/v1.MaintenanceAutoUpdate"
        },
        "TimeWindow": {
          "$ref": "#/definitions/v1.MaintenanceTimeWindow"
        }
      },
      "required": [
        "AutoUpdate",
        "TimeWindow"
      ]
    },
    "v1.MaintenanceAutoUpdate": {
      "properties": {
        "KubernetesVersion": {
          "type": "boolean"
        },
        "MachineImage": {
          "type": "boolean"
        }
      },
      "required": [
        "KubernetesVersion",
        "MachineImage"
      ]
    },
    "v1.MaintenanceTimeWindow": {
      "properties": {
        "Begin": {
          "type": "string"
        },
        "End": {
          "type": "string"
        }
      },
      "required": [
        "Begin",
        "End"
      ]
    },
    "v1.MasterdataLookupRequest": {
      "properties": {
        "cluster_id": {
          "description": "lookup by clusterID as returned by cloud-api (e.g. 345abc12-3321-4dbc-8d17-55c6ea4fcb38)",
          "type": "string"
        },
        "cluster_name_project": {
          "$ref": "#/definitions/v1.ClusterNameProject",
          "description": "lookup by clustername and shoot-project"
        },
        "project_id_time": {
          "$ref": "#/definitions/v1.ProjectIDTime",
          "description": "lookup at some point in time by projectID as returned by cloud-api (e.g. 10241dd7-a8de-4856-8ac0-b55830b22036)"
        }
      }
    },
    "v1.MasterdataLookupResponse": {
      "properties": {
        "project": {
          "$ref": "#/definitions/v1.Project",
          "description": "project"
        },
        "tenant": {
          "$ref": "#/definitions/v1.Tenant",
          "description": "tenant to which the project belongs"
        }
      }
    },
    "v1.Meta": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "apiversion": {
          "type": "string"
        },
        "created_time": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updated_time": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "v1.Network": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "default": {
          "type": "boolean"
        },
        "defaultExternal": {
          "type": "boolean"
        },
        "defaultPartitionStorage": {
          "type": "boolean"
        }
      },
      "required": [
        "Description",
        "ID",
        "Name",
        "Prefixes"
      ]
    },
    "v1.NetworkUsage": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this network device",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clusterid": {
          "description": "the cluster id of this network device",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this network device",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "device": {
          "description": "the device name of this network device",
          "type": "string"
        },
        "in": {
          "description": "the ingoing traffic of this network device (byte)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this network device is running",
          "format": "int64",
          "type": "integer"
        },
        "out": {
          "description": "the outgoing traffic of this network device (byte)",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this network device",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        },
        "total": {
          "description": "the total traffic of this network device (byte)",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "clusterid",
        "clustername",
        "contract",
        "debtorid",
        "device",
        "in",
        "lifetime",
        "out",
        "partition",
        "projectid",
        "projectname",
        "tenant",
        "tenantname",
        "total"
      ]
    },
    "v1.NetworkUsageAccumuluated": {
      "properties": {
        "in": {
          "description": "the accumuluated ingoing traffic (byte)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration for that the network usage is accounted",
          "format": "int64",
          "type": "integer"
        },
        "out": {
          "description": "the accumulated outgoing traffic (byte)",
          "type": "string"
        },
        "total": {
          "description": "the accumulated total traffic (byte)",
          "type": "string"
        }
      },
      "required": [
        "in",
        "lifetime",
        "out",
        "total"
      ]
    },
    "v1.NetworkUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "device": {
          "description": "the device to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.NetworkUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.NetworkUsageAccumuluated",
          "description": "just the usage data of the individual network traffic summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual network usage",
          "items": {
            "$ref": "#/definitions/v1.NetworkUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.Networking": {
      "properties": {
        "Nodes": {
          "type": "string"
        },
        "Pods": {
          "type": "string"
        },
        "Services": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "required": [
        "Nodes",
        "Pods",
        "Services",
        "Type"
      ]
    },
    "v1.NodeLocalDNS": {
      "properties": {
        "DisableForwardToUpstreamDNS": {
          "type": "boolean"
        },
        "Enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "DisableForwardToUpstreamDNS",
        "Enabled"
      ]
    },
    "v1.Paging": {
      "properties": {
        "count": {
          "format": "integer",
          "type": "integer"
        },
        "page": {
          "format": "integer",
          "type": "integer"
        }
      }
    },
    "v1.PostgresBackupConfigCreateRequest": {
      "properties": {
        "autocreate": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "retention": {
          "format": "int32",
          "type": "integer"
        },
        "s3BucketName": {
          "type": "string"
        },
        "s3Endpoint": {
          "type": "string"
        },
        "s3Region": {
          "type": "string"
        },
        "schedule": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/v1.PostgresBackupSecret"
        }
      },
      "required": [
        "createdBy"
      ]
    },
    "v1.PostgresBackupConfigResponse": {
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "retention": {
          "format": "int32",
          "type": "integer"
        },
        "s3BucketName": {
          "type": "string"
        },
        "s3Endpoint": {
          "type": "string"
        },
        "s3Region": {
          "type": "string"
        },
        "schedule": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/v1.PostgresBackupSecret"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "createdBy",
        "id"
      ]
    },
    "v1.PostgresBackupConfigUpdateRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "retention": {
          "format": "int32",
          "type": "integer"
        },
        "schedule": {
          "type": "string"
        }
      }
    },
    "v1.PostgresBackupEntry": {
      "properties": {
        "name": {
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "size",
        "timestamp"
      ]
    },
    "v1.PostgresBackupSecret": {
      "properties": {
        "accesskey": {
          "type": "string"
        },
        "s3encryptionkey": {
          "type": "string"
        },
        "secretkey": {
          "type": "string"
        }
      }
    },
    "v1.PostgresCreateRequest": {
      "properties": {
        "accessList": {
          "$ref": "#/definitions/v1.AccessList"
        },
        "auditLogs": {
          "type": "boolean"
        },
        "autoassigndedicatedlbipfrom": {
          "type": "string"
        },
        "backup": {
          "type": "string"
        },
        "dedicatedloadbalancerip": {
          "type": "string"
        },
        "dedicatedloadbalancerport": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "maintenance": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "numberOfInstances": {
          "format": "int32",
          "type": "integer"
        },
        "partitionID": {
          "type": "string"
        },
        "postgresParams": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "projectID": {
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/v1.PostgresSize"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "dedicatedloadbalancerip",
        "dedicatedloadbalancerport"
      ]
    },
    "v1.PostgresCreateStandbyRequest": {
      "properties": {
        "autoassigndedicatedlbipfrom": {
          "type": "string"
        },
        "backup": {
          "type": "string"
        },
        "dedicatedloadbalancerip": {
          "type": "string"
        },
        "dedicatedloadbalancerport": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "maintenance": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "numberOfInstances": {
          "format": "int32",
          "type": "integer"
        },
        "partitionID": {
          "type": "string"
        },
        "primaryId": {
          "type": "string"
        }
      },
      "required": [
        "dedicatedloadbalancerip",
        "dedicatedloadbalancerport",
        "primaryId"
      ]
    },
    "v1.PostgresFindRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "partitionID": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      }
    },
    "v1.PostgresPartition": {
      "properties": {
        "AllowedTenants": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        }
      },
      "required": [
        "AllowedTenants"
      ]
    },
    "v1.PostgresPartitionsResponse": {
      "additionalProperties": {
        "$ref": "#/definitions/v1.PostgresPartition"
      },
      "type": "object"
    },
    "v1.PostgresResponse": {
      "properties": {
        "accessList": {
          "$ref": "#/definitions/v1.AccessList"
        },
        "auditLogs": {
          "type": "boolean"
        },
        "backup": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/v1.Connection"
        },
        "createdBy": {
          "type": "string"
        },
        "creationTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "dedicatedloadbalancerip": {
          "type": "string"
        },
        "dedicatedloadbalancerport": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "maintenance": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "numberOfInstances": {
          "format": "int32",
          "type": "integer"
        },
        "partitionID": {
          "type": "string"
        },
        "postgresParams": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "projectID": {
          "type": "string"
        },
        "restore": {
          "$ref": "#/definitions/v1.Restore"
        },
        "size": {
          "$ref": "#/definitions/v1.PostgresSize"
        },
        "status": {
          "$ref": "#/definitions/v1.PostgresStatus"
        },
        "tenant": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "dedicatedloadbalancerip",
        "dedicatedloadbalancerport",
        "id",
        "status"
      ]
    },
    "v1.PostgresRestoreRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "maintenance": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "partitionID": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "sourceId"
      ]
    },
    "v1.PostgresSecretsRespone": {
      "properties": {
        "userSecret": {
          "items": {
            "$ref": "#/definitions/v1.UserSecret"
          },
          "type": "array"
        }
      }
    },
    "v1.PostgresSize": {
      "properties": {
        "cpu": {
          "type": "string"
        },
        "sharedBuffer": {
          "type": "string"
        },
        "storageSize": {
          "type": "string"
        }
      }
    },
    "v1.PostgresSocket": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1.PostgresStatus": {
      "properties": {
        "additionalsockets": {
          "items": {
            "$ref": "#/definitions/v1.PostgresSocket"
          },
          "type": "array"
        },
        "childReference": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "socket": {
          "$ref": "#/definitions/v1.PostgresSocket"
        }
      }
    },
    "v1.PostgresUpdateRequest": {
      "properties": {
        "accessList": {
          "$ref": "#/definitions/v1.AccessList"
        },
        "auditLogs": {
          "type": "boolean"
        },
        "autoassigndedicatedlbipfrom": {
          "type": "string"
        },
        "backup": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/v1.Connection"
        },
        "dedicatedloadbalancerip": {
          "type": "string"
        },
        "dedicatedloadbalancerport": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "$ref": "#/definitions/v1.PostgresUpdateRequest.labels"
        },
        "maintenance": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "numberOfInstances": {
          "format": "int32",
          "type": "integer"
        },
        "partitionID": {
          "type": "string"
        },
        "postgresParams": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "projectID": {
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/v1.PostgresSize"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "dedicatedloadbalancerip",
        "dedicatedloadbalancerport",
        "id"
      ]
    },
    "v1.PostgresUpdateRequest.labels": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "v1.PostgresUsage": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this postgres",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "cpuseconds": {
          "description": "the cpu seconds of this postgres (s*s)",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this postgres is running",
          "format": "int64",
          "type": "integer"
        },
        "memoryseconds": {
          "description": "the memory seconds of this postgres (byte*s)",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this postgres",
          "type": "string"
        },
        "postgresdescription": {
          "description": "the cluster name of this postgres",
          "type": "string"
        },
        "postgresend": {
          "description": "the end time of this postgres",
          "format": "date-time",
          "type": "string"
        },
        "postgresid": {
          "description": "the id of this postgres",
          "type": "string"
        },
        "postgresstart": {
          "description": "the start time of this postgres",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "storageseconds": {
          "description": "the accumulated storage seconds of the postgres in this response (byte*s)",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "contract",
        "cpuseconds",
        "debtorid",
        "lifetime",
        "memoryseconds",
        "partition",
        "postgresdescription",
        "postgresend",
        "postgresid",
        "postgresstart",
        "projectid",
        "projectname",
        "storageseconds",
        "tenant",
        "tenantname"
      ]
    },
    "v1.PostgresUsageAccumuluated": {
      "properties": {
        "cpuseconds": {
          "description": "the accumuluated cpu seconds of the postgres in this response (s*s)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this postgres is running",
          "format": "int64",
          "type": "integer"
        },
        "memoryseconds": {
          "description": "the accumulated memory seconds of the postgres in this response (byte*s)",
          "type": "string"
        },
        "storageseconds": {
          "description": "the accumulated storage seconds of the postgres in this response (byte*s)",
          "type": "string"
        }
      },
      "required": [
        "cpuseconds",
        "lifetime",
        "memoryseconds",
        "storageseconds"
      ]
    },
    "v1.PostgresUsageRequest": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this postgres",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "description": "the uuid of this postgres",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "from"
      ]
    },
    "v1.PostgresUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.PostgresUsageAccumuluated",
          "description": "just the usage data of the individual postgres summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual postgres",
          "items": {
            "$ref": "#/definitions/v1.PostgresUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.PostgresVersion": {
      "properties": {
        "expirationDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1.ProductOptionUsage": {
      "properties": {
        "clusterid": {
          "description": "the cluster id related to this product option",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name related to this product option",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this product option is running",
          "format": "int64",
          "type": "integer"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        }
      },
      "required": [
        "clusterid",
        "clustername",
        "contract",
        "debtorid",
        "lifetime",
        "projectid",
        "projectname",
        "tenant",
        "tenantname"
      ]
    },
    "v1.ProductOptionUsageAccumuluated": {
      "properties": {
        "lifetime": {
          "description": "the duration that the product options are active",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "lifetime"
      ]
    },
    "v1.ProductOptionUsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "the id of the product option",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.ProductOptionUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.ProductOptionUsageAccumuluated",
          "description": "just the usage data of the individual product options summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual product options",
          "items": {
            "$ref": "#/definitions/v1.ProductOptionUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.Project": {
      "properties": {
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.ProjectCreateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.ProjectFindRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.ProjectIDTime": {
      "properties": {
        "project_id": {
          "description": "projectID as returned by cloud-api (e.g. 10241dd7-a8de-4856-8ac0-b55830b22036)",
          "type": "string"
        },
        "time": {
          "description": "point in time",
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "v1.ProjectInfoRequest": {
      "properties": {
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.ProjectInfoResponse": {
      "properties": {
        "projectid": {
          "description": "the project id",
          "type": "string"
        },
        "tenantid": {
          "description": "the tenant id",
          "type": "string"
        }
      },
      "required": [
        "projectid",
        "tenantid"
      ]
    },
    "v1.ProjectListResponse": {
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1.ProjectResponse"
          },
          "type": "array"
        }
      }
    },
    "v1.ProjectResponse": {
      "properties": {
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.ProjectUpdateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.Quota": {
      "properties": {
        "quota": {
          "format": "int32",
          "type": "integer"
        },
        "used": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1.QuotaSet": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1.Quota"
        },
        "ip": {
          "$ref": "#/definitions/v1.Quota"
        },
        "machine": {
          "$ref": "#/definitions/v1.Quota"
        },
        "project": {
          "$ref": "#/definitions/v1.Quota"
        }
      }
    },
    "v1.Restore": {
      "properties": {
        "postgresID": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "v1.S3CreateRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/v1.S3Key"
        },
        "max_buckets": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "key",
        "max_buckets",
        "name",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3CredentialsResponse": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keys": {
          "items": {
            "$ref": "#/definitions/v1.S3Key"
          },
          "type": "array"
        },
        "max_buckets": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "id",
        "keys",
        "max_buckets",
        "name",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3DeleteRequest": {
      "properties": {
        "force": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "force",
        "id",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3GetRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3Key": {
      "properties": {
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        }
      },
      "required": [
        "access_key",
        "secret_key"
      ]
    },
    "v1.S3ListRequest": {
      "properties": {
        "partition": {
          "type": "string"
        }
      },
      "required": [
        "partition"
      ]
    },
    "v1.S3PartitionResponse": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ready": {
          "type": "boolean"
        }
      },
      "required": [
        "endpoint",
        "id",
        "ready"
      ]
    },
    "v1.S3Response": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "id",
        "partition",
        "project",
        "tenant"
      ]
    },
    "v1.S3UpdateRequest": {
      "properties": {
        "add_keys": {
          "items": {
            "$ref": "#/definitions/v1.S3Key"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "partition": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "remove_access_keys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "add_keys",
        "id",
        "partition",
        "project",
        "remove_access_keys",
        "tenant"
      ]
    },
    "v1.S3Usage": {
      "properties": {
        "bucketid": {
          "description": "the bucket id of this s3 bucket",
          "type": "string"
        },
        "bucketname": {
          "description": "the bucket name of this s3 bucket",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "currentnumberofobjects": {
          "description": "the last reported number of objects of this s3 bucket",
          "type": "string"
        },
        "currentsize": {
          "description": "the last reported size of this s3 bucket",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "end": {
          "description": "the end time of this s3 bucket",
          "format": "date-time",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this s3 bucket is running",
          "format": "int64",
          "type": "integer"
        },
        "partition": {
          "description": "the partition of this s3 bucket",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "start": {
          "description": "the start time of this s3 bucket",
          "format": "date-time",
          "type": "string"
        },
        "storageseconds": {
          "description": "the storage seconds of this s3 bucket (byte*s)",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        },
        "user": {
          "description": "the user name of this s3 bucket",
          "type": "string"
        }
      },
      "required": [
        "bucketid",
        "bucketname",
        "contract",
        "currentnumberofobjects",
        "currentsize",
        "debtorid",
        "end",
        "lifetime",
        "partition",
        "projectid",
        "projectname",
        "start",
        "storageseconds",
        "tenant",
        "tenantname",
        "user"
      ]
    },
    "v1.S3UsageAccumuluated": {
      "properties": {
        "currentnumberofobjects": {
          "description": "the accumulated reported number of objects of the s3 buckets in this response",
          "type": "string"
        },
        "currentsize": {
          "description": "the accumulated reported size of the s3 buckets in this response",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this s3 bucket is running",
          "format": "int64",
          "type": "integer"
        },
        "storageseconds": {
          "description": "the accumulated storage seconds of the s3 buckets in this response (byte*s)",
          "type": "string"
        }
      },
      "required": [
        "currentnumberofobjects",
        "currentsize",
        "lifetime",
        "storageseconds"
      ]
    },
    "v1.S3UsageRequest": {
      "properties": {
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.S3UsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.S3UsageAccumuluated",
          "description": "just the usage data of the individual s3 buckets summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual s3 buckets",
          "items": {
            "$ref": "#/definitions/v1.S3Usage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.SSHKeyPair": {
      "properties": {
        "PrivateKey": {
          "type": "string"
        },
        "PublicKey": {
          "type": "string"
        }
      },
      "required": [
        "PrivateKey",
        "PublicKey"
      ]
    },
    "v1.ShootConstraints": {
      "properties": {
        "firewall_controller_versions": {
          "description": "the list of available firewall controller version",
          "items": {
            "$ref": "#/definitions/v1.FirewallControllerVersion"
          },
          "type": "array"
        },
        "firewall_images": {
          "description": "the list of available firewall images",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "firewall_types": {
          "description": "the list of available firewall types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kubernetes_versions": {
          "description": "the list of available kubernetes versions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machine_images": {
          "description": "the list of available machine images",
          "items": {
            "$ref": "#/definitions/v1.MachineImage"
          },
          "type": "array"
        },
        "machine_types": {
          "description": "the list of available machine types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "networks": {
          "description": "the list of available networks for cluster creation",
          "items": {
            "$ref": "#/definitions/v1.Network"
          },
          "type": "array"
        },
        "partitions": {
          "description": "the list of available partitions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "seeds": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "the available seeds by partition id",
          "type": "object"
        }
      },
      "required": [
        "firewall_controller_versions",
        "firewall_images",
        "firewall_types",
        "kubernetes_versions",
        "machine_images",
        "machine_types",
        "networks",
        "partitions",
        "seeds"
      ]
    },
    "v1.SnapshotFindRequest": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "SnapshotID": {
          "type": "string"
        }
      },
      "required": [
        "Name",
        "PartitionID",
        "ProjectID",
        "SnapshotID"
      ]
    },
    "v1.SnapshotResponse": {
      "properties": {
        "CreationTime": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "NodeIPList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "PartitionID": {
          "type": "string"
        },
        "PrimaryNodeUUID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "ReplicaCount": {
          "format": "integer",
          "type": "integer"
        },
        "RetentionTime": {
          "format": "int64",
          "type": "integer"
        },
        "Size": {
          "format": "integer",
          "type": "integer"
        },
        "SnapshotID": {
          "type": "string"
        },
        "SourceVolumeID": {
          "type": "string"
        },
        "SourceVolumeName": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Statistics": {
          "$ref": "#/definitions/v1.SnapshotStatistics"
        },
        "TenantID": {
          "type": "string"
        }
      },
      "required": [
        "CreationTime",
        "Description",
        "Name",
        "NodeIPList",
        "PartitionID",
        "PrimaryNodeUUID",
        "ProjectID",
        "ReplicaCount",
        "RetentionTime",
        "Size",
        "SnapshotID",
        "SourceVolumeID",
        "SourceVolumeName",
        "State",
        "Statistics",
        "TenantID"
      ]
    },
    "v1.SnapshotStatistics": {
      "properties": {
        "PhysicalCapacity": {
          "format": "integer",
          "type": "integer"
        },
        "PhysicalMemory": {
          "format": "integer",
          "type": "integer"
        },
        "PhysicalOwnedCapacity": {
          "format": "integer",
          "type": "integer"
        },
        "PhysicalOwnedMemory": {
          "format": "integer",
          "type": "integer"
        },
        "UserWritten": {
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "PhysicalCapacity",
        "PhysicalMemory",
        "PhysicalOwnedCapacity",
        "PhysicalOwnedMemory",
        "UserWritten"
      ]
    },
    "v1.StorageClusterInfo": {
      "properties": {
        "ApiEndpoints": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "CurrentMaxReplicas": {
          "format": "integer",
          "type": "integer"
        },
        "DiscoveryEndpoints": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Health": {
          "$ref": "#/definitions/v1.ClusterHealth"
        },
        "MaxAllowedVersion": {
          "type": "string"
        },
        "MinAllowedVersion": {
          "type": "string"
        },
        "MinVersionInCluster": {
          "type": "string"
        },
        "Partition": {
          "type": "string"
        },
        "Servers": {
          "items": {
            "$ref": "#/definitions/v1.StorageServerInfo"
          },
          "type": "array"
        },
        "Statistics": {
          "$ref": "#/definitions/v1.ClusterStatisticsApi"
        },
        "SubsystemNQN": {
          "type": "string"
        },
        "SupportedMaxReplicas": {
          "format": "integer",
          "type": "integer"
        },
        "UUID": {
          "type": "string"
        }
      },
      "required": [
        "ApiEndpoints",
        "CurrentMaxReplicas",
        "DiscoveryEndpoints",
        "Health",
        "MaxAllowedVersion",
        "MinAllowedVersion",
        "MinVersionInCluster",
        "Partition",
        "Servers",
        "Statistics",
        "SubsystemNQN",
        "SupportedMaxReplicas",
        "UUID"
      ]
    },
    "v1.StorageServerInfo": {
      "properties": {
        "LightOSVersion": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "RiskOfServiceLossState": {
          "type": "string"
        },
        "ServerEndpoints": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "State": {
          "type": "string"
        },
        "UUID": {
          "type": "string"
        }
      },
      "required": [
        "LightOSVersion",
        "Name",
        "RiskOfServiceLossState",
        "ServerEndpoints",
        "State",
        "UUID"
      ]
    },
    "v1.SystemComponents": {
      "properties": {
        "NodeLocalDNS": {
          "$ref": "#/definitions/v1.NodeLocalDNS"
        }
      },
      "required": [
        "NodeLocalDNS"
      ]
    },
    "v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "properties": {
        "effect": {
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Required. The taint key to be applied to a node.",
          "type": "string"
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
          "type": "string"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "required": [
        "effect",
        "key"
      ]
    },
    "v1.Tenant": {
      "properties": {
        "default_quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "description": {
          "type": "string"
        },
        "iam_config": {
          "$ref": "#/definitions/v1.IAMConfig"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        }
      }
    },
    "v1.TenantFindRequest": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paging": {
          "$ref": "#/definitions/v1.Paging"
        }
      }
    },
    "v1.TenantResponse": {
      "properties": {
        "default_quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "description": {
          "type": "string"
        },
        "iam_config": {
          "$ref": "#/definitions/v1.IAMConfig"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        }
      }
    },
    "v1.TenantUpdateRequest": {
      "properties": {
        "default_quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "description": {
          "type": "string"
        },
        "iam_config": {
          "$ref": "#/definitions/v1.IAMConfig"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        }
      }
    },
    "v1.UsageCommon": {
      "properties": {
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        }
      },
      "required": [
        "contract",
        "debtorid",
        "projectid",
        "projectname",
        "tenant",
        "tenantname"
      ]
    },
    "v1.UsageRequest": {
      "properties": {
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "from"
      ]
    },
    "v1.UserSecret": {
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.VPN": {
      "properties": {
        "Address": {
          "type": "string"
        },
        "AuthKey": {
          "type": "string"
        }
      },
      "required": [
        "Address",
        "AuthKey"
      ]
    },
    "v1.VolumeFindRequest": {
      "properties": {
        "PartitionID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "TenantID": {
          "type": "string"
        },
        "VolumeID": {
          "type": "string"
        }
      },
      "required": [
        "PartitionID",
        "ProjectID",
        "TenantID",
        "VolumeID"
      ]
    },
    "v1.VolumeResponse": {
      "properties": {
        "ConnectedHosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "NodeIPList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "PartitionID": {
          "type": "string"
        },
        "PrimaryNodeUUID": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        },
        "ProtectionState": {
          "type": "string"
        },
        "QosPolicyName": {
          "type": "string"
        },
        "QosPolicyUUID": {
          "type": "string"
        },
        "RebuildProgress": {
          "type": "string"
        },
        "ReplicaCount": {
          "format": "integer",
          "type": "integer"
        },
        "Size": {
          "format": "integer",
          "type": "integer"
        },
        "SourceSnapshotUUID": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Statistics": {
          "$ref": "#/definitions/v1.VolumeStatistics"
        },
        "StorageClass": {
          "type": "string"
        },
        "TenantID": {
          "type": "string"
        },
        "VolumeHandle": {
          "type": "string"
        },
        "VolumeID": {
          "type": "string"
        },
        "VolumeName": {
          "type": "string"
        }
      },
      "required": [
        "ConnectedHosts",
        "NodeIPList",
        "PartitionID",
        "PrimaryNodeUUID",
        "ProjectID",
        "ProtectionState",
        "QosPolicyName",
        "QosPolicyUUID",
        "RebuildProgress",
        "ReplicaCount",
        "Size",
        "SourceSnapshotUUID",
        "State",
        "Statistics",
        "StorageClass",
        "TenantID",
        "VolumeHandle",
        "VolumeID",
        "VolumeName"
      ]
    },
    "v1.VolumeStatistics": {
      "properties": {
        "CompressionRatio": {
          "format": "double",
          "type": "number"
        },
        "LogicalUsedStorage": {
          "format": "integer",
          "type": "integer"
        },
        "PhysicalUsedStorage": {
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "CompressionRatio",
        "LogicalUsedStorage",
        "PhysicalUsedStorage"
      ]
    },
    "v1.VolumeUsage": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this volume",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capacityseconds": {
          "description": "the capacity seconds of this volume (byte*s)",
          "type": "string"
        },
        "class": {
          "description": "the class of this volume",
          "type": "string"
        },
        "clusterid": {
          "description": "the cluster id of this volume",
          "type": "string"
        },
        "clustername": {
          "description": "the cluster name of this volume",
          "type": "string"
        },
        "contract": {
          "description": "the contract number attached to this entity",
          "type": "string"
        },
        "debtorid": {
          "description": "the debtor id attached to this entity",
          "type": "string"
        },
        "end": {
          "description": "the end time of this volume",
          "format": "date-time",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this volume is running",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "the name of this volume",
          "type": "string"
        },
        "partition": {
          "description": "the partition of this volume",
          "type": "string"
        },
        "projectid": {
          "description": "the project id of this entity",
          "type": "string"
        },
        "projectname": {
          "description": "the project name of this entity",
          "type": "string"
        },
        "start": {
          "description": "the start time of this volume",
          "format": "date-time",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant of this entity",
          "type": "string"
        },
        "tenantname": {
          "description": "the tenant name of this entity",
          "type": "string"
        },
        "type": {
          "description": "the type of this volume",
          "type": "string"
        },
        "uuid": {
          "description": "the uuid of this volume",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "capacityseconds",
        "class",
        "clusterid",
        "clustername",
        "contract",
        "debtorid",
        "end",
        "lifetime",
        "name",
        "partition",
        "projectid",
        "projectname",
        "start",
        "tenant",
        "tenantname",
        "type",
        "uuid"
      ]
    },
    "v1.VolumeUsageAccumuluated": {
      "properties": {
        "capacityseconds": {
          "description": "the accumulated capacity seconds of the volumes in this response (byte*s)",
          "type": "string"
        },
        "lifetime": {
          "description": "the duration that this volume is running",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "capacityseconds",
        "lifetime"
      ]
    },
    "v1.VolumeUsageRequest": {
      "properties": {
        "annotations": {
          "description": "accounting annotations present on the last accounting report of this container",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clusterid": {
          "description": "the cluster id to account for",
          "type": "string"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace name to account for",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to account for",
          "type": "string"
        },
        "tenant": {
          "description": "the tenant to get the container usage for (defaults to all tenants)",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "annotations",
        "from"
      ]
    },
    "v1.VolumeUsageResponse": {
      "properties": {
        "accumulatedusage": {
          "$ref": "#/definitions/v1.VolumeUsageAccumuluated",
          "description": "just the usage data of the individual volumes summed up"
        },
        "from": {
          "description": "the start time in the accounting window to look at",
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "description": "the end time in the accounting window to look at (defaults to current system time)",
          "format": "date-time",
          "type": "string"
        },
        "usage": {
          "description": "the usage data of the individual volumes",
          "items": {
            "$ref": "#/definitions/v1.VolumeUsage"
          },
          "type": "array"
        }
      },
      "required": [
        "accumulatedusage",
        "from",
        "usage"
      ]
    },
    "v1.Worker": {
      "properties": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "CRI": {
          "type": "string"
        },
        "DrainTimeout": {
          "format": "int64",
          "type": "integer"
        },
        "HealthTimeout": {
          "format": "int64",
          "type": "integer"
        },
        "KubernetesVersion": {
          "type": "string"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "MachineImage": {
          "$ref": "#/definitions/v1.MachineImage"
        },
        "MachineType": {
          "type": "string"
        },
        "MaxSurge": {
          "type": "string"
        },
        "MaxUnavailable": {
          "type": "string"
        },
        "Maximum": {
          "format": "int32",
          "type": "integer"
        },
        "Minimum": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Taints": {
          "items": {
            "$ref": "#/definitions/v1.Taint"
          },
          "type": "array"
        }
      },
      "required": [
        "Annotations",
        "CRI",
        "KubernetesVersion",
        "Labels",
        "MachineImage",
        "MachineType",
        "MaxSurge",
        "MaxUnavailable",
        "Maximum",
        "Minimum",
        "Name",
        "Taints"
      ]
    },
    "v1beta1.CARotation": {
      "properties": {
        "lastCompletionTime": {
          "type": "string"
        },
        "lastCompletionTriggeredTime": {
          "type": "string"
        },
        "lastInitiationFinishedTime": {
          "type": "string"
        },
        "lastInitiationTime": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        }
      },
      "required": [
        "phase"
      ]
    },
    "v1beta1.Condition": {
      "properties": {
        "codes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "lastUpdateTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "lastTransitionTime",
        "lastUpdateTime",
        "message",
        "reason",
        "status",
        "type"
      ]
    },
    "v1beta1.ETCDEncryptionKeyRotation": {
      "properties": {
        "lastCompletionTime": {
          "type": "string"
        },
        "lastCompletionTriggeredTime": {
          "type": "string"
        },
        "lastInitiationFinishedTime": {
          "type": "string"
        },
        "lastInitiationTime": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        }
      },
      "required": [
        "phase"
      ]
    },
    "v1beta1.Gardener": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "version"
      ]
    },
    "v1beta1.LastError": {
      "properties": {
        "codes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "lastUpdateTime": {
          "type": "string"
        },
        "taskID": {
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "v1beta1.LastMaintenance": {
      "properties": {
        "description": {
          "type": "string"
        },
        "failureReason": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "triggeredTime": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "state",
        "triggeredTime"
      ]
    },
    "v1beta1.LastOperation": {
      "properties": {
        "description": {
          "type": "string"
        },
        "lastUpdateTime": {
          "type": "string"
        },
        "progress": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "lastUpdateTime",
        "progress",
        "state",
        "type"
      ]
    },
    "v1beta1.ServiceAccountKeyRotation": {
      "properties": {
        "lastCompletionTime": {
          "type": "string"
        },
        "lastCompletionTriggeredTime": {
          "type": "string"
        },
        "lastInitiationFinishedTime": {
          "type": "string"
        },
        "lastInitiationTime": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        }
      },
      "required": [
        "phase"
      ]
    },
    "v1beta1.ShootAdvertisedAddress": {
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "url"
      ]
    },
    "v1beta1.ShootCredentials": {
      "properties": {
        "rotation": {
          "$ref": "#/definitions/v1beta1.ShootCredentialsRotation"
        }
      }
    },
    "v1beta1.ShootCredentialsRotation": {
      "properties": {
        "certificateAuthorities": {
          "$ref": "#/definitions/v1beta1.CARotation"
        },
        "etcdEncryptionKey": {
          "$ref": "#/definitions/v1beta1.ETCDEncryptionKeyRotation"
        },
        "kubeconfig": {
          "$ref": "#/definitions/v1beta1.ShootKubeconfigRotation"
        },
        "observability": {
          "$ref": "#/definitions/v1beta1.ShootObservabilityRotation"
        },
        "serviceAccountKey": {
          "$ref": "#/definitions/v1beta1.ServiceAccountKeyRotation"
        },
        "sshKeypair": {
          "$ref": "#/definitions/v1beta1.ShootSSHKeypairRotation"
        }
      }
    },
    "v1beta1.ShootKubeconfigRotation": {
      "properties": {
        "lastCompletionTime": {
          "type": "string"
        },
        "lastInitiationTime": {
          "type": "string"
        }
      }
    },
    "v1beta1.ShootObservabilityRotation": {
      "properties": {
        "lastCompletionTime": {
          "type": "string"
        },
        "lastInitiationTime": {
          "type": "string"
        }
      }
    },
    "v1beta1.ShootSSHKeypairRotation": {
      "properties": {
        "lastCompletionTime": {
          "type": "string"
        },
        "lastInitiationTime": {
          "type": "string"
        }
      }
    },
    "v1beta1.ShootStatus": {
      "properties": {
        "advertisedAddresses": {
          "items": {
            "$ref": "#/definitions/v1beta1.ShootAdvertisedAddress"
          },
          "type": "array"
        },
        "clusterIdentity": {
          "type": "string"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1beta1.Condition"
          },
          "type": "array"
        },
        "constraints": {
          "items": {
            "$ref": "#/definitions/v1beta1.Condition"
          },
          "type": "array"
        },
        "credentials": {
          "$ref": "#/definitions/v1beta1.ShootCredentials"
        },
        "gardener": {
          "$ref": "#/definitions/v1beta1.Gardener"
        },
        "hibernated": {
          "type": "boolean"
        },
        "lastErrors": {
          "items": {
            "$ref": "#/definitions/v1beta1.LastError"
          },
          "type": "array"
        },
        "lastHibernationTriggerTime": {
          "type": "string"
        },
        "lastMaintenance": {
          "$ref": "#/definitions/v1beta1.LastMaintenance"
        },
        "lastOperation": {
          "$ref": "#/definitions/v1beta1.LastOperation"
        },
        "migrationStartTime": {
          "type": "string"
        },
        "observedGeneration": {
          "format": "int64",
          "type": "integer"
        },
        "retryCycleStartTime": {
          "type": "string"
        },
        "seedName": {
          "type": "string"
        },
        "technicalID": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "required": [
        "gardener",
        "hibernated",
        "technicalID",
        "uid"
      ]
    }
  },
  "info": {
    "contact": {
      "email": "devops@f-i-ts.de",
      "name": "Devops Team",
      "url": "http://www.f-i-ts.de"
    },
    "description": "Resource for managing cloud entities",
    "license": {
      "name": "MIT",
      "url": "http://mit.org"
    },
    "title": "cloud-api"
  },
  "paths": {
    "/v1/accounting/cluster-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "clusterUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find cluster usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/cluster-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "clusterUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find cluster usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/container-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "containerUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ContainerUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ContainerUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find container usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/container-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "containerUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ContainerUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find container usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/ip-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "ipUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find ip usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/ip-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "ipUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find ip usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/machine-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "machineUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find machine usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/network-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "networkUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find network usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/network-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "networkUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find network usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/postgres-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "postgresUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find postgres usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/postgres-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "postgresUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find postgres usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/product-option-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "productOptionUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProductOptionUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProductOptionUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find product option usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/projects": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "projects",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectInfoRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ProjectInfoResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "discover accounted projects witihin a given time period",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/s3-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "s3Usage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3UsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3UsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find s3 bucket usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/s3-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "s3UsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3UsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find s3 bucket usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/volume-usage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "volumeUsage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.VolumeUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeUsageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find volume usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/accounting/volume-usage-csv": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "volumeUsageCSV",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.VolumeUsageRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find volume usage for given accounting query",
        "tags": [
          "accounting"
        ]
      }
    },
    "/v1/audit/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findAuditTraces",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.AuditFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.AuditResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find all audit traces that match given properties",
        "tags": [
          "audit"
        ]
      }
    },
    "/v1/cluster": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listClusters",
        "parameters": [
          {
            "default": false,
            "description": "returns machines in the response, which is disabled by default for list responses because it makes the request slower",
            "in": "query",
            "name": "return-machines",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ClusterResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all clusters",
        "tags": [
          "cluster"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates a cluster. if the cluster was changed since this one was read, a conflict is returned",
        "tags": [
          "cluster"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a cluster. if the given ID already exists a conflict is returned",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/constraints": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listConstraints",
        "parameters": [
          {
            "description": "filter constraints for a certain partition",
            "in": "query",
            "name": "partition",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ShootConstraints"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get constraints for cluster create",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findClusters",
        "parameters": [
          {
            "default": false,
            "description": "returns machines in the response, which is disabled by default for list responses because it makes the request slower",
            "in": "query",
            "name": "return-machines",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ClusterResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find clusters by multiple criteria",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteCluster",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an cluster and returns the deleted entity",
        "tags": [
          "cluster"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findCluster",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "returns machines in the response",
            "in": "query",
            "name": "return-machines",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get cluster by id",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/audit-policy": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getAuditPolicy",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.AuditPolicyResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get the current content of the audit policy config map for a given cluster",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/cyclemachine": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "cycleMachine",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterMachineCycleRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "trigger power cycle of a machine ",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/kubeconfigtpl": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getClusterKubeconfigTpl",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterKubeconfigResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "gets the kubeconfig-template just with cluster-infos for the cluster",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/monitoringsecret": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getMonitoringSecret",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterMonitoringSecretResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get the monitoring access of the cluster to access the cluster's grafana dashboard",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/reconcile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "reconcileCluster",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "trigger cluster reconcilation ",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/reinstallmachine": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "reinstallMachine",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterMachineReinstallRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "trigger reinstall of a machine ",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/resetmachine": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "resetMachine",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterMachineResetRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "trigger hard power reset of a machine ",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cluster/{id}/sshkeypair": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getSSHKeyPair",
        "parameters": [
          {
            "description": "identifier of the cluster",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ClusterCredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all the ssh-keypairs of the cluster",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/database/postgres": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listPostgres",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PostgresResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all postgres databases",
        "tags": [
          "database"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updatePostgres",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates a postgres. if the postgres was changed since this one was read, a conflict is returned",
        "tags": [
          "database"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createPostgres",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a postgres. if the given ID already exists a conflict is returned",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/backup-config": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listPostgresBackupConfigs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PostgresBackupConfigResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all postgres backups",
        "tags": [
          "database"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updatePostgresBackupConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresBackupConfigUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresBackupConfigResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "update the postgres backup",
        "tags": [
          "database"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createPostgresBackupConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresBackupConfigCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PostgresBackupConfigResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a postgres backup",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/backup-config/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deletePostgresBackupConfig",
        "parameters": [
          {
            "description": "identifier of the backup config",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresBackupConfigResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "delete a postgres backup",
        "tags": [
          "database"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getBackupConfig",
        "parameters": [
          {
            "description": "identifier of the backup config",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresBackupConfigResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get postgres backups",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findPostgres",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PostgresResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find postgres databases by multiple criteria",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/partitions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getPostgresPartitions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresPartitionsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get postgres partitions supported",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/restore": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "restorePostgres",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresRestoreRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "restore a postgres based on an existing postgres. if the given source ID does already exist a conflict is returned",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/restore/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "acceptPostgresRestore",
        "parameters": [
          {
            "description": "identifier of the postgres",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "indicates a validated restore. if the postgres was changed since this one was read, a conflict is returned",
        "tags": [
          "database"
        ]
      },
      "post": {
        "consumes": [
          "*/*",
          "application/json"
        ],
        "deprecated": true,
        "operationId": "acceptPostgresRestoreDeprecated",
        "parameters": [
          {
            "description": "identifier of the postgres",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "indicates a validated restore. if the postgres was changed since this one was read, a conflict is returned",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/standby": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createPostgresStandby",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PostgresCreateStandbyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a standby postgres. if the given ID does not already exists a conflict is returned",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/versions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getPostgresVersions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PostgresVersion"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get postgres versions supported",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deletePostgres",
        "parameters": [
          {
            "description": "identifier of the postgres",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an postgres and returns the deleted entity",
        "tags": [
          "database"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getPostgres",
        "parameters": [
          {
            "description": "identifier of the postgres",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get postgres by id",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/{id}/backups": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getPostgresBackups",
        "parameters": [
          {
            "description": "identifier of the postgres",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PostgresBackupEntry"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get postgres stored backups by id",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/database/postgres/{id}/secrets": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getPostgresSecrets",
        "parameters": [
          {
            "description": "identifier of the postgres",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PostgresSecretsRespone"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get postgres secrets by id",
        "tags": [
          "database"
        ]
      }
    },
    "/v1/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "health",
        "parameters": [
          {
            "description": "return health for this specific service only",
            "in": "query",
            "name": "service",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.HealthResponse"
            }
          },
          "500": {
            "description": "Unhealthy",
            "schema": {
              "$ref": "#/definitions/rest.HealthResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "perform a healthcheck",
        "tags": [
          "health"
        ]
      }
    },
    "/v1/ip": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listIPs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.V1IPResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all ips",
        "tags": [
          "ip"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates an ip.",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPAllocateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "allocate an ip in a given network",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findIPs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.V1IPResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find ips by multiple criteria",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/{ip}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "freeIP",
        "parameters": [
          {
            "description": "address of the ip",
            "in": "path",
            "name": "ip",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "frees an ip and returns the freed entity",
        "tags": [
          "ip"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getIP",
        "parameters": [
          {
            "description": "address of the ip",
            "in": "path",
            "name": "ip",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.V1IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get ip by address",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/masterdata": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getMasterdata",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MasterdataLookupRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/v1.MasterdataLookupResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "gets Masterdata for given lookup criteria.",
        "tags": [
          "masterdata"
        ]
      }
    },
    "/v1/project": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all projects",
        "tags": [
          "project"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "412": {
            "description": "OptimisticLock",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "update a project. optimistic lock error can occur.",
        "tags": [
          "project"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a project. if the given ID already exists a conflict is returned",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/project/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findProjects",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find projects by multiple criteria",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/project/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteProject",
        "parameters": [
          {
            "description": "identifier of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes a project and returns the deleted entity",
        "tags": [
          "project"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findProject",
        "parameters": [
          {
            "description": "identifier of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get project by id",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/s3": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deletes3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3DeleteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3Response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an s3 user",
        "tags": [
          "s3"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "gets3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3GetRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3CredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get s3 user",
        "tags": [
          "s3"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updates3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3UpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3CredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates an s3 user.",
        "tags": [
          "s3"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "creates3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3CreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.S3CredentialsResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create an s3 user. if the given name for this tenant already exists a conflict is returned",
        "tags": [
          "s3"
        ]
      }
    },
    "/v1/s3/list": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "lists3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.S3ListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.S3Response"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "list s3 users",
        "tags": [
          "s3"
        ]
      }
    },
    "/v1/s3/partitions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "lists3partitions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.S3PartitionResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "list s3 partitions",
        "tags": [
          "s3"
        ]
      }
    },
    "/v1/tenant": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listTenants",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.TenantResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get a tenant list",
        "tags": [
          "tenant"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateTenant",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.TenantUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/v1.TenantResponse"
            }
          },
          "412": {
            "description": "OptimisticLock",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "update a tenant. optimistic lock error can occur.",
        "tags": [
          "tenant"
        ]
      }
    },
    "/v1/tenant/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findTenants",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.TenantFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.TenantResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find tenants by multiple criteria",
        "tags": [
          "tenant"
        ]
      }
    },
    "/v1/tenant/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getTenant",
        "parameters": [
          {
            "description": "identifier of the tenant",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.TenantResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get tenant by id",
        "tags": [
          "tenant"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "info",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.version"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "returns the current version information of this module",
        "tags": [
          "version"
        ]
      }
    },
    "/v1/volume": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listVolumes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.VolumeResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all volumes",
        "tags": [
          "volume"
        ]
      }
    },
    "/v1/volume/clusterinfo": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "clusterInfo",
        "parameters": [
          {
            "description": "identifier of the partition",
            "in": "query",
            "name": "partitionid",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.StorageClusterInfo"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "return info and status to connected storage clusters",
        "tags": [
          "volume"
        ]
      }
    },
    "/v1/volume/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findVolumes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.VolumeFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.VolumeResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find volumes by multiple criteria",
        "tags": [
          "volume"
        ]
      }
    },
    "/v1/volume/snapshot/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findSnapshots",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.SnapshotFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.SnapshotResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find snapshots by multiple criteria",
        "tags": [
          "volume"
        ]
      }
    },
    "/v1/volume/snapshot/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteSnapshot",
        "parameters": [
          {
            "description": "id of the snapshot",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "project id snapshot",
            "in": "query",
            "name": "project-id",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SnapshotResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes a snapshot including all data",
        "tags": [
          "volume"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getSnapshot",
        "parameters": [
          {
            "description": "identifier of the snapshot",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "project id snapshot",
            "in": "query",
            "name": "project-id",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SnapshotResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get a snapshot",
        "tags": [
          "volume"
        ]
      }
    },
    "/v1/volume/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteVolume",
        "parameters": [
          {
            "description": "id of the volume",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes a volume including all data",
        "tags": [
          "volume"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getVolume",
        "parameters": [
          {
            "description": "identifier of the volume",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.VolumeResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get a volume",
        "tags": [
          "volume"
        ]
      }
    }
  },
  "security": [
    {
      "HMAC": []
    },
    {
      "jwt": []
    }
  ],
  "securityDefinitions": {
    "HMAC": {
      "description": "Generate a 'Authorization: Metal-View-All xxxx' header where 'xxxx' is a HMAC generated by the request-date, the request-method and the body",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "jwt": {
      "description": "Add a 'Authorization: Bearer xxxx' header to the request where 'xxxx' is the OIDC token retrieved from the identity provider's authentication endpoint",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "Managing accounting entities",
      "name": "accounting"
    },
    {
      "description": "Managing audit entities",
      "name": "audit"
    },
    {
      "description": "Managing kubernetes cluster entities",
      "name": "cluster"
    },
    {
      "description": "Managing ip entities",
      "name": "ip"
    },
    {
      "description": "Managing masterdata entities",
      "name": "masterdata"
    },
    {
      "description": "Managing project entities",
      "name": "project"
    },
    {
      "description": "Managing s3 entities",
      "name": "s3"
    },
    {
      "description": "Managing tenant entities",
      "name": "tenant"
    }
  ]
}
